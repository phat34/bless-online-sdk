#pragma once

// Unreal Engine 3 (3) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x8)
#endif

#include "UE3_Basic.hpp"
#include "UE3_UDKBase_classes.hpp"
#include "UE3_Core_classes.hpp"
#include "UE3_GFxUI_classes.hpp"
#include "UE3_Engine_classes.hpp"
#include "UE3_GameFramework_classes.hpp"
#include "UE3_Awesomium_classes.hpp"

namespace SDK
{
//---------------------------------------------------------------------------
//Constants
//---------------------------------------------------------------------------

#define CONST_AUTOPATH_HALF_WORLD_SIZE                           254000
#define CONST_UI_STATE_SHOP                                      0x20000
#define CONST_WIC_ACTID_ITEM                                     347006
#define CONST_ENV_PP_VOLUME_MAX_LENSFLARE_NUMBER                 2
#define CONST_LootingDice_Time                                   60.f
#define CONST_MOUNT_EXTRACTION_MAX                               11
#define CONST_PARTY_MEMBER_MAX                                   5
#define CONST_FELLOW_EXTRACTION_MAX                              12
#define CONST_UI_RANKING_CT_GROUPCOUNT_PER_PAGE                  5
#define CONST_RAID_PARTY_MAX                                     4
#define CONST_PET_EXTRACTION_MAX                                 11
#define CONST_WIC_ACTID_VIPSERVICE                               347004
#define CONST_ENV_PP_VOLUME_MAX_HEIGHTFOG_NUMBER                 2
#define CONST_TAG_SKELETAL_MESH                                  'SK'
#define CONST_CC_Mat_Syl                                         "Mat_Syl"
#define CONST_WIC_ACTID_LUMENASENDING                            347400
#define CONST_UI_STATE_TEST                                      0x800000
#define CONST_WIC_ACTID_EXCHANGE_OPENER                          347302
#define CONST_UI_STATE_CINEMATIC                                 0x8000
#define CONST_WIC_ACTID_REGISTERITEM                             347301
#define CONST_WIC_ACTID_EXCHANGE                                 347300
#define CONST_UI_STATE_CREATE_CUSTOMIZING                        0x100
#define CONST_UI_STATE_CREATE_CONFIRM                            0x200
#define CONST_WIC_ACTID_BLESSERSHIP                              347007
#define CONST_LOBBY_CREATE_SELECT_RACE_ELF                       "Elf"
#define CONST_MAIL_RETURN                                        0x08
#define CONST_WIC_ACTID_LUMENA                                   347005
#define CONST_UI_STATE_TELEPORT                                  0x100000
#define CONST_WIC_ACTID_FIRSTSHOP                                347003
#define CONST_WIC_ACTID_STORAGEBOX                               347002
#define CONST_DialogButton_First                                 0x01
#define CONST_WIC_ACTID_MAINSHOP                                 347001
#define CONST_UI_MINIMAP_WORLD_MIN_XY                            -254000
#define CONST_UI_STATE_WORLD_MAP                                 0x1000
#define CONST_WIC_ACTID_NONE                                     -1
#define CONST_MAIL_NONE                                          0x00
#define CONST_SEND_MAIL_ITEM_SLOT_MAX                            5
#define CONST_PartyMatchingPosition_Healer                       0x04
#define CONST_PartyMatchingPosition_Dealer                       0x02
#define CONST_PartyMatchingPosition_Tanker                       0x01
#define CONST_PartyMatchingPosition_None                         0x00
#define CONST_FULLTAG_CAMERA_LOBBY_SELECT_CHARACTER              'LobbyCharacterSelectCamera'
#define CONST_Slot_Update_New                                    0x02
#define CONST_Slot_Update_Equip                                  0x01
#define CONST_ATTACK_APPLY_RESULT_KEY                            -2
#define CONST_Slot_Update_None                                   0x00
#define CONST_DialogButton_None                                  0x00
#define CONST_GroundCheckBoundDownZ                              40.f
#define CONST_ActionApplyInfoSetKeepingTime                      10.0f
#define CONST_GroundCheckBoundUpZ                                10.f
#define CONST_DialogButton_Four                                  0x08
#define CONST_DialogButton_Third                                 0x04
#define CONST_HOUR_PER_DAY                                       24
#define CONST_UI_STATE_GAME_NORMAL                               0x400
#define CONST_DialogButton_Second                                0x02
#define CONST_MINUTE_PER_HOUR                                    60
#define CONST_SECOND_PER_MINUTE                                  60
#define CONST_MAIL_WITHDRAW                                      0x04
#define CONST_MAIL_READ                                          0x02
#define CONST_MAIL_UNREAD                                        0x01
#define CONST_UI_STATE_MAX                                       0x1000000
#define CONST_UI_STATE_WAY_POINT                                 0x2000
#define CONST_UI_STATE_WAREHOUSE                                 0x400000
#define CONST_UI_STATE_SECONDPASSWORD                            0x200000
#define CONST_UI_STATE_SELECT_CHARACTER_DETAILS                  0x80000
#define CONST_UI_STATE_TALK_UI                                   0x40000
#define CONST_UI_STATE_WARP                                      0x10000
#define CONST_UI_STATE_POSITION_SEND                             0x4000
#define CONST_UI_STATE_TALK                                      0x800
#define CONST_LOBBY_CREATE_SELECT_PREFIX                         "Sel"
#define CONST_UI_STATE_CREATE_CHARACTER                          0x80
#define CONST_UI_STATE_SELECT_REALM                              0x40
#define CONST_UI_STATE_SELECT_CHARACTER                          0x20
#define CONST_UI_STATE_SELECT_SERVER                             0x10
#define CONST_UI_STATE_PMANG_LOGIN                               0x08
#define CONST_UI_STATE_LOGIN                                     0x04
#define CONST_UI_STATE_OPENING                                   0x02
#define CONST_UI_STATE_INTRO                                     0x01
#define CONST_MONSTER_BOOK_STAGE_COMPLETE                        4
#define CONST_UI_STATE_NONE                                      0x00
#define CONST_UI_LOAD_STATE_GAME                                 0x04
#define CONST_UI_LOAD_STATE_LOBBY                                0x02
#define CONST_UI_LOAD_STATE_INTRO                                0x01
#define CONST_UI_LOAD_STATE_NONE                                 0x00
#define CONST_GuildWarHistoryDataCountPerPage                    11
#define CONST_UI_KEYSKILL_INDEX                                  0
#define CONST_SkillFiringRateKeepingTime                         30.0f
#define CONST_ActionApplyInfoSetStroageMax                       15
#define CONST_ScreenFadeTimeWhenSkip                             1.3f
#define CONST_ScreenFadeTimeNormal                               1.5f
#define CONST_GuildWarSeasonHistoryDataCountPerPage              11
#define CONST_GuildManagementHistoryDataCountPerPage             15
#define CONST_GuildMemberUIInfluenceViewColumnCount              4
#define CONST_LOBBY_CREATE_SELECT_JOB_MYSTICK                    "Mystic"
#define CONST_GuildMemberUIMemberViewColumnCount                 5
#define CONST_MAIN_HELP_PAGE_CID                                 1
#define CONST_ParamTypeVector                                    'vector'
#define CONST_MATINEE_EVENT_NANE_UNION                           "MAT_Un"
#define CONST_ParamTypeFloat                                     'float'
#define CONST_PGS_CHANGE_OUT_LINE_COLOR                          2002
#define CONST_PGS_TURN_OFF_OUT_LINE                              2001
#define CONST_PGS_TURN_ON_OUT_LINE                               2000
#define CONST_POSSIBILITY_STATE_DEVIDE_INDEX                     1000
#define CONST_MAILBOX_MAIL_MAX                                   10
#define CONST_MIDDAY_TIME                                        12
#define CONST_CC_Mat_Pan                                         "Mat_Pan"
#define CONST_INVALID_VALUE                                      0x7ffff
#define CONST_CutInCameraActor_MAX_ACTIVE_CAMERA_ANIMS           8
#define CONST_CC_Mat_Sel                                         "Mat_Sel"
#define CONST_UI_MINIMAP_DIVISION_SIZE                           25400
#define CONST_MAX_MINIMAP_TOOLTIP_COUNT                          10
#define CONST_UI_MINIMAP_WORLD_MAX_XY                            254000
#define CONST_UI_MINIMAP_HALF_WORLD_SIZE                         254000
#define CONST_CC_Mat_Habi                                        "Mat_Habi"
#define CONST_CC_Mat_Lup                                         "Mat_Lup"
#define CONST_CC_Mat_Mas                                         "Mat_Mas"
#define CONST_CC_Mat_Ami                                         "Mat_Ami"
#define CONST_CC_Mat_Aqu                                         "Mat_Aqu"
#define CONST_CC_CUSTOMIZING_PS_TAG                              "PS_CM_All"
#define CONST_CC_CUSTOMIZING_ANIMSEQ_IDLE                        "CM_Idle"
#define CONST_CC_CUSTOMIZING_ANIMSEQ_ACTION                      "CM_Action"
#define CONST_CC_CUSTOMIZING_ANIMSEQ_CLOSE_EYE                   "CM_Idle_Zoom_Close"
#define CONST_CC_CUSTOMIZING_ANIMSEQ_ZOOM                        "CM_Idle_Zoom"
#define CONST_TAG_LIGHT                                          'LT'
#define CONST_TAG_PLYAER_START                                   'PS'
#define CONST_FULLTAG_CAMERA_LOGIN_EXTERNAL                      'CameraLogin_External'
#define CONST_CC_SETNAME_ANIMSEQ                                 "Lobby_Idle"
#define CONST_FULLTAG_CAMERA_LOGIN                               'CameraLogin'
#define CONST_FULLTAG_CAMERA_REALM_SELECT                        'Camera_SelectFaction'
#define CONST_FULLTAG_CAMERA_LOBBY_TRANS                         'LobbyTransCam'
#define CONST_LOBBY_IDLE_NAME_HIERON                             'Idle_Lobby_Hi'
#define CONST_LOBBY_IDLE_NAME_UNION                              'Idle_Lobby_Un'
#define CONST_KOR_INTRO_TIME_LIMIT                               11
#define CONST_RUS_INTRO_TIME_LIMIT                               14
#define CONST_MATINEE_EVENT_NANE_HIERON                          "MAT_Hi"
#define CONST_CS_PS_HI_TAG                                       "PS_MyHi_All"
#define CONST_CS_PS_UN_TAG                                       "PS_MyUn_All"
#define CONST_CS_ANIMSEQ_IDLE                                    "Lobby_Selection_Idle"
#define CONST_CC_SELECTRACE_PS_HI_TAG                            "PS_Hi_All"
#define CONST_CC_SELECTRACE_PS_UN_TAG                            "PS_Un_All"
#define CONST_CC_SELECTRACE_ANIMSEQ                              "Lobby_Idle"
#define CONST_LOBBY_CREATE_SELECT_LINK_TEXT                      "_"
#define CONST_LOBBY_CREATE_SELECT_POSTFIX_STOP                   "Stop"
#define CONST_LOBBY_CREATE_SELECT_POSTFIX_SET                    "Set"
#define CONST_LOBBY_CREATE_SELECT_RACE_HUMAN                     "Hum"
#define CONST_LOBBY_CREATE_SELECT_RACE_PANTERA                   "Pant"
#define CONST_LOBBY_CREATE_SELECT_RACE_MASQ                      "Masq"
#define CONST_LOBBY_CREATE_SELECT_RACE_LUPUS                     "Lups"
#define CONST_LOBBY_CREATE_SELECT_GENDER_MALE                    "M"
#define CONST_LOBBY_CREATE_SELECT_GENDER_FEMALE                  "F"
#define CONST_LOBBY_CREATE_SELECT_JOB_GUARDIAN                   "Guardian"
#define CONST_LOBBY_CREATE_SELECT_JOB_BERSERKER                  "Berserker"
#define CONST_LOBBY_CREATE_SELECT_JOB_ASSASSIN                   "Assassin"
#define CONST_LOBBY_CREATE_SELECT_JOB_RANGER                     "Ranger"
#define CONST_LOBBY_CREATE_SELECT_JOB_MAGE                       "Mage"
#define CONST_LOBBY_CREATE_SELECT_JOB_PALADIN                    "Paladin"
#define CONST_CC_SETNAME_PS_HI_TAG                               "PS_Hi_All"
#define CONST_CC_SETNAME_PS_UN_TAG                               "PS_Un_All"

//---------------------------------------------------------------------------
//Enums
//---------------------------------------------------------------------------

// Enum BLGame.ABLCTypeEnum.CEGaugeUseType
enum class ECEGaugeUseType : uint8_t
{
	CEGaugeUse_T_NULL              = 0,
	CEGaugeUse_T_GAUGE             = 1,
	CEGaugeUse_T_ALL               = 2,
	CEGaugeUse_T_COMBAT            = 3,
	CEGaugeUse_T_BEGIN             = 4,
	CEGaugeUse_T_END               = 5,
	CEGaugeUse_T_NIL               = 6,
	CEGaugeUse_T_MAX               = 7
};


// Enum BLGame.ABLCTypeEnum.CECreditStringType
enum class ECECreditStringType : uint8_t
{
	CECreditString_T_NIL           = 0,
	CECreditString_T_SPACE         = 1,
	CECreditString_T_POSITION      = 2,
	CECreditString_T_NAME          = 3,
	CECreditString_T_BEGIN         = 4,
	CECreditString_T_END           = 5,
	CECreditString_T_MAX           = 6
};


// Enum BLGame.ABLCTypeEnum.CECombatSkillType
enum class ECECombatSkillType : uint8_t
{
	CECombatSkill_T_NIL            = 0,
	CECombatSkill_T_STANCE         = 1,
	CECombatSkill_T_NONSTANCE      = 2,
	CECombatSkill_T_BEGIN          = 3,
	CECombatSkill_T_END            = 4,
	CECombatSkill_T_MAX            = 5
};


// Enum BLGame.ABLCTypeEnum.CEGemType
enum class ECEGemType : uint8_t
{
	CEGem_T_NIL                    = 0,
	CEGem_T_STANCE_GEM             = 1,
	CEGem_T_NONSTANCE_GEM          = 2,
	CEGem_T_PARAMETER_GEM          = 3,
	CEGem_T_BEGIN                  = 4,
	CEGem_T_END                    = 5,
	CEGem_T_MAX                    = 6
};


// Enum BLGame.ABLCTypeEnum.CEQTEKeyType
enum class ECEQTEKeyType : uint8_t
{
	CEQTEKey_T_R                   = 0,
	CEQTEKey_T_T                   = 1,
	CEQTEKey_T_Y                   = 2,
	CEQTEKey_T_BEGIN               = 3,
	CEQTEKey_T_END                 = 4,
	CEQTEKey_T_NIL                 = 5,
	CEQTEKey_T_MAX                 = 6
};


// Enum BLGame.ABLCTypeEnum.CEStanceQTEType
enum class ECEStanceQTEType : uint8_t
{
	CEStanceQTE_T_NONE             = 0,
	CEStanceQTE_T_HOLD             = 1,
	CEStanceQTE_T_BEGIN            = 2,
	CEStanceQTE_T_END              = 3,
	CEStanceQTE_T_NIL              = 4,
	CEStanceQTE_T_MAX              = 5
};


// Enum BLGame.ABLCTypeEnum.CEStanceSkillType
enum class ECEStanceSkillType : uint8_t
{
	CEStanceSkill_T_STANCE_SKILL   = 0,
	CEStanceSkill_T_QTE_SKILL      = 1,
	CEStanceSkill_T_BEGIN          = 2,
	CEStanceSkill_T_END            = 3,
	CEStanceSkill_T_NIL            = 4,
	CEStanceSkill_T_MAX            = 5
};


// Enum BLGame.ABLCTypeEnum.CEGradeType
enum class ECEGradeType : uint8_t
{
	CEGrade_T_S                    = 0,
	CEGrade_T_A                    = 1,
	CEGrade_T_B                    = 2,
	CEGrade_T_C                    = 3,
	CEGrade_T_F                    = 4,
	CEGrade_T_BEGIN                = 5,
	CEGrade_T_END                  = 6,
	CEGrade_T_NIL                  = 7,
	CEGrade_T_MAX                  = 8
};


// Enum BLGame.ABLCTypeEnum.CEBattleFieldWarType
enum class ECEBattleFieldWarType : uint8_t
{
	CEBattleFieldWar_T_NONE        = 0,
	CEBattleFieldWar_T_CASTRAGRANDISWAR = 1,
	CEBattleFieldWar_T_COLOSSEUMWAR = 2,
	CEBattleFieldWar_T_SPERMAWAR   = 3,
	CEBattleFieldWar_T_CHALLENGETOWER = 4,
	CEBattleFieldWar_T_BEGIN       = 5,
	CEBattleFieldWar_T_END         = 6,
	CEBattleFieldWar_T_NIL         = 7,
	CEBattleFieldWar_T_MAX         = 8
};


// Enum BLGame.ABLCTypeEnum.CEOccupationWarType
enum class ECEOccupationWarType : uint8_t
{
	CEOccupationWar_T_SPERMA       = 0,
	CEOccupationWar_T_BEGIN        = 1,
	CEOccupationWar_T_END          = 2,
	CEOccupationWar_T_NIL          = 3,
	CEOccupationWar_T_MAX          = 4
};


// Enum BLGame.ABLCTypeEnum.CEReturnLocationType
enum class ECEReturnLocationType : uint8_t
{
	CEReturnLocation_T_SPAWN_POINT = 0,
	CEReturnLocation_T_CURRECT_LOCATION = 1,
	CEReturnLocation_T_BEGIN       = 2,
	CEReturnLocation_T_END         = 3,
	CEReturnLocation_T_NIL         = 4,
	CEReturnLocation_T_MAX         = 5
};


// Enum BLGame.ABLCTypeEnum.CEAppearanceType
enum class ECEAppearanceType : uint8_t
{
	CEAppearance_T_NONE            = 0,
	CEAppearance_T_HUMAN           = 1,
	CEAppearance_T_BEGIN           = 2,
	CEAppearance_T_END             = 3,
	CEAppearance_T_NIL             = 4,
	CEAppearance_T_MAX             = 5
};


// Enum BLGame.ABLCTypeEnum.CESpeicalWarVictoryType
enum class ECESpeicalWarVictoryType : uint8_t
{
	CESpeicalWarVictory_T_NONE     = 0,
	CESpeicalWarVictory_T_WIN      = 1,
	CESpeicalWarVictory_T_LOSE     = 2,
	CESpeicalWarVictory_T_DRAW     = 3,
	CESpeicalWarVictory_T_BEGIN    = 4,
	CESpeicalWarVictory_T_END      = 5,
	CESpeicalWarVictory_T_NIL      = 6,
	CESpeicalWarVictory_T_MAX      = 7
};


// Enum BLGame.ABLCTypeEnum.CETamingMiniGameParamType
enum class ECETamingMiniGameParamType : uint8_t
{
	CETamingMiniGameParam_T_TIME   = 0,
	CETamingMiniGameParam_T_BAR_SPEED = 1,
	CETamingMiniGameParam_T_BEGIN  = 2,
	CETamingMiniGameParam_T_END    = 3,
	CETamingMiniGameParam_T_NIL    = 4,
	CETamingMiniGameParam_T_MAX    = 5
};


// Enum BLGame.ABLCTypeEnum.CENPCTamingType
enum class ECENPCTamingType : uint8_t
{
	CENPCTaming_T_SMALL            = 0,
	CENPCTaming_T_MIDDLE           = 1,
	CENPCTaming_T_HUGE             = 2,
	CENPCTaming_T_SPECIAL          = 3,
	CENPCTaming_T_BEGIN            = 4,
	CENPCTaming_T_END              = 5,
	CENPCTaming_T_NIL              = 6,
	CENPCTaming_T_MAX              = 7
};


// Enum BLGame.ABLCTypeEnum.CETamingBarMoveType
enum class ECETamingBarMoveType : uint8_t
{
	CETamingBarMove_T_RIGHT        = 0,
	CETamingBarMove_T_LEFT         = 1,
	CETamingBarMove_T_REPEAT_RIGHT = 2,
	CETamingBarMove_T_REPEAT_LEFT  = 3,
	CETamingBarMove_T_RANDOM       = 4,
	CETamingBarMove_T_BEGIN        = 5,
	CETamingBarMove_T_END          = 6,
	CETamingBarMove_T_NIL          = 7,
	CETamingBarMove_T_MAX          = 8
};


// Enum BLGame.ABLCTypeEnum.CEV2CraftBroadwayType
enum class ECEV2CraftBroadwayType : uint8_t
{
	CEV2CraftBroadway_T_SMITH1     = 0,
	CEV2CraftBroadway_T_SMITH2     = 1,
	CEV2CraftBroadway_T_HANDIWORK1 = 2,
	CEV2CraftBroadway_T_HANDIWORK2 = 3,
	CEV2CraftBroadway_T_IMBUE1     = 4,
	CEV2CraftBroadway_T_IMBUE2     = 5,
	CEV2CraftBroadway_T_COOK1      = 6,
	CEV2CraftBroadway_T_COOK2      = 7,
	CEV2CraftBroadway_T_ALCHEMY1   = 8,
	CEV2CraftBroadway_T_ALCHEMY2   = 9,
	CEV2CraftBroadway_T_BEGIN      = 10,
	CEV2CraftBroadway_T_END        = 11,
	CEV2CraftBroadway_T_NIL        = 12,
	CEV2CraftBroadway_T_MAX        = 13
};


// Enum BLGame.ABLCTypeEnum.CEV2CraftCategoryType
enum class ECEV2CraftCategoryType : uint8_t
{
	CEV2CraftCategory_T_NONE       = 0,
	CEV2CraftCategory_T_SMITH      = 1,
	CEV2CraftCategory_T_HANDIWORK  = 2,
	CEV2CraftCategory_T_SMELT      = 3,
	CEV2CraftCategory_T_COOK       = 4,
	CEV2CraftCategory_T_ALCHEMY    = 5,
	CEV2CraftCategory_T_BEGIN      = 6,
	CEV2CraftCategory_T_END        = 7,
	CEV2CraftCategory_T_NIL        = 8,
	CEV2CraftCategory_T_MAX        = 9
};


// Enum BLGame.ABLCTypeEnum.CEZonePVPIconType
enum class ECEZonePVPIconType : uint8_t
{
	CEZonePVPIcon_T_NONE           = 0,
	CEZonePVPIcon_T_HIERON_PROTECT = 1,
	CEZonePVPIcon_T_UNION_PROTECT  = 2,
	CEZonePVPIcon_T_PVP            = 3,
	CEZonePVPIcon_T_NON_PVP        = 4,
	CEZonePVPIcon_T_BEGIN          = 5,
	CEZonePVPIcon_T_END            = 6,
	CEZonePVPIcon_T_NIL            = 7,
	CEZonePVPIcon_T_MAX            = 8
};


// Enum BLGame.ABLCTypeEnum.CEMPFActionType
enum class ECEMPFActionType : uint8_t
{
	CEMPFAction_T_GRADEUP          = 0,
	CEMPFAction_T_RESTOREFATIGUE   = 1,
	CEMPFAction_T_BEGIN            = 2,
	CEMPFAction_T_END              = 3,
	CEMPFAction_T_NIL              = 4,
	CEMPFAction_T_MAX              = 5
};


// Enum BLGame.ABLCTypeEnum.CEOpenExchangeUIType
enum class ECEOpenExchangeUIType : uint8_t
{
	CEOpenExchangeUI_T_OPENER      = 0,
	CEOpenExchangeUI_T_NPC         = 1,
	CEOpenExchangeUI_T_BEGIN       = 2,
	CEOpenExchangeUI_T_END         = 3,
	CEOpenExchangeUI_T_NIL         = 4,
	CEOpenExchangeUI_T_MAX         = 5
};


// Enum BLGame.ABLCTypeEnum.CEInstantRevivalPointType
enum class ECEInstantRevivalPointType : uint8_t
{
	CEInstantRevivalPoint_T_PERSONAL = 0,
	CEInstantRevivalPoint_T_PARTY  = 1,
	CEInstantRevivalPoint_T_GUILD  = 2,
	CEInstantRevivalPoint_T_BEGIN  = 3,
	CEInstantRevivalPoint_T_END    = 4,
	CEInstantRevivalPoint_T_NIL    = 5,
	CEInstantRevivalPoint_T_MAX    = 6
};


// Enum BLGame.ABLCTypeEnum.CEOrderPeriodType
enum class ECEOrderPeriodType : uint8_t
{
	CEOrderPeriod_T_DAILY          = 0,
	CEOrderPeriod_T_WEEKLY         = 1,
	CEOrderPeriod_T_BEGIN          = 2,
	CEOrderPeriod_T_END            = 3,
	CEOrderPeriod_T_NIL            = 4,
	CEOrderPeriod_T_MAX            = 5
};


// Enum BLGame.ABLCTypeEnum.CEOrderGroupType
enum class ECEOrderGroupType : uint8_t
{
	CEOrderGroup_T_NORMAL          = 0,
	CEOrderGroup_T_SPECIAL         = 1,
	CEOrderGroup_T_BEGIN           = 2,
	CEOrderGroup_T_END             = 3,
	CEOrderGroup_T_NIL             = 4,
	CEOrderGroup_T_MAX             = 5
};


// Enum BLGame.ABLCTypeEnum.CEAbnormalStatusIconRaidShowType
enum class ECEAbnormalStatusIconRaidShowType : uint8_t
{
	CEAbnormalStatusIconRaidShow_T_NONE = 0,
	CEAbnormalStatusIconRaidShow_T_SHOW = 1,
	CEAbnormalStatusIconRaidShow_T_BEGIN = 2,
	CEAbnormalStatusIconRaidShow_T_END = 3,
	CEAbnormalStatusIconRaidShow_T_NIL = 4,
	CEAbnormalStatusIconRaidShow_T_MAX = 5
};


// Enum BLGame.ABLCTypeEnum.CERecipeCodeInfoType
enum class ECERecipeCodeInfoType : uint8_t
{
	CERecipeCodeInfo_T_POWERUPRUNE1 = 0,
	CERecipeCodeInfo_T_POWERUPRUNE2 = 1,
	CERecipeCodeInfo_T_POWERUPRUNE201 = 2,
	CERecipeCodeInfo_T_POWERUPRUNE202 = 3,
	CERecipeCodeInfo_T_POWERUPRUNE203 = 4,
	CERecipeCodeInfo_T_POWERUPRUNE3 = 5,
	CERecipeCodeInfo_T_POWERUPRUNE301 = 6,
	CERecipeCodeInfo_T_POWERUPRUNE302 = 7,
	CERecipeCodeInfo_T_POWERUPRUNE303 = 8,
	CERecipeCodeInfo_T_POWERUPRUNE4 = 9,
	CERecipeCodeInfo_T_POWERUPRUNE401 = 10,
	CERecipeCodeInfo_T_POWERUPRUNE402 = 11,
	CERecipeCodeInfo_T_POWERUPRUNE403 = 12,
	CERecipeCodeInfo_T_TYPECHANGERUNE1 = 13,
	CERecipeCodeInfo_T_TYPECHANGERUNE2 = 14,
	CERecipeCodeInfo_T_POWERUPEQUIP = 15,
	CERecipeCodeInfo_T_CREATECRAFTMATERIAL1 = 16,
	CERecipeCodeInfo_T_CREATECRAFTMATERIAL2 = 17,
	CERecipeCodeInfo_T_BEGIN       = 18,
	CERecipeCodeInfo_T_END         = 19,
	CERecipeCodeInfo_T_NIL         = 20,
	CERecipeCodeInfo_T_MAX         = 21
};


// Enum BLGame.ABLCTypeEnum.CETabletMaterialCategoryType
enum class ECETabletMaterialCategoryType : uint8_t
{
	CETabletMaterialCategory_T_NIL = 0,
	CETabletMaterialCategory_T_RUNE_STRENGTHEN_MATERIAL = 1,
	CETabletMaterialCategory_T_RUNE_TYPE_CHANGE_MATERIAL = 2,
	CETabletMaterialCategory_T_RUNE_TYPE_FIX_MATERIAL = 3,
	CETabletMaterialCategory_T_RUNE_SHIELD_MATERIAL_NORMAL = 4,
	CETabletMaterialCategory_T_RUNE_SHIELD_MATERIAL_PREMIUM = 5,
	CETabletMaterialCategory_T_RUNE_SHIELD_MATERIAL_SOURCE = 6,
	CETabletMaterialCategory_T_RUNE_SHIELD_MATERIAL_RECIPEBOOK = 7,
	CETabletMaterialCategory_T_RUNE_S_CHANCE_BUFF_MATERIAL = 8,
	CETabletMaterialCategory_T_RUNE_S_CHANCE_BUFF_SOURCE = 9,
	CETabletMaterialCategory_T_RUNE_S_CHANCE_BUFF_RECIPEBOOK = 10,
	CETabletMaterialCategory_T_EQUIP_UPGRADE_MATERIAL = 11,
	CETabletMaterialCategory_T_RUNE_TARGET_LEVEL_FIX = 12,
	CETabletMaterialCategory_T_BEGIN = 13,
	CETabletMaterialCategory_T_END = 14,
	CETabletMaterialCategory_T_MAX = 15
};


// Enum BLGame.ABLCTypeEnum.CERuneType
enum class ECERuneType : uint8_t
{
	CERune_T_NIL                   = 0,
	CERune_T_DRAGON                = 1,
	CERune_T_BEAR                  = 2,
	CERune_T_EAGLE                 = 3,
	CERune_T_LION                  = 4,
	CERune_T_LEOPARD               = 5,
	CERune_T_WOLF                  = 6,
	CERune_T_RAVEN                 = 7,
	CERune_T_HAWK                  = 8,
	CERune_T_OWL                   = 9,
	CERune_T_WIND                  = 10,
	CERune_T_FOG                   = 11,
	CERune_T_WATERFALL             = 12,
	CERune_T_ROCK                  = 13,
	CERune_T_TREE                  = 14,
	CERune_T_SEA                   = 15,
	CERune_T_BEGIN                 = 16,
	CERune_T_END                   = 17,
	CERune_T_MAX                   = 18
};


// Enum BLGame.ABLCTypeEnum.CERuneCategoryType
enum class ECERuneCategoryType : uint8_t
{
	CERuneCategory_T_NIL           = 0,
	CERuneCategory_T_OFFENSIVE     = 1,
	CERuneCategory_T_DEFENSIVE     = 2,
	CERuneCategory_T_BEGIN         = 3,
	CERuneCategory_T_END           = 4,
	CERuneCategory_T_MAX           = 5
};


// Enum BLGame.ABLCTypeEnum.CENpcMeshType
enum class ECENpcMeshType : uint8_t
{
	CENpcMesh_T_DEFAULT            = 0,
	CENpcMesh_T_NONE               = 1,
	CENpcMesh_T_EXCEPTION          = 2,
	CENpcMesh_T_BEGIN              = 3,
	CENpcMesh_T_END                = 4,
	CENpcMesh_T_NIL                = 5,
	CENpcMesh_T_MAX                = 6
};


// Enum BLGame.ABLCTypeEnum.CEResetTimeType
enum class ECEResetTimeType : uint8_t
{
	CEResetTime_T_DISABLERESET     = 0,
	CEResetTime_T_WEEKLY           = 1,
	CEResetTime_T_DAILY            = 2,
	CEResetTime_T_CLOSERESET       = 3,
	CEResetTime_T_BEGIN            = 4,
	CEResetTime_T_END              = 5,
	CEResetTime_T_NIL              = 6,
	CEResetTime_T_MAX              = 7
};


// Enum BLGame.ABLCTypeEnum.CEQuestAdditionalMapInfoAreaType
enum class ECEQuestAdditionalMapInfoAreaType : uint8_t
{
	CEQuestAdditionalMapInfoArea_T_NORMAL = 0,
	CEQuestAdditionalMapInfoArea_T_DROPZONE = 1,
	CEQuestAdditionalMapInfoArea_T_BEGIN = 2,
	CEQuestAdditionalMapInfoArea_T_END = 3,
	CEQuestAdditionalMapInfoArea_T_NIL = 4,
	CEQuestAdditionalMapInfoArea_T_MAX = 5
};


// Enum BLGame.ABLCTypeEnum.CECustomizingDragSignType
enum class ECECustomizingDragSignType : uint8_t
{
	CECustomizingDragSign_T_POSITIVE = 0,
	CECustomizingDragSign_T_NEGATIVE = 1,
	CECustomizingDragSign_T_BEGIN  = 2,
	CECustomizingDragSign_T_END    = 3,
	CECustomizingDragSign_T_NIL    = 4,
	CECustomizingDragSign_T_MAX    = 5
};


// Enum BLGame.ABLCTypeEnum.CECustomizingViewType
enum class ECECustomizingViewType : uint8_t
{
	CECustomizingView_T_FRONT      = 0,
	CECustomizingView_T_LEFT       = 1,
	CECustomizingView_T_RIGHT      = 2,
	CECustomizingView_T_REAR       = 3,
	CECustomizingView_T_BEGIN      = 4,
	CECustomizingView_T_END        = 5,
	CECustomizingView_T_NIL        = 6,
	CECustomizingView_T_MAX        = 7
};


// Enum BLGame.ABLCTypeEnum.CECustomizingAreaType
enum class ECECustomizingAreaType : uint8_t
{
	CECustomizingArea_T_NECK       = 0,
	CECustomizingArea_T_SHOULDER   = 1,
	CECustomizingArea_T_ARM        = 2,
	CECustomizingArea_T_BREAST     = 3,
	CECustomizingArea_T_UPPERBODY  = 4,
	CECustomizingArea_T_ABDOMEN    = 5,
	CECustomizingArea_T_WAIST      = 6,
	CECustomizingArea_T_PELVIS     = 7,
	CECustomizingArea_T_HIP        = 8,
	CECustomizingArea_T_THIGH      = 9,
	CECustomizingArea_T_KNEE       = 10,
	CECustomizingArea_T_CALF       = 11,
	CECustomizingArea_T_FOOT       = 12,
	CECustomizingArea_T_FOREHEAD   = 13,
	CECustomizingArea_T_EYEBROW    = 14,
	CECustomizingArea_T_EYESTAIL   = 15,
	CECustomizingArea_T_EYESCENTER = 16,
	CECustomizingArea_T_EYEHEAD    = 17,
	CECustomizingArea_T_NOSE       = 18,
	CECustomizingArea_T_MOUTH      = 19,
	CECustomizingArea_T_EAR        = 20,
	CECustomizingArea_T_CHEEKBONE  = 21,
	CECustomizingArea_T_CHEEK      = 22,
	CECustomizingArea_T_CHIN       = 23,
	CECustomizingArea_T_JAW        = 24,
	CECustomizingArea_T_DETAILEYETAIL = 25,
	CECustomizingArea_T_DETAILEYE  = 26,
	CECustomizingArea_T_NOSEBRIDGE = 27,
	CECustomizingArea_T_NOSETIP    = 28,
	CECustomizingArea_T_NOSEBALL   = 29,
	CECustomizingArea_T_MOUTHTAIL  = 30,
	CECustomizingArea_T_UPPERLIP   = 31,
	CECustomizingArea_T_LOWERLIP   = 32,
	CECustomizingArea_T_EARWHEEL   = 33,
	CECustomizingArea_T_EYELASHHEAD = 34,
	CECustomizingArea_T_EYELASHCENTER = 35,
	CECustomizingArea_T_EYELASHTAIL = 36,
	CECustomizingArea_T_EYELASH    = 37,
	CECustomizingArea_T_BEGIN      = 38,
	CECustomizingArea_T_END        = 39,
	CECustomizingArea_T_NIL        = 40,
	CECustomizingArea_T_MAX        = 41
};


// Enum BLGame.ABLCTypeEnum.CECustomizingUIModeType
enum class ECECustomizingUIModeType : uint8_t
{
	CECustomizingUIMode_T_NORMAL   = 0,
	CECustomizingUIMode_T_WHOLE    = 1,
	CECustomizingUIMode_T_HAIR     = 2,
	CECustomizingUIMode_T_FACE     = 3,
	CECustomizingUIMode_T_MAKEUP   = 4,
	CECustomizingUIMode_T_DECO     = 5,
	CECustomizingUIMode_T_SLIDER   = 6,
	CECustomizingUIMode_T_DETAIL   = 7,
	CECustomizingUIMode_T_BEGIN    = 8,
	CECustomizingUIMode_T_END      = 9,
	CECustomizingUIMode_T_NIL      = 10,
	CECustomizingUIMode_T_MAX      = 11
};


// Enum BLGame.ABLCTypeEnum.CECustomizingZoomModeType
enum class ECECustomizingZoomModeType : uint8_t
{
	CECustomizingZoomMode_T_FIXED  = 0,
	CECustomizingZoomMode_T_FLEXIBLE = 1,
	CECustomizingZoomMode_T_BEGIN  = 2,
	CECustomizingZoomMode_T_END    = 3,
	CECustomizingZoomMode_T_NIL    = 4,
	CECustomizingZoomMode_T_MAX    = 5
};


// Enum BLGame.ABLCTypeEnum.CECustomizeType
enum class ECECustomizeType : uint8_t
{
	CECustomize_T_UNDEFINED        = 0,
	CECustomize_T_WHOLEBODYPRESET  = 1,
	CECustomize_T_BODYTYPE         = 2,
	CECustomize_T_SKINCOLOR        = 3,
	CECustomize_T_SKINCOLORRESERVED1 = 4,
	CECustomize_T_SKINCOLORRESERVED2 = 5,
	CECustomize_T_SKINSHINE        = 6,
	CECustomize_T_FURBACKCOLOR     = 7,
	CECustomize_T_FURBACKCOLORRESERVED1 = 8,
	CECustomize_T_FURBACKCOLORRESERVED2 = 9,
	CECustomize_T_FURPATTERN       = 10,
	CECustomize_T_FURPATTERNCOLOR  = 11,
	CECustomize_T_FURPATTERNCOLORRESERVED1 = 12,
	CECustomize_T_FURPATTERNCOLORRESERVED2 = 13,
	CECustomize_T_FURPATTERNCOLORDENSITY = 14,
	CECustomize_T_HAIRPRESET       = 15,
	CECustomize_T_HAIRSTYLE        = 16,
	CECustomize_T_HAIRCOLOR        = 17,
	CECustomize_T_HAIRCOLORRESERVED1 = 18,
	CECustomize_T_HAIRCOLORRESERVED2 = 19,
	CECustomize_T_HAIRSHINE        = 20,
	CECustomize_T_FACEBASICFORM    = 21,
	CECustomize_T_FOREHEADBASICFORM = 22,
	CECustomize_T_EYEBROW          = 23,
	CECustomize_T_EYEBROWCOLOR     = 24,
	CECustomize_T_EYEBROWCOLORRESERVED1 = 25,
	CECustomize_T_EYEBROWCOLORRESERVED2 = 26,
	CECustomize_T_FOREHEADMORPHTARGET = 27,
	CECustomize_T_FOREHEADMORPHTARGETAPPLICATION = 28,
	CECustomize_T_EYEBASICFORM     = 29,
	CECustomize_T_IRISSIZE         = 30,
	CECustomize_T_IRISCOLOR        = 31,
	CECustomize_T_IRISCOLORRESERVED1 = 32,
	CECustomize_T_IRISCOLORRESERVED2 = 33,
	CECustomize_T_PUPILSCOLOR      = 34,
	CECustomize_T_PUPILSCOLORRESERVED1 = 35,
	CECustomize_T_PUPILSCOLORRESERVED2 = 36,
	CECustomize_T_EYEBALLCOLOR     = 37,
	CECustomize_T_EYEBALLCOLORRESERVED1 = 38,
	CECustomize_T_EYEBALLCOLORRESERVED2 = 39,
	CECustomize_T_EYEMORPHTARGET   = 40,
	CECustomize_T_EYEMORPHTARGETAPPLICATION = 41,
	CECustomize_T_NOSEBASICFORM    = 42,
	CECustomize_T_NOSEMORPHTARGET  = 43,
	CECustomize_T_NOSEMORPHTARGETAPPLICATION = 44,
	CECustomize_T_MOUTHBASICFORM   = 45,
	CECustomize_T_MOUTHMORPHTARGET = 46,
	CECustomize_T_MOUTHMORPHTARGETAPPLICATION = 47,
	CECustomize_T_EARBASICFORM     = 48,
	CECustomize_T_EARPARTS         = 49,
	CECustomize_T_EARMORPHTARGET   = 50,
	CECustomize_T_EARMORPHTARGETAPPLICATION = 51,
	CECustomize_T_JAWBASICFORM     = 52,
	CECustomize_T_CHEEKBASICFORM   = 53,
	CECustomize_T_MAKEUPPRESET     = 54,
	CECustomize_T_EYESHADOW        = 55,
	CECustomize_T_EYESHADOWCOLORDENSITY = 56,
	CECustomize_T_EYESHADOWBASECOLOR = 57,
	CECustomize_T_EYESHADOWBASECOLORRESERVED1 = 58,
	CECustomize_T_EYESHADOWBASECOLORRESERVED2 = 59,
	CECustomize_T_EYESHADOWBASESIZE = 60,
	CECustomize_T_EYESHADOWBASECOLORDENSITY = 61,
	CECustomize_T_EYESHADOWDOUBLEEYELIDCOLOR = 62,
	CECustomize_T_EYESHADOWDOUBLEEYELIDCOLORRESERVED1 = 63,
	CECustomize_T_EYESHADOWDOUBLEEYELIDCOLORRESERVED2 = 64,
	CECustomize_T_EYESHADOWDOUBLEEYELIDSIZE = 65,
	CECustomize_T_EYESHADOWDOUBLEEYELIDCOLORDENSITY = 66,
	CECustomize_T_EYESHADOWUNDERCOLOR = 67,
	CECustomize_T_EYESHADOWUNDERCOLORRESERVED1 = 68,
	CECustomize_T_EYESHADOWUNDERCOLORRESERVED2 = 69,
	CECustomize_T_EYESHADOWUNDERSIZE = 70,
	CECustomize_T_EYESHADOWUNDERCOLORDENSITY = 71,
	CECustomize_T_EYELINER         = 72,
	CECustomize_T_EYELINERUNDER    = 73,
	CECustomize_T_EYELINERDENSITY  = 74,
	CECustomize_T_EYELINERSTARTRANGE = 75,
	CECustomize_T_EYELINERENDROTATION = 76,
	CECustomize_T_EYELASHES        = 77,
	CECustomize_T_EYELASHESCOLOR   = 78,
	CECustomize_T_EYELASHESCOLORRESERVED1 = 79,
	CECustomize_T_EYELASHESCOLORRESERVED2 = 80,
	CECustomize_T_EYELASHESVOLUME  = 81,
	CECustomize_T_LENSLEFT         = 82,
	CECustomize_T_LENSRIGHT        = 83,
	CECustomize_T_LENSCOLORLEFT    = 84,
	CECustomize_T_LENSCOLORLEFTRESERVED1 = 85,
	CECustomize_T_LENSCOLORLEFTRESERVED2 = 86,
	CECustomize_T_LENSCOLORRIGHT   = 87,
	CECustomize_T_LENSCOLORRIGHTRESERVED1 = 88,
	CECustomize_T_LENSCOLORRIGHTRESERVED2 = 89,
	CECustomize_T_LIPSTICCOLOR     = 90,
	CECustomize_T_LIPSTICCOLORRESERVED1 = 91,
	CECustomize_T_LIPSTICCOLORRESERVED2 = 92,
	CECustomize_T_LIPSTICCOLORDENSITY = 93,
	CECustomize_T_LIPSTICSIZE      = 94,
	CECustomize_T_LIPGLOSSSHINE    = 95,
	CECustomize_T_LIPGLOSSSIZE     = 96,
	CECustomize_T_BLUSHERCOLOR     = 97,
	CECustomize_T_BLUSHERCOLORRESERVED1 = 98,
	CECustomize_T_BLUSHERCOLORRESERVED2 = 99,
	CECustomize_T_BLUSHERCOLORDENSITY = 100,
	CECustomize_T_BLUSHERSIZE      = 101,
	CECustomize_T_HIGHLIGHTERDENSITY = 102,
	CECustomize_T_MOLELOCATIONX    = 103,
	CECustomize_T_MOLELOCATIONY    = 104,
	CECustomize_T_MOLESIZE         = 105,
	CECustomize_T_MOLEDENSITY      = 106,
	CECustomize_T_FACETATTOO       = 107,
	CECustomize_T_FACETATTOOCOLOR  = 108,
	CECustomize_T_FACETATTOOCOLORRESERVED1 = 109,
	CECustomize_T_FACETATTOOCOLORRESERVED2 = 110,
	CECustomize_T_FACETATTOOCOLORDENSITY = 111,
	CECustomize_T_FACETATTOOCOLORMULTIPLY = 112,
	CECustomize_T_BODYTATTOO       = 113,
	CECustomize_T_BODYTATTOOCOLOR  = 114,
	CECustomize_T_BODYTATTOOCOLORRESERVED1 = 115,
	CECustomize_T_BODYTATTOOCOLORRESERVED2 = 116,
	CECustomize_T_BODYTATTOOCOLORDENSITY = 117,
	CECustomize_T_BODYTATTOOCOLORMULTIPLY = 118,
	CECustomize_T_STAMP            = 119,
	CECustomize_T_STAMPLOCATIONX   = 120,
	CECustomize_T_STAMPLOCATIONY   = 121,
	CECustomize_T_STAMPCOLOR       = 122,
	CECustomize_T_STAMPCOLORRESERVED1 = 123,
	CECustomize_T_STAMPCOLORRESERVED2 = 124,
	CECustomize_T_STAMPSIZE        = 125,
	CECustomize_T_STAMPROTATION    = 126,
	CECustomize_T_STAMPCOLORDENSITY = 127,
	CECustomize_T_FRECKLECOLOR     = 128,
	CECustomize_T_FRECKLECOLORRESERVED1 = 129,
	CECustomize_T_FRECKLECOLORRESERVED2 = 130,
	CECustomize_T_FRECKLEDENSITY   = 131,
	CECustomize_T_FRECKLESIZE      = 132,
	CECustomize_T_BEARD            = 133,
	CECustomize_T_BEARDCOLOR       = 134,
	CECustomize_T_BEARDCOLORRESERVED1 = 135,
	CECustomize_T_BEARDCOLORRESERVED2 = 136,
	CECustomize_T_SCAR             = 137,
	CECustomize_T_SCARSIZE         = 138,
	CECustomize_T_SCARLOCATIONX    = 139,
	CECustomize_T_SCARLOCATIONY    = 140,
	CECustomize_T_SCARDENSITY      = 141,
	CECustomize_T_SCARROTATION     = 142,
	CECustomize_T_FOREHEADWRINKLEDENSITY = 143,
	CECustomize_T_EYEWRINKLEDENSITY = 144,
	CECustomize_T_NASOLABIALLINEDENSITY = 145,
	CECustomize_T_TAIL             = 146,
	CECustomize_T_HEIGHT           = 147,
	CECustomize_T_MUSCLEMASS       = 148,
	CECustomize_T_BODYFAT          = 149,
	CECustomize_T_HEADSIZE         = 150,
	CECustomize_T_NECKCIRCUMFERENCE = 151,
	CECustomize_T_NECKLENGTH       = 152,
	CECustomize_T_SHOULDERVERTICALLOCATION = 153,
	CECustomize_T_SHOULDERWIDTH    = 154,
	CECustomize_T_UPPERBODYCIRCUMFERENCE = 155,
	CECustomize_T_ARMTHICKNESS     = 156,
	CECustomize_T_ARMLENGTH        = 157,
	CECustomize_T_BREASTVERTICALLOCATION = 158,
	CECustomize_T_BREASTHORIZONTALLOCATION = 159,
	CECustomize_T_BREASTSIZE       = 160,
	CECustomize_T_WAISTCIRCUMFERENCE = 161,
	CECustomize_T_WAISTLENGTH      = 162,
	CECustomize_T_ABDOMENPROJECTION = 163,
	CECustomize_T_PELVISWIDTH      = 164,
	CECustomize_T_HIPVERTICALLOCATION = 165,
	CECustomize_T_HIPHORIZONTALLOCATION = 166,
	CECustomize_T_HIPSIZE          = 167,
	CECustomize_T_THIGHLENGTH      = 168,
	CECustomize_T_THIGHCIRCUMFERENCE = 169,
	CECustomize_T_CALFLENGTH       = 170,
	CECustomize_T_CALFCIRCUMFERENCE = 171,
	CECustomize_T_FOOTSIZE         = 172,
	CECustomize_T_EYEBROWPROJECTION = 173,
	CECustomize_T_EYEBROWVERTICALLOCATION = 174,
	CECustomize_T_TOTALEYEVERTICALLOCATION = 175,
	CECustomize_T_EYEVERTICALLOCATION = 176,
	CECustomize_T_EYESIZE          = 177,
	CECustomize_T_EYEHORIZONTALLENGTH = 178,
	CECustomize_T_EYEVERTICALLENGTH = 179,
	CECustomize_T_EYETAILVERTICALLOCATION = 180,
	CECustomize_T_EYEROTATION      = 181,
	CECustomize_T_EYETWEENLENGTH   = 182,
	CECustomize_T_EYEPROJECTION    = 183,
	CECustomize_T_NOSEVERTICALLOCATION = 184,
	CECustomize_T_NOSESIZE         = 185,
	CECustomize_T_NOSEPROJECTION   = 186,
	CECustomize_T_NOSETIPSHAPE     = 187,
	CECustomize_T_NOSETIPWIDTH     = 188,
	CECustomize_T_NOSEBRIDGEWIDTH  = 189,
	CECustomize_T_NOSEBRIDGEPROJECTION = 190,
	CECustomize_T_NOSEBALLVERTICALLOCATION = 191,
	CECustomize_T_NOSEBALLSIZE     = 192,
	CECustomize_T_MOUTHVERTICALLOCATION = 193,
	CECustomize_T_MOUTHWIDTH       = 194,
	CECustomize_T_MOUTHPROJECTION  = 195,
	CECustomize_T_UPPERLIPTHICKNESS = 196,
	CECustomize_T_UPPERLIPWIDTH    = 197,
	CECustomize_T_UPPERLIPPROJECTION = 198,
	CECustomize_T_LOWERLIPTHICKNESS = 199,
	CECustomize_T_LOWERLIPWIDTH    = 200,
	CECustomize_T_LOWERLIPPROJECTION = 201,
	CECustomize_T_MOUTHTAILVERTICALLOCATION = 202,
	CECustomize_T_EARSIZE          = 203,
	CECustomize_T_EARVERTICALLENGTH = 204,
	CECustomize_T_EARHORIZONTALLENGTH = 205,
	CECustomize_T_EARWHEELHORIZONTALLOCATION = 206,
	CECustomize_T_UPPEREARWHEELLOCATION = 207,
	CECustomize_T_CHEEKBONEVERTICALLOCATION = 208,
	CECustomize_T_CHEEKBONEHORIZONTALLOCATION = 209,
	CECustomize_T_CHEEKBONEPROJECTION = 210,
	CECustomize_T_CHEEK            = 211,
	CECustomize_T_JAWTIPSIZE       = 212,
	CECustomize_T_JAWTIPPROJECTION = 213,
	CECustomize_T_JAWLENGTH        = 214,
	CECustomize_T_JAWANGLE         = 215,
	CECustomize_T_JAWSIZE          = 216,
	CECustomize_T_JAWPROJECTION    = 217,
	CECustomize_T_JAWVOLUME        = 218,
	CECustomize_T_HANDSIZE         = 219,
	CECustomize_T_KNEECIRCUMFERENCE = 220,
	CECustomize_T_VOICETYPE        = 221,
	CECustomize_T_VOICEPITCH       = 222,
	CECustomize_T_APPEARANCETYPE   = 223,
	CECustomize_T_BEGIN            = 224,
	CECustomize_T_END              = 225,
	CECustomize_T_NIL              = 226,
	CECustomize_T_MAX              = 227
};


// Enum BLGame.ABLCTypeEnum.CEItemPeriodType
enum class ECEItemPeriodType : uint8_t
{
	CEItemPeriod_T_NONE            = 0,
	CEItemPeriod_T_ADAY            = 1,
	CEItemPeriod_T_AWEEK           = 2,
	CEItemPeriod_T_AMONTH          = 3,
	CEItemPeriod_T_BEGIN           = 4,
	CEItemPeriod_T_END             = 5,
	CEItemPeriod_T_NIL             = 6,
	CEItemPeriod_T_MAX             = 7
};


// Enum BLGame.ABLCTypeEnum.CEGatherCategoryType
enum class ECEGatherCategoryType : uint8_t
{
	CEGatherCategory_T_NONE        = 0,
	CEGatherCategory_T_PLANT       = 1,
	CEGatherCategory_T_MINE        = 2,
	CEGatherCategory_T_BEGIN       = 3,
	CEGatherCategory_T_END         = 4,
	CEGatherCategory_T_NIL         = 5,
	CEGatherCategory_T_MAX         = 6
};


// Enum BLGame.ABLCTypeEnum.CECraftCategory3Type
enum class ECECraftCategory3Type : uint8_t
{
	CECraftCategory3_T_NONE        = 0,
	CECraftCategory3_T_WP_1H_DAGGER = 1,
	CECraftCategory3_T_WP_1H_SWORD = 2,
	CECraftCategory3_T_WP_1H_MACE  = 3,
	CECraftCategory3_T_WP_1H_AXE   = 4,
	CECraftCategory3_T_WP_1H_HAMMER = 5,
	CECraftCategory3_T_WP_2H_SWORD = 6,
	CECraftCategory3_T_WP_2H_MACE  = 7,
	CECraftCategory3_T_WP_2H_AXE   = 8,
	CECraftCategory3_T_WP_2H_HAMMER = 9,
	CECraftCategory3_T_WP_2H_BOW   = 10,
	CECraftCategory3_T_WP_2H_CROSSBOW = 11,
	CECraftCategory3_T_WP_2H_STAFF = 12,
	CECraftCategory3_T_WP_2H_WAND  = 13,
	CECraftCategory3_T_WP_2H_SCYTHE = 14,
	CECraftCategory3_T_WP_2H_ORB   = 15,
	CECraftCategory3_T_AR_HELMET   = 16,
	CECraftCategory3_T_AR_UPPER    = 17,
	CECraftCategory3_T_AR_LOWER    = 18,
	CECraftCategory3_T_AR_GLOVE    = 19,
	CECraftCategory3_T_AR_BOOTS    = 20,
	CECraftCategory3_T_AR_SHOULDER = 21,
	CECraftCategory3_T_AR_BELT     = 22,
	CECraftCategory3_T_BEGIN       = 23,
	CECraftCategory3_T_END         = 24,
	CECraftCategory3_T_NIL         = 25,
	CECraftCategory3_T_MAX         = 26
};


// Enum BLGame.ABLCTypeEnum.CECraftCategory2Type
enum class ECECraftCategory2Type : uint8_t
{
	CECraftCategory2_T_AR_HELMET   = 0,
	CECraftCategory2_T_AR_UPPER    = 1,
	CECraftCategory2_T_AR_LOWER    = 2,
	CECraftCategory2_T_AR_GLOVE    = 3,
	CECraftCategory2_T_AR_BOOTS    = 4,
	CECraftCategory2_T_AR_SHOULDER = 5,
	CECraftCategory2_T_AR_BELT     = 6,
	CECraftCategory2_T_WP_1H_DAGGER = 7,
	CECraftCategory2_T_WP_1H_SWORD = 8,
	CECraftCategory2_T_WP_1H_MACE  = 9,
	CECraftCategory2_T_WP_1H_HAMMER = 10,
	CECraftCategory2_T_WP_2H_HAMMER = 11,
	CECraftCategory2_T_WP_2H_AXE   = 12,
	CECraftCategory2_T_WP_2H_MACE  = 13,
	CECraftCategory2_T_WP_2H_BOW   = 14,
	CECraftCategory2_T_WP_2H_STAFF = 15,
	CECraftCategory2_T_WP_2H_WAND  = 16,
	CECraftCategory2_T_WP_SHIELD   = 17,
	CECraftCategory2_T_NECKLACE    = 18,
	CECraftCategory2_T_RING        = 19,
	CECraftCategory2_T_POTION_HEALTH = 20,
	CECraftCategory2_T_POTION_MANA = 21,
	CECraftCategory2_T_POTION_ALL  = 22,
	CECraftCategory2_T_FOOD_MEAT   = 23,
	CECraftCategory2_T_FOOD_BREAD  = 24,
	CECraftCategory2_T_FOOD_FRUIT  = 25,
	CECraftCategory2_T_FOOD_SPECIAL = 26,
	CECraftCategory2_T_FOOD_MATERIAL = 27,
	CECraftCategory2_T_POTENTIAL_CRAFT = 28,
	CECraftCategory2_T_MOUNT_CRAFT = 29,
	CECraftCategory2_T_PET_CRAFT   = 30,
	CECraftCategory2_T_MEDAL_CRAFT = 31,
	CECraftCategory2_T_ETC_CRAFT   = 32,
	CECraftCategory2_T_BEGIN       = 33,
	CECraftCategory2_T_END         = 34,
	CECraftCategory2_T_NIL         = 35,
	CECraftCategory2_T_MAX         = 36
};


// Enum BLGame.ABLCTypeEnum.CECraftCategory1Type
enum class ECECraftCategory1Type : uint8_t
{
	CECraftCategory1_T_WEAPON      = 0,
	CECraftCategory1_T_ROBE        = 1,
	CECraftCategory1_T_LIGHT       = 2,
	CECraftCategory1_T_MEDIUM      = 3,
	CECraftCategory1_T_HEAVY       = 4,
	CECraftCategory1_T_ACCESSORY   = 5,
	CECraftCategory1_T_POTION      = 6,
	CECraftCategory1_T_FOOD        = 7,
	CECraftCategory1_T_SPECIAL_CRAFT = 8,
	CECraftCategory1_T_BEGIN       = 9,
	CECraftCategory1_T_END         = 10,
	CECraftCategory1_T_NIL         = 11,
	CECraftCategory1_T_MAX         = 12
};


// Enum BLGame.ABLCTypeEnum.CECraftCategoryType
enum class ECECraftCategoryType : uint8_t
{
	CECraftCategory_T_EQUIP        = 0,
	CECraftCategory_T_FOOD         = 1,
	CECraftCategory_T_POTION       = 2,
	CECraftCategory_T_BEGIN        = 3,
	CECraftCategory_T_END          = 4,
	CECraftCategory_T_NIL          = 5,
	CECraftCategory_T_MAX          = 6
};


// Enum BLGame.ABLCTypeEnum.CEV2MissionType
enum class ECEV2MissionType : uint8_t
{
	CEV2Mission_T_NONE             = 0,
	CEV2Mission_T_DEMOLITIONMAN    = 1,
	CEV2Mission_T_KILLER           = 2,
	CEV2Mission_T_RESEARCH         = 3,
	CEV2Mission_T_CHASE            = 4,
	CEV2Mission_T_BATTLE           = 5,
	CEV2Mission_T_CRAFT            = 6,
	CEV2Mission_T_ALCHEMY          = 7,
	CEV2Mission_T_ASCETICISM       = 8,
	CEV2Mission_T_BEGIN            = 9,
	CEV2Mission_T_END              = 10,
	CEV2Mission_T_NIL              = 11,
	CEV2Mission_T_MAX              = 12
};


// Enum BLGame.ABLCTypeEnum.CEMissionType
enum class ECEMissionType : uint8_t
{
	CEMission_T_NONE               = 0,
	CEMission_T_DEMOLITIONMAN      = 1,
	CEMission_T_KILLER             = 2,
	CEMission_T_MAKEUP             = 3,
	CEMission_T_RESEARCH           = 4,
	CEMission_T_EXPLORE            = 5,
	CEMission_T_CHASE              = 6,
	CEMission_T_BATTLE             = 7,
	CEMission_T_CRAFT              = 8,
	CEMission_T_ALCHEMY            = 9,
	CEMission_T_ASCETICISM         = 10,
	CEMission_T_BEGIN              = 11,
	CEMission_T_END                = 12,
	CEMission_T_NIL                = 13,
	CEMission_T_MAX                = 14
};


// Enum BLGame.ABLCTypeEnum.CEFellowVocationType
enum class ECEFellowVocationType : uint8_t
{
	CEFellowVocation_T_NONE        = 0,
	CEFellowVocation_T_TACTICIAN   = 1,
	CEFellowVocation_T_CHASER      = 2,
	CEFellowVocation_T_WARRIOR     = 3,
	CEFellowVocation_T_KILLER      = 4,
	CEFellowVocation_T_SMITH       = 5,
	CEFellowVocation_T_SHAMAN      = 6,
	CEFellowVocation_T_OUTLAW      = 7,
	CEFellowVocation_T_PENITENT    = 8,
	CEFellowVocation_T_WANDERER    = 9,
	CEFellowVocation_T_BEGIN       = 10,
	CEFellowVocation_T_END         = 11,
	CEFellowVocation_T_NIL         = 12,
	CEFellowVocation_T_MAX         = 13
};


// Enum BLGame.ABLCTypeEnum.CEFellowRaceType
enum class ECEFellowRaceType : uint8_t
{
	CEFellowRace_T_NONE            = 0,
	CEFellowRace_T_HUMAN           = 1,
	CEFellowRace_T_BARBARIAN       = 2,
	CEFellowRace_T_CREATURE        = 3,
	CEFellowRace_T_UNDEAD          = 4,
	CEFellowRace_T_BEGIN           = 5,
	CEFellowRace_T_END             = 6,
	CEFellowRace_T_NIL             = 7,
	CEFellowRace_T_MAX             = 8
};


// Enum BLGame.ABLCTypeEnum.CECompanionGradeType
enum class ECECompanionGradeType : uint8_t
{
	CECompanionGrade_T_COMMON      = 0,
	CECompanionGrade_T_UNCOMMON    = 1,
	CECompanionGrade_T_RARE        = 2,
	CECompanionGrade_T_EPIC        = 3,
	CECompanionGrade_T_LEGENDARY   = 4,
	CECompanionGrade_T_BEGIN       = 5,
	CECompanionGrade_T_END         = 6,
	CECompanionGrade_T_NIL         = 7,
	CECompanionGrade_T_MAX         = 8
};


// Enum BLGame.ABLCTypeEnum.CECompanionType
enum class ECECompanionType : uint8_t
{
	CECompanion_T_NONE             = 0,
	CECompanion_T_MOUNT            = 1,
	CECompanion_T_PET              = 2,
	CECompanion_T_FELLOW           = 3,
	CECompanion_T_BEGIN            = 4,
	CECompanion_T_END              = 5,
	CECompanion_T_NIL              = 6,
	CECompanion_T_MAX              = 7
};


// Enum BLGame.ABLCTypeEnum.CETargetStateWidgetType
enum class ECETargetStateWidgetType : uint8_t
{
	CETargetStateWidget_T_WEAK     = 0,
	CETargetStateWidget_T_NORMAL   = 1,
	CETargetStateWidget_T_SKILLED  = 2,
	CETargetStateWidget_T_ELITE    = 3,
	CETargetStateWidget_T_BOSS     = 4,
	CETargetStateWidget_T_BEGIN    = 5,
	CETargetStateWidget_T_END      = 6,
	CETargetStateWidget_T_NIL      = 7,
	CETargetStateWidget_T_MAX      = 8
};


// Enum BLGame.ABLCTypeEnum.CESpecialWarRankType
enum class ECESpecialWarRankType : uint8_t
{
	CESpecialWarRank_T_NONE        = 0,
	CESpecialWarRank_T_POINT       = 1,
	CESpecialWarRank_T_LOG         = 2,
	CESpecialWarRank_T_BEGIN       = 3,
	CESpecialWarRank_T_END         = 4,
	CESpecialWarRank_T_NIL         = 5,
	CESpecialWarRank_T_MAX         = 6
};


// Enum BLGame.ABLCTypeEnum.CESpecialWarRankActorGroupType
enum class ECESpecialWarRankActorGroupType : uint8_t
{
	CESpecialWarRankActorGroup_T_NONE = 0,
	CESpecialWarRankActorGroup_T_REALM = 1,
	CESpecialWarRankActorGroup_T_CLASS_REALM = 2,
	CESpecialWarRankActorGroup_T_BEGIN = 3,
	CESpecialWarRankActorGroup_T_END = 4,
	CESpecialWarRankActorGroup_T_NIL = 5,
	CESpecialWarRankActorGroup_T_MAX = 6
};


// Enum BLGame.ABLCTypeEnum.CESpecialWarEndMethodType
enum class ECESpecialWarEndMethodType : uint8_t
{
	CESpecialWarEndMethod_T_NONE   = 0,
	CESpecialWarEndMethod_T_LORD_KILL = 1,
	CESpecialWarEndMethod_T_TIME_END = 2,
	CESpecialWarEndMethod_T_EXIT_WHILE = 3,
	CESpecialWarEndMethod_T_BEGIN  = 4,
	CESpecialWarEndMethod_T_END    = 5,
	CESpecialWarEndMethod_T_NIL    = 6,
	CESpecialWarEndMethod_T_MAX    = 7
};


// Enum BLGame.ABLCTypeEnum.CESpecialWarResetConditionType
enum class ECESpecialWarResetConditionType : uint8_t
{
	CESpecialWarResetCondition_T_NONE = 0,
	CESpecialWarResetCondition_T_DEATH = 1,
	CESpecialWarResetCondition_T_VOLUNTARY = 2,
	CESpecialWarResetCondition_T_BEGIN = 3,
	CESpecialWarResetCondition_T_END = 4,
	CESpecialWarResetCondition_T_NIL = 5,
	CESpecialWarResetCondition_T_MAX = 6
};


// Enum BLGame.ABLCTypeEnum.CESpecialWarCheckHPType
enum class ECESpecialWarCheckHPType : uint8_t
{
	CESpecialWarCheckHP_T_NONE     = 0,
	CESpecialWarCheckHP_T_HP_MORE  = 1,
	CESpecialWarCheckHP_T_HP_LESS  = 2,
	CESpecialWarCheckHP_T_BEGIN    = 3,
	CESpecialWarCheckHP_T_END      = 4,
	CESpecialWarCheckHP_T_NIL      = 5,
	CESpecialWarCheckHP_T_MAX      = 6
};


// Enum BLGame.ABLCTypeEnum.CEAbnormalStatusAttachType
enum class ECEAbnormalStatusAttachType : uint8_t
{
	CEAbnormalStatusAttach_T_ATTACH = 0,
	CEAbnormalStatusAttach_T_DETACH = 1,
	CEAbnormalStatusAttach_T_BEGIN = 2,
	CEAbnormalStatusAttach_T_END   = 3,
	CEAbnormalStatusAttach_T_NIL   = 4,
	CEAbnormalStatusAttach_T_MAX   = 5
};


// Enum BLGame.ABLCTypeEnum.CEAbnormalStatusMovementType
enum class ECEAbnormalStatusMovementType : uint8_t
{
	CEAbnormalStatusMovement_T_STOP = 0,
	CEAbnormalStatusMovement_T_MOVE = 1,
	CEAbnormalStatusMovement_T_BEGIN = 2,
	CEAbnormalStatusMovement_T_END = 3,
	CEAbnormalStatusMovement_T_NIL = 4,
	CEAbnormalStatusMovement_T_MAX = 5
};


// Enum BLGame.ABLCTypeEnum.CETargetingMoveType
enum class ECETargetingMoveType : uint8_t
{
	CETargetingMove_T_QE           = 0,
	CETargetingMove_T_AD           = 1,
	CETargetingMove_T_BEGIN        = 2,
	CETargetingMove_T_END          = 3,
	CETargetingMove_T_NIL          = 4,
	CETargetingMove_T_MAX          = 5
};


// Enum BLGame.ABLCTypeEnum.CETargetingControlType
enum class ECETargetingControlType : uint8_t
{
	CETargetingControl_T_CLASSIC   = 0,
	CETargetingControl_T_AIM       = 1,
	CETargetingControl_T_BEGIN     = 2,
	CETargetingControl_T_END       = 3,
	CETargetingControl_T_NIL       = 4,
	CETargetingControl_T_MAX       = 5
};


// Enum BLGame.ABLCTypeEnum.CEPVPType
enum class ECEPVPType : uint8_t
{
	CEPVP_T_HIERON_PROTECT         = 0,
	CEPVP_T_UNION_PROTECT          = 1,
	CEPVP_T_PVP                    = 2,
	CEPVP_T_NON_PVP                = 3,
	CEPVP_T_FREE_FOR_ALL           = 4,
	CEPVP_T_BEGIN                  = 5,
	CEPVP_T_END                    = 6,
	CEPVP_T_NIL                    = 7,
	CEPVP_T_MAX                    = 8
};


// Enum BLGame.ABLCTypeEnum.CEIconShowType
enum class ECEIconShowType : uint8_t
{
	CEIconShow_T_DEFAULT           = 0,
	CEIconShow_T_SELF              = 1,
	CEIconShow_T_NONE              = 2,
	CEIconShow_T_BEGIN             = 3,
	CEIconShow_T_END               = 4,
	CEIconShow_T_NIL               = 5,
	CEIconShow_T_MAX               = 6
};


// Enum BLGame.ABLCTypeEnum.CEContentTokenType
enum class ECEContentTokenType : uint8_t
{
	CEContentToken_T_NONE          = 0,
	CEContentToken_T_BP            = 1,
	CEContentToken_T_DP            = 2,
	CEContentToken_T_CP            = 3,
	CEContentToken_T_RP            = 4,
	CEContentToken_T_GP            = 5,
	CEContentToken_T_LUMENA        = 6,
	CEContentToken_T_LUMENA_P      = 7,
	CEContentToken_T_CINIS         = 8,
	CEContentToken_T_CT            = 9,
	CEContentToken_T_GEMPIECE      = 10,
	CEContentToken_T_BEGIN         = 11,
	CEContentToken_T_END           = 12,
	CEContentToken_T_NIL           = 13,
	CEContentToken_T_MAX           = 14
};


// Enum BLGame.ABLCTypeEnum.CESystemMessagePendingType
enum class ECESystemMessagePendingType : uint8_t
{
	CESystemMessagePending_T_NONE  = 0,
	CESystemMessagePending_T_ALWAYS = 1,
	CESystemMessagePending_T_EXCEPT_SAME = 2,
	CESystemMessagePending_T_NEVER = 3,
	CESystemMessagePending_T_BEGIN = 4,
	CESystemMessagePending_T_END   = 5,
	CESystemMessagePending_T_NIL   = 6,
	CESystemMessagePending_T_MAX   = 7
};


// Enum BLGame.ABLCTypeEnum.CETrapType
enum class ECETrapType : uint8_t
{
	CETrap_T_TRIGGER_ACTIVE        = 0,
	CETrap_T_TRIGGER_REACTIVE      = 1,
	CETrap_T_AUTO_ACTIVE           = 2,
	CETrap_T_BEGIN                 = 3,
	CETrap_T_END                   = 4,
	CETrap_T_NIL                   = 5,
	CETrap_T_MAX                   = 6
};


// Enum BLGame.ABLCTypeEnum.CEGuildMarkRealmType
enum class ECEGuildMarkRealmType : uint8_t
{
	CEGuildMarkRealm_T_HIERON      = 0,
	CEGuildMarkRealm_T_UNION       = 1,
	CEGuildMarkRealm_T_COMMON      = 2,
	CEGuildMarkRealm_T_BEGIN       = 3,
	CEGuildMarkRealm_T_END         = 4,
	CEGuildMarkRealm_T_NIL         = 5,
	CEGuildMarkRealm_T_MAX         = 6
};


// Enum BLGame.ABLCTypeEnum.CEGuildAuthorityType
enum class ECEGuildAuthorityType : uint8_t
{
	CEGuildAuthority_T_NONE        = 0,
	CEGuildAuthority_T_NOTICE      = 1,
	CEGuildAuthority_T_INVITE      = 2,
	CEGuildAuthority_T_KICKOUT     = 3,
	CEGuildAuthority_T_GRADE       = 4,
	CEGuildAuthority_T_GRANT       = 5,
	CEGuildAuthority_T_USERPPRODUCT = 6,
	CEGuildAuthority_T_DECLAREGUILDWAR = 7,
	CEGuildAuthority_T_SURRENDERGUILDWAR = 8,
	CEGuildAuthority_T_BEGIN       = 9,
	CEGuildAuthority_T_END         = 10,
	CEGuildAuthority_T_NIL         = 11,
	CEGuildAuthority_T_MAX         = 12
};


// Enum BLGame.ABLCTypeEnum.CEGuildGradeType
enum class ECEGuildGradeType : uint8_t
{
	CEGuildGrade_T_LEADER          = 0,
	CEGuildGrade_T_SECOND_LEADER   = 1,
	CEGuildGrade_T_MANAGER         = 2,
	CEGuildGrade_T_COMMON          = 3,
	CEGuildGrade_T_NEWCOMER        = 4,
	CEGuildGrade_T_ADDITION1       = 5,
	CEGuildGrade_T_BEGIN           = 6,
	CEGuildGrade_T_END             = 7,
	CEGuildGrade_T_NIL             = 8,
	CEGuildGrade_T_MAX             = 9
};


// Enum BLGame.ABLCTypeEnum.CEMountActiveSkillInterfaceType
enum class ECEMountActiveSkillInterfaceType : uint8_t
{
	CEMountActiveSkillInterface_T_NONE = 0,
	CEMountActiveSkillInterface_T_HOLD = 1,
	CEMountActiveSkillInterface_T_INSTANT = 2,
	CEMountActiveSkillInterface_T_BEGIN = 3,
	CEMountActiveSkillInterface_T_END = 4,
	CEMountActiveSkillInterface_T_NIL = 5,
	CEMountActiveSkillInterface_T_MAX = 6
};


// Enum BLGame.ABLCTypeEnum.CEItemAuctionCategoryThirdType
enum class ECEItemAuctionCategoryThirdType : uint8_t
{
	CEItemAuctionCategoryThird_T_NONE = 0,
	CEItemAuctionCategoryThird_T_BEGIN = 1,
	CEItemAuctionCategoryThird_T_END = 2,
	CEItemAuctionCategoryThird_T_NIL = 3,
	CEItemAuctionCategoryThird_T_MAX = 4
};


// Enum BLGame.ABLCTypeEnum.CEItemAuctionCategorySecondType
enum class ECEItemAuctionCategorySecondType : uint8_t
{
	CEItemAuctionCategorySecond_T_NONE = 0,
	CEItemAuctionCategorySecond_T_BEGIN = 1,
	CEItemAuctionCategorySecond_T_END = 2,
	CEItemAuctionCategorySecond_T_NIL = 3,
	CEItemAuctionCategorySecond_T_MAX = 4
};


// Enum BLGame.ABLCTypeEnum.CEItemAuctionCategoryFirstType
enum class ECEItemAuctionCategoryFirstType : uint8_t
{
	CEItemAuctionCategoryFirst_T_NONE = 0,
	CEItemAuctionCategoryFirst_T_BEGIN = 1,
	CEItemAuctionCategoryFirst_T_END = 2,
	CEItemAuctionCategoryFirst_T_NIL = 3,
	CEItemAuctionCategoryFirst_T_MAX = 4
};


// Enum BLGame.ABLCTypeEnum.CEOpenUIType
enum class ECEOpenUIType : uint8_t
{
	CEOpenUI_T_INVENTORY           = 0,
	CEOpenUI_T_TACTIC              = 1,
	CEOpenUI_T_RO                  = 2,
	CEOpenUI_T_EQUIPCUSTOM         = 3,
	CEOpenUI_T_BEGIN               = 4,
	CEOpenUI_T_END                 = 5,
	CEOpenUI_T_NIL                 = 6,
	CEOpenUI_T_MAX                 = 7
};


// Enum BLGame.ABLCTypeEnum.CEQuestPathType
enum class ECEQuestPathType : uint8_t
{
	CEQuestPath_T_PATH_ON          = 0,
	CEQuestPath_T_PATH_OFF         = 1,
	CEQuestPath_T_BEGIN            = 2,
	CEQuestPath_T_END              = 3,
	CEQuestPath_T_NIL              = 4,
	CEQuestPath_T_MAX              = 5
};


// Enum BLGame.ABLCTypeEnum.CEQuestNaviType
enum class ECEQuestNaviType : uint8_t
{
	CEQuestNavi_T_NAVI_ON          = 0,
	CEQuestNavi_T_NAVI_OFF         = 1,
	CEQuestNavi_T_BEGIN            = 2,
	CEQuestNavi_T_END              = 3,
	CEQuestNavi_T_NIL              = 4,
	CEQuestNavi_T_MAX              = 5
};


// Enum BLGame.ABLCTypeEnum.CEDoorInteractType
enum class ECEDoorInteractType : uint8_t
{
	CEDoorInteract_T_AUTO_DOOR     = 0,
	CEDoorInteract_T_FIX_DOOR      = 1,
	CEDoorInteract_T_INTERACT_DOOR = 2,
	CEDoorInteract_T_BEGIN         = 3,
	CEDoorInteract_T_END           = 4,
	CEDoorInteract_T_NIL           = 5,
	CEDoorInteract_T_MAX           = 6
};


// Enum BLGame.ABLCTypeEnum.CEItemCategoryType
enum class ECEItemCategoryType : uint8_t
{
	CEItemCategory_T_WEAPON        = 0,
	CEItemCategory_T_SHIELD        = 1,
	CEItemCategory_T_ARMOR         = 2,
	CEItemCategory_T_ACCESSORY     = 3,
	CEItemCategory_T_USE           = 4,
	CEItemCategory_T_SKILL_BOOK    = 5,
	CEItemCategory_T_QUEST_START   = 6,
	CEItemCategory_T_QUEST_USE     = 7,
	CEItemCategory_T_QUEST_COLLECT = 8,
	CEItemCategory_T_TRASH         = 9,
	CEItemCategory_T_MOUNT         = 10,
	CEItemCategory_T_GATHER_TOOL   = 11,
	CEItemCategory_T_CRAFT_MATERIAL = 12,
	CEItemCategory_T_HP_POTION     = 13,
	CEItemCategory_T_SP_POTION     = 14,
	CEItemCategory_T_SHP_POTION    = 15,
	CEItemCategory_T_ONE_PIECE_COSTUME = 16,
	CEItemCategory_T_TWO_PIECE_COSTUME = 17,
	CEItemCategory_T_THREE_PIECE_COSTUME = 18,
	CEItemCategory_T_INDIVIDUAL_PIECE_COSTUME = 19,
	CEItemCategory_T_WEAPON_COSTUME = 20,
	CEItemCategory_T_SHIELD_COSTUME = 21,
	CEItemCategory_T_CUSTOMIZING_PLASTICSURGERY = 22,
	CEItemCategory_T_CUSTOMIZING_EQUIP = 23,
	CEItemCategory_T_RUNE          = 24,
	CEItemCategory_T_RUNE_CRAFT_MATERIAL = 25,
	CEItemCategory_T_FOOD          = 26,
	CEItemCategory_T_MOUNT_GET     = 27,
	CEItemCategory_T_PET_GET       = 28,
	CEItemCategory_T_FELLOW_GET    = 29,
	CEItemCategory_T_COSTUME_GET   = 30,
	CEItemCategory_T_RETURN        = 31,
	CEItemCategory_T_ANIMA         = 32,
	CEItemCategory_T_MOUNT_CONTAINER = 33,
	CEItemCategory_T_PET_CONTAINER = 34,
	CEItemCategory_T_MPF_CAPSULE   = 35,
	CEItemCategory_T_BATTLE_WEAPON = 36,
	CEItemCategory_T_MPF_RESTOREFATIGUE = 37,
	CEItemCategory_T_MPF_GRADEUPCOUNT = 38,
	CEItemCategory_T_CRAFT_RECIPE  = 39,
	CEItemCategory_T_REPAIR_TOOL   = 40,
	CEItemCategory_T_CRAFT_ATELIER = 41,
	CEItemCategory_T_MPF_GRADEUP   = 42,
	CEItemCategory_T_MPF_EXPUP     = 43,
	CEItemCategory_T_MPF_SKILL_CHANGE = 44,
	CEItemCategory_T_UPGRADE_MATERIAL = 45,
	CEItemCategory_T_MOUNT_GROUND_COSTUME = 46,
	CEItemCategory_T_MOUNT_AIR_COSTUME = 47,
	CEItemCategory_T_PET_COSTUME   = 48,
	CEItemCategory_T_SKILLDECK_RESET = 49,
	CEItemCategory_T_MPF_SKILL_CHANGE_ALL = 50,
	CEItemCategory_T_INVENTORY_EXPANSION = 51,
	CEItemCategory_T_GENDER_CHANGE = 52,
	CEItemCategory_T_APPEARANCE_CHANGE = 53,
	CEItemCategory_T_CHARACTER_SLOT_ADD = 54,
	CEItemCategory_T_FELLOW_CONTAINER = 55,
	CEItemCategory_T_CHALLENGETOWER_USE = 56,
	CEItemCategory_T_BEGIN         = 57,
	CEItemCategory_T_END           = 58,
	CEItemCategory_T_NIL           = 59,
	CEItemCategory_T_MAX           = 60
};


// Enum BLGame.ABLCTypeEnum.CEInventoryType
enum class ECEInventoryType : uint8_t
{
	CEInventory_T_NORMAL_INVENTORY = 0,
	CEInventory_T_COSTUME_INVENTORY = 1,
	CEInventory_T_QUEST_INVENTORY  = 2,
	CEInventory_T_BEGIN            = 3,
	CEInventory_T_END              = 4,
	CEInventory_T_NIL              = 5,
	CEInventory_T_MAX              = 6
};


// Enum BLGame.ABLCTypeEnum.CENPCGradeType
enum class ECENPCGradeType : uint8_t
{
	CENPCGrade_T_WEAKEST           = 0,
	CENPCGrade_T_WEAK              = 1,
	CENPCGrade_T_POOR              = 2,
	CENPCGrade_T_NORMAL            = 3,
	CENPCGrade_T_SKILLED           = 4,
	CENPCGrade_T_ELITE             = 5,
	CENPCGrade_T_BOSS              = 6,
	CENPCGrade_T_BEGIN             = 7,
	CENPCGrade_T_END               = 8,
	CENPCGrade_T_NIL               = 9,
	CENPCGrade_T_MAX               = 10
};


// Enum BLGame.ABLCTypeEnum.CEAlrimiType
enum class ECEAlrimiType : uint8_t
{
	CEAlrimi_T_NONE                = 0,
	CEAlrimi_T_QUEST               = 1,
	CEAlrimi_T_MONSTER_BOOK        = 2,
	CEAlrimi_T_BEGIN               = 3,
	CEAlrimi_T_END                 = 4,
	CEAlrimi_T_NIL                 = 5,
	CEAlrimi_T_MAX                 = 6
};


// Enum BLGame.ABLCTypeEnum.CEForcedTargetType
enum class ECEForcedTargetType : uint8_t
{
	CEForcedTarget_T_NONE          = 0,
	CEForcedTarget_T_MAINTAINTARGET = 1,
	CEForcedTarget_T_TAUNT         = 2,
	CEForcedTarget_T_UPPER_MAINTAINTARGET = 3,
	CEForcedTarget_T_BEGIN         = 4,
	CEForcedTarget_T_END           = 5,
	CEForcedTarget_T_NIL           = 6,
	CEForcedTarget_T_MAX           = 7
};


// Enum BLGame.ABLCTypeEnum.CEGameDayTimeType
enum class ECEGameDayTimeType : uint8_t
{
	CEGameDayTime_T_NONE           = 0,
	CEGameDayTime_T_DAY            = 1,
	CEGameDayTime_T_NIGHT          = 2,
	CEGameDayTime_T_BEGIN          = 3,
	CEGameDayTime_T_END            = 4,
	CEGameDayTime_T_NIL            = 5,
	CEGameDayTime_T_MAX            = 6
};


// Enum BLGame.ABLCTypeEnum.CEDayTimeType
enum class ECEDayTimeType : uint8_t
{
	CEDayTime_T_NONE               = 0,
	CEDayTime_T_DAWN               = 1,
	CEDayTime_T_DAY                = 2,
	CEDayTime_T_DUSK               = 3,
	CEDayTime_T_NIGHT              = 4,
	CEDayTime_T_BEGIN              = 5,
	CEDayTime_T_END                = 6,
	CEDayTime_T_NIL                = 7,
	CEDayTime_T_MAX                = 8
};


// Enum BLGame.ABLCTypeEnum.CESkillParamModifyType
enum class ECESkillParamModifyType : uint8_t
{
	CESkillParamModify_T_DEALINGAMOUNT = 0,
	CESkillParamModify_T_HEALINGAMOUNT = 1,
	CESkillParamModify_T_PREPARETIME = 2,
	CESkillParamModify_T_FIRINGTIME = 3,
	CESkillParamModify_T_COOLDOWNTIME = 4,
	CESkillParamModify_T_AGGROPOINT = 5,
	CESkillParamModify_T_INVOKABLEDISTANCELOWLIMIT = 6,
	CESkillParamModify_T_INVOKABLEDISTANCEUPPERLIMIT = 7,
	CESkillParamModify_T_APPROACHDISTANCE = 8,
	CESkillParamModify_T_INVOKABLEANGLE = 9,
	CESkillParamModify_T_INVOKABLECOST = 10,
	CESkillParamModify_T_INVOKABLECOSTINPERCENT = 11,
	CESkillParamModify_T_INVOKABLECOMBATFLAIR = 12,
	CESkillParamModify_T_COMBATFLAIRACQUIRE = 13,
	CESkillParamModify_T_COMBATFLAIRCONSUME = 14,
	CESkillParamModify_T_AREASHAPERADIUSMIN = 15,
	CESkillParamModify_T_AREASHAPERADIUSMAX = 16,
	CESkillParamModify_T_MISSCHANCE = 17,
	CESkillParamModify_T_PROJECTILEVELOCITY = 18,
	CESkillParamModify_T_NSW       = 19,
	CESkillParamModify_T_NSWS      = 20,
	CESkillParamModify_T_NSA       = 21,
	CESkillParamModify_T_NSPS      = 22,
	CESkillParamModify_T_INVOKABLECOSTFORLAUNCH = 23,
	CESkillParamModify_T_INVOKABLECOSTINPERCENTFORLAUNCH = 24,
	CESkillParamModify_T_APPLYINGAREAGUARENTEEDTARGETMAX = 25,
	CESkillParamModify_T_BEGIN     = 26,
	CESkillParamModify_T_END       = 27,
	CESkillParamModify_T_NIL       = 28,
	CESkillParamModify_T_MAX       = 29
};


// Enum BLGame.ABLCTypeEnum.CEAddRemoveType
enum class ECEAddRemoveType : uint8_t
{
	CEAddRemove_T_ADD              = 0,
	CEAddRemove_T_REMOVE           = 1,
	CEAddRemove_T_BEGIN            = 2,
	CEAddRemove_T_END              = 3,
	CEAddRemove_T_NIL              = 4,
	CEAddRemove_T_MAX              = 5
};


// Enum BLGame.ABLCTypeEnum.CESkillPhaseType
enum class ECESkillPhaseType : uint8_t
{
	CESkillPhase_T_ALL             = 0,
	CESkillPhase_T_PREPARE         = 1,
	CESkillPhase_T_FIRING          = 2,
	CESkillPhase_T_BEGIN           = 3,
	CESkillPhase_T_END             = 4,
	CESkillPhase_T_NIL             = 5,
	CESkillPhase_T_MAX             = 6
};


// Enum BLGame.ABLCTypeEnum.CECombatFlairStartType
enum class ECECombatFlairStartType : uint8_t
{
	CECombatFlairStart_T_EMPTY     = 0,
	CECombatFlairStart_T_FULL      = 1,
	CECombatFlairStart_T_PRESENT   = 2,
	CECombatFlairStart_T_BEGIN     = 3,
	CECombatFlairStart_T_END       = 4,
	CECombatFlairStart_T_NIL       = 5,
	CECombatFlairStart_T_MAX       = 6
};


// Enum BLGame.ABLCTypeEnum.CELumenaShopItemLimitType
enum class ECELumenaShopItemLimitType : uint8_t
{
	CELumenaShopItemLimit_T_SERVER = 0,
	CELumenaShopItemLimit_T_CHARACTER = 1,
	CELumenaShopItemLimit_T_BEGIN  = 2,
	CELumenaShopItemLimit_T_END    = 3,
	CELumenaShopItemLimit_T_NIL    = 4,
	CELumenaShopItemLimit_T_MAX    = 5
};


// Enum BLGame.ABLCTypeEnum.CEShopTradeType
enum class ECEShopTradeType : uint8_t
{
	CEShopTrade_T_NONE             = 0,
	CEShopTrade_T_BUY              = 1,
	CEShopTrade_T_SELL             = 2,
	CEShopTrade_T_REPURCHASE       = 3,
	CEShopTrade_T_CLEARANCE        = 4,
	CEShopTrade_T_BEGIN            = 5,
	CEShopTrade_T_END              = 6,
	CEShopTrade_T_NIL              = 7,
	CEShopTrade_T_MAX              = 8
};


// Enum BLGame.ABLCTypeEnum.CETrapPhaseType
enum class ECETrapPhaseType : uint8_t
{
	CETrapPhase_T_STANDBY          = 0,
	CETrapPhase_T_OBSERVE          = 1,
	CETrapPhase_T_PULLEDTRIGGER    = 2,
	CETrapPhase_T_DISSOLVE         = 3,
	CETrapPhase_T_BEGIN            = 4,
	CETrapPhase_T_END              = 5,
	CETrapPhase_T_NIL              = 6,
	CETrapPhase_T_MAX              = 7
};


// Enum BLGame.ABLCTypeEnum.CEMonologSetInfoType
enum class ECEMonologSetInfoType : uint8_t
{
	CEMonologSetInfo_T_SEQUENCE    = 0,
	CEMonologSetInfo_T_RANDOM      = 1,
	CEMonologSetInfo_T_BEGIN       = 2,
	CEMonologSetInfo_T_END         = 3,
	CEMonologSetInfo_T_NIL         = 4,
	CEMonologSetInfo_T_MAX         = 5
};


// Enum BLGame.ABLCTypeEnum.CETeleportType
enum class ECETeleportType : uint8_t
{
	CETeleport_T_NONE              = 0,
	CETeleport_T_DESTINATION       = 1,
	CETeleport_T_EMERGENCY_ESCAPE  = 2,
	CETeleport_T_BEGIN             = 3,
	CETeleport_T_END               = 4,
	CETeleport_T_NIL               = 5,
	CETeleport_T_MAX               = 6
};


// Enum BLGame.ABLCTypeEnum.CEDoorStateType
enum class ECEDoorStateType : uint8_t
{
	CEDoorState_T_OPENNING         = 0,
	CEDoorState_T_OPEN             = 1,
	CEDoorState_T_CLOSING          = 2,
	CEDoorState_T_CLOSE            = 3,
	CEDoorState_T_BEGIN            = 4,
	CEDoorState_T_END              = 5,
	CEDoorState_T_NIL              = 6,
	CEDoorState_T_MAX              = 7
};


// Enum BLGame.ABLCTypeEnum.CETransportType
enum class ECETransportType : uint8_t
{
	CETransport_T_WYVERN           = 0,
	CETransport_T_GONDOLA          = 1,
	CETransport_T_FLYINGBOAT       = 2,
	CETransport_T_BEGIN            = 3,
	CETransport_T_END              = 4,
	CETransport_T_NIL              = 5,
	CETransport_T_MAX              = 6
};


// Enum BLGame.ABLCTypeEnum.CEWaypointType
enum class ECEWaypointType : uint8_t
{
	CEWaypoint_T_CROSSROAD         = 0,
	CEWaypoint_T_STATION           = 1,
	CEWaypoint_T_HIDDENSTATION     = 2,
	CEWaypoint_T_BEGIN             = 3,
	CEWaypoint_T_END               = 4,
	CEWaypoint_T_NIL               = 5,
	CEWaypoint_T_MAX               = 6
};


// Enum BLGame.ABLCTypeEnum.CEV2FellowParamType
enum class ECEV2FellowParamType : uint8_t
{
	CEV2FellowParam_T_STRENGTH     = 0,
	CEV2FellowParam_T_AGILITY      = 1,
	CEV2FellowParam_T_INTELLIGENCE = 2,
	CEV2FellowParam_T_WISDOM       = 3,
	CEV2FellowParam_T_CRUEL        = 4,
	CEV2FellowParam_T_ABILITY      = 5,
	CEV2FellowParam_T_BOLDNESS     = 6,
	CEV2FellowParam_T_CONCENTRATION = 7,
	CEV2FellowParam_T_MAX_FATIGUE  = 8,
	CEV2FellowParam_T_RESTORE_FATIGUE_PER_TIME_FATIGUE = 9,
	CEV2FellowParam_T_BEGIN        = 10,
	CEV2FellowParam_T_END          = 11,
	CEV2FellowParam_T_NIL          = 12,
	CEV2FellowParam_T_MAX          = 13
};


// Enum BLGame.ABLCTypeEnum.CEV2PetParamType
enum class ECEV2PetParamType : uint8_t
{
	CEV2PetParam_T_COOL_TIME       = 0,
	CEV2PetParam_T_MAX_FATIGUE     = 1,
	CEV2PetParam_T_SPAWN_FATIGUE   = 2,
	CEV2PetParam_T_CONSUME_FATIGUE_PER_TIME = 3,
	CEV2PetParam_T_RESTORE_FATIGUE_PER_TIME = 4,
	CEV2PetParam_T_AUTOLOOTING_DELAY = 5,
	CEV2PetParam_T_AUTOLOOTING_DISTANCE = 6,
	CEV2PetParam_T_BEGIN           = 7,
	CEV2PetParam_T_END             = 8,
	CEV2PetParam_T_NIL             = 9,
	CEV2PetParam_T_MAX             = 10
};


// Enum BLGame.ABLCTypeEnum.CEMountParamType
enum class ECEMountParamType : uint8_t
{
	CEMountParam_T_RIDE_TIME       = 0,
	CEMountParam_T_RUN_FORWARD_SPEED_MOUNT = 1,
	CEMountParam_T_RUN_BACKWARD_SPEED_MOUNT = 2,
	CEMountParam_T_FLYING_FORWARD_SPEED_MOUNT = 3,
	CEMountParam_T_FLYING_BACKWARD_SPEED_MOUNT = 4,
	CEMountParam_T_MAX_FATIGUE     = 5,
	CEMountParam_T_SPAWN_FATIGUE   = 6,
	CEMountParam_T_CONSUME_FATIGUE_PER_TIME = 7,
	CEMountParam_T_DESPAWN_RESTORE_FATIGUE_PER_TIME = 8,
	CEMountParam_T_STOP_RESTORE_FATIGUE_PER_TIME = 9,
	CEMountParam_T_CHANCE_TO_GET_OFF_ON_DAMAGE_C = 10,
	CEMountParam_T_CHANCE_TO_GET_OFF_ON_DAMAGE_D = 11,
	CEMountParam_T_CHANCE_TO_GET_OFF_ON_DAMAGE_E = 12,
	CEMountParam_T_CHANCE_TO_GET_OFF_ON_DAMAGE_F = 13,
	CEMountParam_T_JUMP_ABILITY_MOUNT = 14,
	CEMountParam_T_GRADE_ABILITY_MOUNT = 15,
	CEMountParam_T_IS_FLY          = 16,
	CEMountParam_T_BEGIN           = 17,
	CEMountParam_T_END             = 18,
	CEMountParam_T_NIL             = 19,
	CEMountParam_T_MAX             = 20
};


// Enum BLGame.ABLCTypeEnum.CEMountLegMethodType
enum class ECEMountLegMethodType : uint8_t
{
	CEMountLegMethod_T_NONE        = 0,
	CEMountLegMethod_T_WIDER       = 1,
	CEMountLegMethod_T_NARROWER    = 2,
	CEMountLegMethod_T_BEGIN       = 3,
	CEMountLegMethod_T_END         = 4,
	CEMountLegMethod_T_NIL         = 5,
	CEMountLegMethod_T_MAX         = 6
};


// Enum BLGame.ABLCTypeEnum.CEMountArmMethodType
enum class ECEMountArmMethodType : uint8_t
{
	CEMountArmMethod_T_NONE        = 0,
	CEMountArmMethod_T_UPWARD      = 1,
	CEMountArmMethod_T_DOWNWARD    = 2,
	CEMountArmMethod_T_BEGIN       = 3,
	CEMountArmMethod_T_END         = 4,
	CEMountArmMethod_T_NIL         = 5,
	CEMountArmMethod_T_MAX         = 6
};


// Enum BLGame.ABLCTypeEnum.CEMountSpineMethodType
enum class ECEMountSpineMethodType : uint8_t
{
	CEMountSpineMethod_T_NONE      = 0,
	CEMountSpineMethod_T_BACKWARD  = 1,
	CEMountSpineMethod_T_FORWARD   = 2,
	CEMountSpineMethod_T_BEGIN     = 3,
	CEMountSpineMethod_T_END       = 4,
	CEMountSpineMethod_T_NIL       = 5,
	CEMountSpineMethod_T_MAX       = 6
};


// Enum BLGame.ABLCTypeEnum.CEMountSkinType
enum class ECEMountSkinType : uint8_t
{
	CEMountSkin_T_NONE             = 0,
	CEMountSkin_T_STRONG_SKIN      = 1,
	CEMountSkin_T_WEAK_SKIN        = 2,
	CEMountSkin_T_BEGIN            = 3,
	CEMountSkin_T_END              = 4,
	CEMountSkin_T_NIL              = 5,
	CEMountSkin_T_MAX              = 6
};


// Enum BLGame.ABLCTypeEnum.CEMountSpeedType
enum class ECEMountSpeedType : uint8_t
{
	CEMountSpeed_T_NONE            = 0,
	CEMountSpeed_T_SLOW_SPEED      = 1,
	CEMountSpeed_T_FAST_SPEED      = 2,
	CEMountSpeed_T_BEGIN           = 3,
	CEMountSpeed_T_END             = 4,
	CEMountSpeed_T_NIL             = 5,
	CEMountSpeed_T_MAX             = 6
};


// Enum BLGame.ABLCTypeEnum.CEMountMaxStaminaType
enum class ECEMountMaxStaminaType : uint8_t
{
	CEMountMaxStamina_T_NONE       = 0,
	CEMountMaxStamina_T_SHORT_STAMINA = 1,
	CEMountMaxStamina_T_LONG_STAMINA = 2,
	CEMountMaxStamina_T_BEGIN      = 3,
	CEMountMaxStamina_T_END        = 4,
	CEMountMaxStamina_T_NIL        = 5,
	CEMountMaxStamina_T_MAX        = 6
};


// Enum BLGame.ABLCTypeEnum.CEMountStaminaRegenType
enum class ECEMountStaminaRegenType : uint8_t
{
	CEMountStaminaRegen_T_NONE     = 0,
	CEMountStaminaRegen_T_SLOW_RECOVERY = 1,
	CEMountStaminaRegen_T_FAST_RECOVERY = 2,
	CEMountStaminaRegen_T_BEGIN    = 3,
	CEMountStaminaRegen_T_END      = 4,
	CEMountStaminaRegen_T_NIL      = 5,
	CEMountStaminaRegen_T_MAX      = 6
};


// Enum BLGame.ABLCTypeEnum.CEMountType
enum class ECEMountType : uint8_t
{
	CEMount_T_NONE                 = 0,
	CEMount_T_GROUND               = 1,
	CEMount_T_AIR                  = 2,
	CEMount_T_UNDERWATER           = 3,
	CEMount_T_ALL                  = 4,
	CEMount_T_BEGIN                = 5,
	CEMount_T_END                  = 6,
	CEMount_T_NIL                  = 7,
	CEMount_T_MAX                  = 8
};


// Enum BLGame.ABLCTypeEnum.CEDialogCategoryType
enum class ECEDialogCategoryType : uint8_t
{
	CEDialogCategory_T_ROOT        = 0,
	CEDialogCategory_T_GENERAL     = 1,
	CEDialogCategory_T_BEGIN       = 2,
	CEDialogCategory_T_END         = 3,
	CEDialogCategory_T_NIL         = 4,
	CEDialogCategory_T_MAX         = 5
};


// Enum BLGame.ABLCTypeEnum.CEDialogShowQuestInfoType
enum class ECEDialogShowQuestInfoType : uint8_t
{
	CEDialogShowQuestInfo_T_NONE   = 0,
	CEDialogShowQuestInfo_T_QUEST_ADD = 1,
	CEDialogShowQuestInfo_T_QUEST_REWARD = 2,
	CEDialogShowQuestInfo_T_BEGIN  = 3,
	CEDialogShowQuestInfo_T_END    = 4,
	CEDialogShowQuestInfo_T_NIL    = 5,
	CEDialogShowQuestInfo_T_MAX    = 6
};


// Enum BLGame.ABLCTypeEnum.CELocationLevelType
enum class ECELocationLevelType : uint8_t
{
	CELocationLevel_T_ALIVE        = 0,
	CELocationLevel_T_ETC          = 1,
	CELocationLevel_T_SUBZONE3     = 2,
	CELocationLevel_T_SUBZONE2     = 3,
	CELocationLevel_T_SUBZONE1     = 4,
	CELocationLevel_T_ZONE         = 5,
	CELocationLevel_T_BEGIN        = 6,
	CELocationLevel_T_END          = 7,
	CELocationLevel_T_NIL          = 8,
	CELocationLevel_T_MAX          = 9
};


// Enum BLGame.ABLCTypeEnum.CEConditionPhaseType
enum class ECEConditionPhaseType : uint8_t
{
	CEConditionPhase_T_ALIVE       = 0,
	CEConditionPhase_T_DEAD        = 1,
	CEConditionPhase_T_SPIRIT      = 2,
	CEConditionPhase_T_STEALTH     = 3,
	CEConditionPhase_T_BEGIN       = 4,
	CEConditionPhase_T_END         = 5,
	CEConditionPhase_T_NIL         = 6,
	CEConditionPhase_T_MAX         = 7
};


// Enum BLGame.ABLCTypeEnum.CETargetObjectType
enum class ECETargetObjectType : uint8_t
{
	CETargetObject_T_NONE          = 0,
	CETargetObject_T_PAWN          = 1,
	CETargetObject_T_DEADBODY      = 2,
	CETargetObject_T_BEGIN         = 3,
	CETargetObject_T_END           = 4,
	CETargetObject_T_NIL           = 5,
	CETargetObject_T_MAX           = 6
};


// Enum BLGame.ABLCTypeEnum.CEImmuneType
enum class ECEImmuneType : uint8_t
{
	CEImmune_T_ALL                 = 0,
	CEImmune_T_ALLDMG              = 1,
	CEImmune_T_ALLHEAL             = 2,
	CEImmune_T_ALLRC               = 3,
	CEImmune_T_PHYSICALDMG         = 4,
	CEImmune_T_MAGICALDMG          = 5,
	CEImmune_T_DIRECTHEAL          = 6,
	CEImmune_T_HOT                 = 7,
	CEImmune_T_HITUP               = 8,
	CEImmune_T_DOWN                = 9,
	CEImmune_T_PUSH                = 10,
	CEImmune_T_PULL                = 11,
	CEImmune_T_PUSHDOWN            = 12,
	CEImmune_T_LESSERPUSH          = 13,
	CEImmune_T_ENEGERDOWN          = 14,
	CEImmune_T_ENERGYUP            = 15,
	CEImmune_T_TARGETING           = 16,
	CEImmune_T_BUFF                = 17,
	CEImmune_T_DEBUFF              = 18,
	CEImmune_T_CC                  = 19,
	CEImmune_T_SYSTEM              = 20,
	CEImmune_T_ALLPROJECTILE       = 21,
	CEImmune_T_DEALINGPROJECTILE   = 22,
	CEImmune_T_HEALINGPROJECTILE   = 23,
	CEImmune_T_BENEUTRAL           = 24,
	CEImmune_T_BEGIN               = 25,
	CEImmune_T_END                 = 26,
	CEImmune_T_NIL                 = 27,
	CEImmune_T_MAX                 = 28
};


// Enum BLGame.ABLCTypeEnum.CECrowdControlType
enum class ECECrowdControlType : uint8_t
{
	CECrowdControl_T_STUN          = 0,
	CECrowdControl_T_FAINT         = 1,
	CECrowdControl_T_BANISH        = 2,
	CECrowdControl_T_BLIND         = 3,
	CECrowdControl_T_RESTRAIN      = 4,
	CECrowdControl_T_SILENCE       = 5,
	CECrowdControl_T_CANTTARGET_STUN = 6,
	CECrowdControl_T_CANT_COMBATSTATE = 7,
	CECrowdControl_T_CANT_TARGET   = 8,
	CECrowdControl_T_CANT_CONTROL  = 9,
	CECrowdControl_T_BLOCKVA       = 10,
	CECrowdControl_T_TURN          = 11,
	CECrowdControl_T_BEGIN         = 12,
	CECrowdControl_T_END           = 13,
	CECrowdControl_T_NIL           = 14,
	CECrowdControl_T_MAX           = 15
};


// Enum BLGame.ABLCTypeEnum.CECrowdControlComponentType
enum class ECECrowdControlComponentType : uint8_t
{
	CECrowdControlComponent_T_VOLUNTARY = 0,
	CECrowdControlComponent_T_NORMALATTACK = 1,
	CECrowdControlComponent_T_LONGSKILL = 2,
	CECrowdControlComponent_T_SHORTSKILL = 3,
	CECrowdControlComponent_T_MAGICALSKILL = 4,
	CECrowdControlComponent_T_PHYSICALSKILL = 5,
	CECrowdControlComponent_T_COOLTIME = 6,
	CECrowdControlComponent_T_MOVE = 7,
	CECrowdControlComponent_T_TURN = 8,
	CECrowdControlComponent_T_TARGETING = 9,
	CECrowdControlComponent_T_USEITEM = 10,
	CECrowdControlComponent_T_INTERACTION = 11,
	CECrowdControlComponent_T_LOOTITEM = 12,
	CECrowdControlComponent_T_MOUNT = 13,
	CECrowdControlComponent_T_CARRY = 14,
	CECrowdControlComponent_T_COMBAT = 15,
	CECrowdControlComponent_T_REMOTEMOVECONTROL = 16,
	CECrowdControlComponent_T_SWAPSKILLDECK = 17,
	CECrowdControlComponent_T_RIOTOCCUPY = 18,
	CECrowdControlComponent_T_SYNTHESIZE = 19,
	CECrowdControlComponent_T_BEGIN = 20,
	CECrowdControlComponent_T_END  = 21,
	CECrowdControlComponent_T_NIL  = 22,
	CECrowdControlComponent_T_MAX  = 23
};


// Enum BLGame.ABLCTypeEnum.CEPCNormalAttackAnimSequenceType
enum class ECEPCNormalAttackAnimSequenceType : uint8_t
{
	CEPCNormalAttackAnimSequence_T = 0,
	CEPCNormalAttackAnimSequence_T01 = 1,
	CEPCNormalAttackAnimSequence_T02 = 2,
	CEPCNormalAttackAnimSequence_T_BEGIN = 3,
	CEPCNormalAttackAnimSequence_T_END = 4,
	CEPCNormalAttackAnimSequence_T_NIL = 5,
	CEPCNormalAttackAnimSequence_T_MAX = 6
};


// Enum BLGame.ABLCTypeEnum.CENormalAttackEquipType
enum class ECENormalAttackEquipType : uint8_t
{
	CENormalAttackEquip_T_TYPE1    = 0,
	CENormalAttackEquip_T_TYPE2    = 1,
	CENormalAttackEquip_T_TYPE3    = 2,
	CENormalAttackEquip_T_TYPE4    = 3,
	CENormalAttackEquip_T_TYPE5    = 4,
	CENormalAttackEquip_T_TYPE6    = 5,
	CENormalAttackEquip_T_TYPE7    = 6,
	CENormalAttackEquip_T_TYPE8    = 7,
	CENormalAttackEquip_T_TYPE9    = 8,
	CENormalAttackEquip_T_TYPE10   = 9,
	CENormalAttackEquip_T_BEGIN    = 10,
	CENormalAttackEquip_T_END      = 11,
	CENormalAttackEquip_T_NIL      = 12,
	CENormalAttackEquip_T_MAX      = 13
};


// Enum BLGame.ABLCTypeEnum.CESpawnPosType
enum class ECESpawnPosType : uint8_t
{
	CESpawnPos_T_RANDOM            = 0,
	CESpawnPos_T_FIXED             = 1,
	CESpawnPos_T_SUMMON            = 2,
	CESpawnPos_T_BEGIN             = 3,
	CESpawnPos_T_END               = 4,
	CESpawnPos_T_NIL               = 5,
	CESpawnPos_T_MAX               = 6
};


// Enum BLGame.ABLCTypeEnum.CENPCHideCategory
enum class ECENPCHideCategory : uint8_t
{
	CENPCHide_CT                   = 0,
	CENPCHide_CT_HIDENAMETAG       = 1,
	CENPCHide_CT_HIDEHPBAR         = 2,
	CENPCHide_CT_HIDEONHEADTAG     = 3,
	CENPCHide_CT_BEGIN             = 4,
	CENPCHide_CT_END               = 5,
	CENPCHide_CT_NIL               = 6,
	CENPCHide_CT_MAX               = 7
};


// Enum BLGame.ABLCTypeEnum.CENPCPartyDespawnType
enum class ECENPCPartyDespawnType : uint8_t
{
	CENPCPartyDespawn_T_TYPE_A     = 0,
	CENPCPartyDespawn_T_TYPE_B     = 1,
	CENPCPartyDespawn_T_BEGIN      = 2,
	CENPCPartyDespawn_T_END        = 3,
	CENPCPartyDespawn_T_NIL        = 4,
	CENPCPartyDespawn_T_MAX        = 5
};


// Enum BLGame.ABLCTypeEnum.CENPCPartySpawnType
enum class ECENPCPartySpawnType : uint8_t
{
	CENPCPartySpawn_T_TYPE_A       = 0,
	CENPCPartySpawn_T_TYPE_B       = 1,
	CENPCPartySpawn_T_TYPE_C       = 2,
	CENPCPartySpawn_T_TYPE_D       = 3,
	CENPCPartySpawn_T_BEGIN        = 4,
	CENPCPartySpawn_T_END          = 5,
	CENPCPartySpawn_T_NIL          = 6,
	CENPCPartySpawn_T_MAX          = 7
};


// Enum BLGame.ABLCTypeEnum.CENPCPartyStatusType
enum class ECENPCPartyStatusType : uint8_t
{
	CENPCPartyStatus_T_MEMBER      = 0,
	CENPCPartyStatus_T_LEADER      = 1,
	CENPCPartyStatus_T_BEGIN       = 2,
	CENPCPartyStatus_T_END         = 3,
	CENPCPartyStatus_T_NIL         = 4,
	CENPCPartyStatus_T_MAX         = 5
};


// Enum BLGame.ABLCTypeEnum.CEAbnormalStackType
enum class ECEAbnormalStackType : uint8_t
{
	CEAbnormalStack_T_NONE         = 0,
	CEAbnormalStack_T_PRIVATE_STACK = 1,
	CEAbnormalStack_T_PUBLIC_STACK = 2,
	CEAbnormalStack_T_BEGIN        = 3,
	CEAbnormalStack_T_END          = 4,
	CEAbnormalStack_T_NIL          = 5,
	CEAbnormalStack_T_MAX          = 6
};


// Enum BLGame.ABLCTypeEnum.CEInvokeAliveConditionType
enum class ECEInvokeAliveConditionType : uint8_t
{
	CEInvokeAliveCondition_T_ALIVE = 0,
	CEInvokeAliveCondition_T_DEAD  = 1,
	CEInvokeAliveCondition_T_ALL   = 2,
	CEInvokeAliveCondition_T_BEGIN = 3,
	CEInvokeAliveCondition_T_END   = 4,
	CEInvokeAliveCondition_T_NIL   = 5,
	CEInvokeAliveCondition_T_MAX   = 6
};


// Enum BLGame.ABLCTypeEnum.CEQuestConditionType
enum class ECEQuestConditionType : uint8_t
{
	CEQuestCondition_T_HAVING      = 0,
	CEQuestCondition_T_HAVINGNOTCOMPLETED = 1,
	CEQuestCondition_T_HAVINGNOTCOMPLETEDNOTFAIL = 2,
	CEQuestCondition_T_HAVINGCOMPLETED = 3,
	CEQuestCondition_T_RESOLVED    = 4,
	CEQuestCondition_T_NOTRESOLVED = 5,
	CEQuestCondition_T_NOTHAVINGNOTRESOLVED = 6,
	CEQuestCondition_T_HAVINGCOMPLETEOBJECTIVE = 7,
	CEQuestCondition_T_HAVINGOBJECTIVE = 8,
	CEQuestCondition_T_HAVINGNOTCOMPLETEOBJECTIVE = 9,
	CEQuestCondition_T_BEGIN       = 10,
	CEQuestCondition_T_END         = 11,
	CEQuestCondition_T_NIL         = 12,
	CEQuestCondition_T_MAX         = 13
};


// Enum BLGame.ABLCTypeEnum.CEDungeonRequiredPartyType
enum class ECEDungeonRequiredPartyType : uint8_t
{
	CEDungeonRequiredParty_T_ALL   = 0,
	CEDungeonRequiredParty_T_SOLO  = 1,
	CEDungeonRequiredParty_T_PARTY = 2,
	CEDungeonRequiredParty_T_SOLOORPARTY = 3,
	CEDungeonRequiredParty_T_RAID10 = 4,
	CEDungeonRequiredParty_T_RAID20 = 5,
	CEDungeonRequiredParty_T_PARTYORRAID = 6,
	CEDungeonRequiredParty_T_BEGIN = 7,
	CEDungeonRequiredParty_T_END   = 8,
	CEDungeonRequiredParty_T_NIL   = 9,
	CEDungeonRequiredParty_T_MAX   = 10
};


// Enum BLGame.ABLCTypeEnum.CEDungeonEnterMethodType
enum class ECEDungeonEnterMethodType : uint8_t
{
	CEDungeonEnterMethod_T_SPECIFICPOS = 0,
	CEDungeonEnterMethod_T_RANDOMATFIRSTWITHPARTY = 1,
	CEDungeonEnterMethod_T_RANDOMATFIRSTALONE = 2,
	CEDungeonEnterMethod_T_RANDOMATFIRSTWITHRANDOMMEMBER = 3,
	CEDungeonEnterMethod_T_RANDOMALWAYS = 4,
	CEDungeonEnterMethod_T_BEGIN   = 5,
	CEDungeonEnterMethod_T_END     = 6,
	CEDungeonEnterMethod_T_NIL     = 7,
	CEDungeonEnterMethod_T_MAX     = 8
};


// Enum BLGame.ABLCTypeEnum.CEDungeonStageExpireType
enum class ECEDungeonStageExpireType : uint8_t
{
	CEDungeonStageExpire_T_NONE    = 0,
	CEDungeonStageExpire_T_DAILY   = 1,
	CEDungeonStageExpire_T_WEEKLY  = 2,
	CEDungeonStageExpire_T_DUNGEON = 3,
	CEDungeonStageExpire_T_BEGIN   = 4,
	CEDungeonStageExpire_T_END     = 5,
	CEDungeonStageExpire_T_NIL     = 6,
	CEDungeonStageExpire_T_MAX     = 7
};


// Enum BLGame.ABLCTypeEnum.CEHitAffectAreaShapeType
enum class ECEHitAffectAreaShapeType : uint8_t
{
	CEHitAffectAreaShape_T_NONE    = 0,
	CEHitAffectAreaShape_T_CIRCULARCYLINDER = 1,
	CEHitAffectAreaShape_T_CIRCULARARCCYLINDER = 2,
	CEHitAffectAreaShape_T_HEXAHEDRON = 3,
	CEHitAffectAreaShape_T_HEXAHEDRONSTAR = 4,
	CEHitAffectAreaShape_T_HEXAHEDRONHALFSTAR = 5,
	CEHitAffectAreaShape_T_MULTIHEXAHEDRON = 6,
	CEHitAffectAreaShape_T_MULTICYLINDER = 7,
	CEHitAffectAreaShape_T_BEGIN   = 8,
	CEHitAffectAreaShape_T_END     = 9,
	CEHitAffectAreaShape_T_NIL     = 10,
	CEHitAffectAreaShape_T_MAX     = 11
};


// Enum BLGame.ABLCTypeEnum.CESkillInvokeStateType
enum class ECESkillInvokeStateType : uint8_t
{
	CESkillInvokeState_T_MOUNT     = 0,
	CESkillInvokeState_T_BEGIN     = 1,
	CESkillInvokeState_T_END       = 2,
	CESkillInvokeState_T_NIL       = 3,
	CESkillInvokeState_T_MAX       = 4
};


// Enum BLGame.ABLCTypeEnum.CEQuestAcquireConditionType
enum class ECEQuestAcquireConditionType : uint8_t
{
	CEQuestAcquireCondition_T_MINLEVEL = 0,
	CEQuestAcquireCondition_T_MAXLEVEL = 1,
	CEQuestAcquireCondition_T_PRECEDENTQUEST = 2,
	CEQuestAcquireCondition_T_BEGIN = 3,
	CEQuestAcquireCondition_T_END  = 4,
	CEQuestAcquireCondition_T_NIL  = 5,
	CEQuestAcquireCondition_T_MAX  = 6
};


// Enum BLGame.ABLCTypeEnum.CEQuestRewardGiverType
enum class ECEQuestRewardGiverType : uint8_t
{
	CEQuestRewardGiver_T_ITEM      = 0,
	CEQuestRewardGiver_T_NPC       = 1,
	CEQuestRewardGiver_T_BEGIN     = 2,
	CEQuestRewardGiver_T_END       = 3,
	CEQuestRewardGiver_T_NIL       = 4,
	CEQuestRewardGiver_T_MAX       = 5
};


// Enum BLGame.ABLCTypeEnum.CEQuestGiverType
enum class ECEQuestGiverType : uint8_t
{
	CEQuestGiver_T_ITEM            = 0,
	CEQuestGiver_T_NPC             = 1,
	CEQuestGiver_T_BEGIN           = 2,
	CEQuestGiver_T_END             = 3,
	CEQuestGiver_T_NIL             = 4,
	CEQuestGiver_T_MAX             = 5
};


// Enum BLGame.ABLCTypeEnum.CEQuestType
enum class ECEQuestType : uint8_t
{
	CEQuest_T_EPISODE              = 0,
	CEQuest_T_STORY                = 1,
	CEQuest_T_ROYAL                = 2,
	CEQuest_T_GUIDE                = 3,
	CEQuest_T_BEGIN                = 4,
	CEQuest_T_END                  = 5,
	CEQuest_T_NIL                  = 6,
	CEQuest_T_MAX                  = 7
};


// Enum BLGame.ABLCTypeEnum.CEQuestOnEventType
enum class ECEQuestOnEventType : uint8_t
{
	CEQuestOnEvent_T_ADDGOLD       = 0,
	CEQuestOnEvent_T_ADDITEM       = 1,
	CEQuestOnEvent_T_ADDABNORMALSTATUS = 2,
	CEQuestOnEvent_T_BEGIN         = 3,
	CEQuestOnEvent_T_END           = 4,
	CEQuestOnEvent_T_NIL           = 5,
	CEQuestOnEvent_T_MAX           = 6
};


// Enum BLGame.ABLCTypeEnum.CEQuestRewardType
enum class ECEQuestRewardType : uint8_t
{
	CEQuestReward_T_EXP            = 0,
	CEQuestReward_T_GOLD           = 1,
	CEQuestReward_T_ITEM           = 2,
	CEQuestReward_T_BEGIN          = 3,
	CEQuestReward_T_END            = 4,
	CEQuestReward_T_NIL            = 5,
	CEQuestReward_T_MAX            = 6
};


// Enum BLGame.ABLCTypeEnum.CEQuestCategory
enum class ECEQuestCategory : uint8_t
{
	CEQuest_CT_NORMAL              = 0,
	CEQuest_CT_BEGIN               = 1,
	CEQuest_CT_END                 = 2,
	CEQuest_CT_NIL                 = 3,
	CEQuest_CT_MAX                 = 4
};


// Enum BLGame.ABLCTypeEnum.CESystemMessageChatChannelType
enum class ECESystemMessageChatChannelType : uint8_t
{
	CESystemMessageChatChannel_T_NONE = 0,
	CESystemMessageChatChannel_T_BATTLE = 1,
	CESystemMessageChatChannel_T_QUEST = 2,
	CESystemMessageChatChannel_T_ITEM_USE = 3,
	CESystemMessageChatChannel_T_ITEM_GET = 4,
	CESystemMessageChatChannel_T_EQUIPMENT = 5,
	CESystemMessageChatChannel_T_BEGIN = 6,
	CESystemMessageChatChannel_T_END = 7,
	CESystemMessageChatChannel_T_NIL = 8,
	CESystemMessageChatChannel_T_MAX = 9
};


// Enum BLGame.ABLCTypeEnum.CESystemMessageOverlayType
enum class ECESystemMessageOverlayType : uint8_t
{
	CESystemMessageOverlay_T_NONE  = 0,
	CESystemMessageOverlay_T_CELEBRATE = 1,
	CESystemMessageOverlay_T_LOCATION = 2,
	CESystemMessageOverlay_T_ANNOUNCE = 3,
	CESystemMessageOverlay_T_NOTICE = 4,
	CESystemMessageOverlay_T_STORY_START = 5,
	CESystemMessageOverlay_T_STORY_COMPLETE = 6,
	CESystemMessageOverlay_T_CELEBRATE_LEVELUP = 7,
	CESystemMessageOverlay_T_CELEBRATE_GETSKILL = 8,
	CESystemMessageOverlay_T_GM    = 9,
	CESystemMessageOverlay_T_RAID_ALARM = 10,
	CESystemMessageOverlay_T_GUILDWAR_START = 11,
	CESystemMessageOverlay_T_GUILDWAR_END = 12,
	CESystemMessageOverlay_T_LOCATION_RO_CO = 13,
	CESystemMessageOverlay_T_EPISODE_START = 14,
	CESystemMessageOverlay_T_EPISODE_COMPLETE = 15,
	CESystemMessageOverlay_T_CELEBRATE_SPUP = 16,
	CESystemMessageOverlay_T_CELEBRATE_GETITEM = 17,
	CESystemMessageOverlay_T_CELEBRATE_GETMPF = 18,
	CESystemMessageOverlay_T_CHALLENGETOWER_ROUND_CLEAR = 19,
	CESystemMessageOverlay_T_CHALLENGETOWER_GAME_CLEAR = 20,
	CESystemMessageOverlay_T_CHALLENGETOWER_GAME_FAIL = 21,
	CESystemMessageOverlay_T_GUIDE_START = 22,
	CESystemMessageOverlay_T_GUIDE_COMPLETE = 23,
	CESystemMessageOverlay_T_BEGIN = 24,
	CESystemMessageOverlay_T_END   = 25,
	CESystemMessageOverlay_T_NIL   = 26,
	CESystemMessageOverlay_T_MAX   = 27
};


// Enum BLGame.ABLCTypeEnum.CESystemMessageDisplayType
enum class ECESystemMessageDisplayType : uint8_t
{
	CESystemMessageDisplay_T_NONE  = 0,
	CESystemMessageDisplay_T_CHAT  = 1,
	CESystemMessageDisplay_T_OVERLAY = 2,
	CESystemMessageDisplay_T_ALL   = 3,
	CESystemMessageDisplay_T_BEGIN = 4,
	CESystemMessageDisplay_T_END   = 5,
	CESystemMessageDisplay_T_NIL   = 6,
	CESystemMessageDisplay_T_MAX   = 7
};


// Enum BLGame.ABLCTypeEnum.CEStatePoseType
enum class ECEStatePoseType : uint8_t
{
	CEStatePose_T_STANDING         = 0,
	CEStatePose_T_SITTING          = 1,
	CEStatePose_T_LYING            = 2,
	CEStatePose_T_BEGIN            = 3,
	CEStatePose_T_END              = 4,
	CEStatePose_T_NIL              = 5,
	CEStatePose_T_MAX              = 6
};


// Enum BLGame.ABLCTypeEnum.CEStateSituationType
enum class ECEStateSituationType : uint8_t
{
	CEStateSituation_T_PEACE       = 0,
	CEStateSituation_T_COMBAT      = 1,
	CEStateSituation_T_AT_REST     = 2,
	CEStateSituation_T_RETURN      = 3,
	CEStateSituation_T_SPAWNNING   = 4,
	CEStateSituation_T_BEGIN       = 5,
	CEStateSituation_T_END         = 6,
	CEStateSituation_T_NIL         = 7,
	CEStateSituation_T_MAX         = 8
};


// Enum BLGame.ABLCTypeEnum.CEQuestShareType
enum class ECEQuestShareType : uint8_t
{
	CEQuestShare_T_SOLO            = 0,
	CEQuestShare_T_PARTY           = 1,
	CEQuestShare_T_RAID            = 2,
	CEQuestShare_T_BEGIN           = 3,
	CEQuestShare_T_END             = 4,
	CEQuestShare_T_NIL             = 5,
	CEQuestShare_T_MAX             = 6
};


// Enum BLGame.ABLCTypeEnum.CEFieldInOutType
enum class ECEFieldInOutType : uint8_t
{
	CEFieldInOut_T_IN              = 0,
	CEFieldInOut_T_OUT             = 1,
	CEFieldInOut_T_BEGIN           = 2,
	CEFieldInOut_T_END             = 3,
	CEFieldInOut_T_NIL             = 4,
	CEFieldInOut_T_MAX             = 5
};


// Enum BLGame.ABLCTypeEnum.CEDungeonEnterConditionType
enum class ECEDungeonEnterConditionType : uint8_t
{
	CEDungeonEnterCondition_T_ONEPLAYER = 0,
	CEDungeonEnterCondition_T_PARTY = 1,
	CEDungeonEnterCondition_T_RAIDGROUP = 2,
	CEDungeonEnterCondition_T_BEGIN = 3,
	CEDungeonEnterCondition_T_END  = 4,
	CEDungeonEnterCondition_T_NIL  = 5,
	CEDungeonEnterCondition_T_MAX  = 6
};


// Enum BLGame.ABLCTypeEnum.CEWorldMapType
enum class ECEWorldMapType : uint8_t
{
	CEWorldMap_T_NIL               = 0,
	CEWorldMap_T_FIELD             = 1,
	CEWorldMap_T_DUNGEON           = 2,
	CEWorldMap_T_INSTANTFIELD      = 3,
	CEWorldMap_T_PHASEFIELD        = 4,
	CEWorldMap_T_SPECIALWAR        = 5,
	CEWorldMap_T_ROFIELD           = 6,
	CEWorldMap_T_RAIDFIELD         = 7,
	CEWorldMap_T_COLOSSEUMFIELD    = 8,
	CEWorldMap_T_OCCUPATIONWAR     = 9,
	CEWorldMap_T_CHALLENGETOWER    = 10,
	CEWorldMap_T_BEGIN             = 11,
	CEWorldMap_T_END               = 12,
	CEWorldMap_T_MAX               = 13
};


// Enum BLGame.ABLCTypeEnum.CEBuffDebuffType
enum class ECEBuffDebuffType : uint8_t
{
	CEBuffDebuff_T_BUFFTYPE        = 0,
	CEBuffDebuff_T_DEBUFFTYPE      = 1,
	CEBuffDebuff_T_CC              = 2,
	CEBuffDebuff_T_SYSTEM          = 3,
	CEBuffDebuff_T_BEGIN           = 4,
	CEBuffDebuff_T_END             = 5,
	CEBuffDebuff_T_NIL             = 6,
	CEBuffDebuff_T_MAX             = 7
};


// Enum BLGame.ABLCTypeEnum.CERevivalType
enum class ECERevivalType : uint8_t
{
	CERevival_T_STANDALONE         = 0,
	CERevival_T_STANDALONEWITHOUTSPIRIT = 1,
	CERevival_T_SPIRITUALAWAKER    = 2,
	CERevival_T_SKILL              = 3,
	CERevival_T_GMCMDCHEAT         = 4,
	CERevival_T_SYSTEM             = 5,
	CERevival_T_WAR                = 6,
	CERevival_T_RO                 = 7,
	CERevival_T_CUSTOMREVIVAL      = 8,
	CERevival_T_DUNGEON            = 9,
	CERevival_T_OCCUPATIONWAR      = 10,
	CERevival_T_CHALLENGETOWER     = 11,
	CERevival_T_BEGIN              = 12,
	CERevival_T_END                = 13,
	CERevival_T_NIL                = 14,
	CERevival_T_MAX                = 15
};


// Enum BLGame.ABLCTypeEnum.CECompareOperatorType
enum class ECECompareOperatorType : uint8_t
{
	CECompareOperator_T_EQUALTO    = 0,
	CECompareOperator_T_GREATERTHAN = 1,
	CECompareOperator_T_LESSTHAN   = 2,
	CECompareOperator_T_GREATEREQUAL = 3,
	CECompareOperator_T_LESSEQUAL  = 4,
	CECompareOperator_T_BEGIN      = 5,
	CECompareOperator_T_END        = 6,
	CECompareOperator_T_NIL        = 7,
	CECompareOperator_T_MAX        = 8
};


// Enum BLGame.ABLCTypeEnum.CERiotControlType
enum class ECERiotControlType : uint8_t
{
	CERiotControl_T_NONE           = 0,
	CERiotControl_T_HITUP          = 1,
	CERiotControl_T_PUSH           = 2,
	CERiotControl_T_PUSHDOWN       = 3,
	CERiotControl_T_PULL           = 4,
	CERiotControl_T_DOWN           = 5,
	CERiotControl_T_SMASH          = 6,
	CERiotControl_T_LESSERPUSH     = 7,
	CERiotControl_T_BEGIN          = 8,
	CERiotControl_T_END            = 9,
	CERiotControl_T_NIL            = 10,
	CERiotControl_T_MAX            = 11
};


// Enum BLGame.ABLCTypeEnum.CERiotControlStateType
enum class ECERiotControlStateType : uint8_t
{
	CERiotControlState_T_NONE      = 0,
	CERiotControlState_T_BASICSTAND = 1,
	CERiotControlState_T_BEINGHITUP = 2,
	CERiotControlState_T_BEENHITUP = 3,
	CERiotControlState_T_BEINGPLUMMETED = 4,
	CERiotControlState_T_BEINGSMASHED = 5,
	CERiotControlState_T_BEINGPUSHED = 6,
	CERiotControlState_T_BEENPUSHED = 7,
	CERiotControlState_T_BEINGPULLED = 8,
	CERiotControlState_T_BEINGDOWNED = 9,
	CERiotControlState_T_BEENDOWNED = 10,
	CERiotControlState_T_GETTINGUP = 11,
	CERiotControlState_T_BEINGLESSERPUSHED = 12,
	CERiotControlState_T_BEENLESSERPUSHED = 13,
	CERiotControlState_T_BEGIN     = 14,
	CERiotControlState_T_END       = 15,
	CERiotControlState_T_NIL       = 16,
	CERiotControlState_T_MAX       = 17
};


// Enum BLGame.ABLCTypeEnum.CEAbleUnableType
enum class ECEAbleUnableType : uint8_t
{
	CEAbleUnable_T_NONE            = 0,
	CEAbleUnable_T_ABLE            = 1,
	CEAbleUnable_T_UNABLE          = 2,
	CEAbleUnable_T_PARALLEL        = 3,
	CEAbleUnable_T_BEGIN           = 4,
	CEAbleUnable_T_END             = 5,
	CEAbleUnable_T_NIL             = 6,
	CEAbleUnable_T_MAX             = 7
};


// Enum BLGame.ABLCTypeEnum.CEInvokableDistanceType
enum class ECEInvokableDistanceType : uint8_t
{
	CEInvokableDistance_T_CLOSE    = 0,
	CEInvokableDistance_T_LONG     = 1,
	CEInvokableDistance_T_TARGET_FREE = 2,
	CEInvokableDistance_T_BEGIN    = 3,
	CEInvokableDistance_T_END      = 4,
	CEInvokableDistance_T_NIL      = 5,
	CEInvokableDistance_T_MAX      = 6
};


// Enum BLGame.ABLCTypeEnum.CESelectTargetConditionType
enum class ECESelectTargetConditionType : uint8_t
{
	CESelectTargetCondition_T_NONE = 0,
	CESelectTargetCondition_T_SAMECONTENT = 1,
	CESelectTargetCondition_T_BEGIN = 2,
	CESelectTargetCondition_T_END  = 3,
	CESelectTargetCondition_T_NIL  = 4,
	CESelectTargetCondition_T_MAX  = 5
};


// Enum BLGame.ABLCTypeEnum.CESelectTargetType
enum class ECESelectTargetType : uint8_t
{
	CESelectTarget_T_SELF          = 0,
	CESelectTarget_T_TARGET        = 1,
	CESelectTarget_T_CASTER        = 2,
	CESelectTarget_T_BEGIN         = 3,
	CESelectTarget_T_END           = 4,
	CESelectTarget_T_NIL           = 5,
	CESelectTarget_T_MAX           = 6
};


// Enum BLGame.ABLCTypeEnum.CEFunctionType
enum class ECEFunctionType : uint8_t
{
	CEFunction_T_APPLY             = 0,
	CEFunction_T_REMOVE            = 1,
	CEFunction_T_BEGIN             = 2,
	CEFunction_T_END               = 3,
	CEFunction_T_NIL               = 4,
	CEFunction_T_MAX               = 5
};


// Enum BLGame.ABLCTypeEnum.CEAbnormalStatusAddType
enum class ECEAbnormalStatusAddType : uint8_t
{
	CEAbnormalStatusAdd_T_REPLACE  = 0,
	CEAbnormalStatusAdd_T_IGNORE   = 1,
	CEAbnormalStatusAdd_T_STACK    = 2,
	CEAbnormalStatusAdd_T_BEGIN    = 3,
	CEAbnormalStatusAdd_T_END      = 4,
	CEAbnormalStatusAdd_T_NIL      = 5,
	CEAbnormalStatusAdd_T_MAX      = 6
};


// Enum BLGame.ABLCTypeEnum.CEReferenceInfoType
enum class ECEReferenceInfoType : uint8_t
{
	CEReferenceInfo_T_HITAFFECTAREASHAPE = 0,
	CEReferenceInfo_T_BEGIN        = 1,
	CEReferenceInfo_T_END          = 2,
	CEReferenceInfo_T_NIL          = 3,
	CEReferenceInfo_T_MAX          = 4
};


// Enum BLGame.ABLCTypeEnum.CESkillMobilityType
enum class ECESkillMobilityType : uint8_t
{
	CESkillMobility_T_MOVECAST_ABLE_MOVEFIRING_ABLE = 0,
	CESkillMobility_T_MOVECAST_ABLE_MOVEFIRING_UNABLE = 1,
	CESkillMobility_T_MOVECAST_UNABLE_MOVEFIRING_ABLE = 2,
	CESkillMobility_T_MOVECAST_UNABLE_MOVEFIRING_UNABLE = 3,
	CESkillMobility_T_MOVECAST_NULL_MOVEFIRING_ABLE = 4,
	CESkillMobility_T_MOVECAST_NULL_MOVEFIRING_UNABLE = 5,
	CESkillMobility_T_BEGIN        = 6,
	CESkillMobility_T_END          = 7,
	CESkillMobility_T_NIL          = 8,
	CESkillMobility_T_MAX          = 9
};


// Enum BLGame.ABLCTypeEnum.CESkillChargeType
enum class ECESkillChargeType : uint8_t
{
	CESkillCharge_T_LINEAR         = 0,
	CESkillCharge_T_STAIR          = 1,
	CESkillCharge_T_BEGIN          = 2,
	CESkillCharge_T_END            = 3,
	CESkillCharge_T_NIL            = 4,
	CESkillCharge_T_MAX            = 5
};


// Enum BLGame.ABLCTypeEnum.CESkillPrepareType
enum class ECESkillPrepareType : uint8_t
{
	CESkillPrepare_T_INSTANT       = 0,
	CESkillPrepare_T_CASTING       = 1,
	CESkillPrepare_T_CHARGE        = 2,
	CESkillPrepare_T_BEGIN         = 3,
	CESkillPrepare_T_END           = 4,
	CESkillPrepare_T_NIL           = 5,
	CESkillPrepare_T_MAX           = 6
};


// Enum BLGame.ABLCTypeEnum.CESkillFiringType
enum class ECESkillFiringType : uint8_t
{
	CESkillFiring_T_SHOOTING       = 0,
	CESkillFiring_T_CHANNELING     = 1,
	CESkillFiring_T_MULTI_STRIKE   = 2,
	CESkillFiring_T_MULTI_HIT      = 3,
	CESkillFiring_T_SWITCHING      = 4,
	CESkillFiring_T_CHAIN_SHOOTING = 5,
	CESkillFiring_T_BEGIN          = 6,
	CESkillFiring_T_END            = 7,
	CESkillFiring_T_NIL            = 8,
	CESkillFiring_T_MAX            = 9
};


// Enum BLGame.ABLCTypeEnum.CESkillRushType
enum class ECESkillRushType : uint8_t
{
	CESkillRush_T_NONE             = 0,
	CESkillRush_T_NORMAL           = 1,
	CESkillRush_T_REAR_FLASH       = 2,
	CESkillRush_T_FRONT_FLASH      = 3,
	CESkillRush_T_CLOSE_FLASH      = 4,
	CESkillRush_T_POINT_FLASH      = 5,
	CESkillRush_T_BEGIN            = 6,
	CESkillRush_T_END              = 7,
	CESkillRush_T_NIL              = 8,
	CESkillRush_T_MAX              = 9
};


// Enum BLGame.ABLCTypeEnum.CESkillGradeType
enum class ECESkillGradeType : uint8_t
{
	CESkillGrade_T_NONE            = 0,
	CESkillGrade_T_POOR            = 1,
	CESkillGrade_T_COMMON          = 2,
	CESkillGrade_T_UNCOMMON        = 3,
	CESkillGrade_T_RARE            = 4,
	CESkillGrade_T_EPIC            = 5,
	CESkillGrade_T_LEGENDARY       = 6,
	CESkillGrade_T_BEGIN           = 7,
	CESkillGrade_T_END             = 8,
	CESkillGrade_T_NIL             = 9,
	CESkillGrade_T_MAX             = 10
};


// Enum BLGame.ABLCTypeEnum.CESkillCategoryType
enum class ECESkillCategoryType : uint8_t
{
	CESkillCategory_T_KEY          = 0,
	CESkillCategory_T_ACTIVE       = 1,
	CESkillCategory_T_PASSIVE      = 2,
	CESkillCategory_T_PASSIVEINVOKE = 3,
	CESkillCategory_T_CHARGEINVOKE = 4,
	CESkillCategory_T_QTE_ACTIVE   = 5,
	CESkillCategory_T_TAMING       = 6,
	CESkillCategory_T_BEGIN        = 7,
	CESkillCategory_T_END          = 8,
	CESkillCategory_T_NIL          = 9,
	CESkillCategory_T_MAX          = 10
};


// Enum BLGame.ABLCTypeEnum.CEPropStateType
enum class ECEPropStateType : uint8_t
{
	CEPropState_T_DEACTIVE         = 0,
	CEPropState_T_ACTIVE           = 1,
	CEPropState_T_INTERACTING      = 2,
	CEPropState_T_LOOTING          = 3,
	CEPropState_T_COMPLETE         = 4,
	CEPropState_T_BEGIN            = 5,
	CEPropState_T_END              = 6,
	CEPropState_T_NIL              = 7,
	CEPropState_T_MAX              = 8
};


// Enum BLGame.ABLCTypeEnum.CEPropAfterInteractStateType
enum class ECEPropAfterInteractStateType : uint8_t
{
	CEPropAfterInteractState_T_ACTIVATE = 0,
	CEPropAfterInteractState_T_DEACTIVATE = 1,
	CEPropAfterInteractState_T_DEPOSE = 2,
	CEPropAfterInteractState_T_BEGIN = 3,
	CEPropAfterInteractState_T_END = 4,
	CEPropAfterInteractState_T_NIL = 5,
	CEPropAfterInteractState_T_MAX = 6
};


// Enum BLGame.ABLCTypeEnum.CEPropInteractByType
enum class ECEPropInteractByType : uint8_t
{
	CEPropInteractBy_T_NONE        = 0,
	CEPropInteractBy_T_ACTION      = 1,
	CEPropInteractBy_T_ITEM        = 2,
	CEPropInteractBy_T_SKILL       = 3,
	CEPropInteractBy_T_MONITOR     = 4,
	CEPropInteractBy_T_BEGIN       = 5,
	CEPropInteractBy_T_END         = 6,
	CEPropInteractBy_T_NIL         = 7,
	CEPropInteractBy_T_MAX         = 8
};


// Enum BLGame.ABLCTypeEnum.CEPropInteractType
enum class ECEPropInteractType : uint8_t
{
	CEPropInteract_T_NONE          = 0,
	CEPropInteract_T_GATHER        = 1,
	CEPropInteract_T_PORTAL        = 2,
	CEPropInteract_T_SUMMON        = 3,
	CEPropInteract_T_DUNGEON       = 4,
	CEPropInteract_T_BEGIN         = 5,
	CEPropInteract_T_END           = 6,
	CEPropInteract_T_NIL           = 7,
	CEPropInteract_T_MAX           = 8
};


// Enum BLGame.ABLCTypeEnum.CEPropCategory
enum class ECEPropCategory : uint8_t
{
	CEProp_CT_NORMAL               = 0,
	CEProp_CT_AURA                 = 1,
	CEProp_CT_INTERACT             = 2,
	CEProp_CT_INTERACTUNIQUE       = 3,
	CEProp_CT_CHEST                = 4,
	CEProp_CT_GATHER_MATERIAL      = 5,
	CEProp_CT_CRAFT                = 6,
	CEProp_CT_SPAWN_CRAFT          = 7,
	CEProp_CT_BEGIN                = 8,
	CEProp_CT_END                  = 9,
	CEProp_CT_NIL                  = 10,
	CEProp_CT_MAX                  = 11
};


// Enum BLGame.ABLCTypeEnum.CEPropCreationType
enum class ECEPropCreationType : uint8_t
{
	CEPropCreation_T_DEPLOYED      = 0,
	CEPropCreation_T_SPAWN         = 1,
	CEPropCreation_T_BEGIN         = 2,
	CEPropCreation_T_END           = 3,
	CEPropCreation_T_NIL           = 4,
	CEPropCreation_T_MAX           = 5
};


// Enum BLGame.ABLCTypeEnum.CEActorEventType
enum class ECEActorEventType : uint8_t
{
	CEActorEvent_T_NULL            = 0,
	CEActorEvent_T_HPDEC           = 1,
	CEActorEvent_T_HPINC           = 2,
	CEActorEvent_T_MPINC           = 3,
	CEActorEvent_T_MPDEC           = 4,
	CEActorEvent_T_BEGIN           = 5,
	CEActorEvent_T_END             = 6,
	CEActorEvent_T_NIL             = 7,
	CEActorEvent_T_MAX             = 8
};


// Enum BLGame.ABLCTypeEnum.CEActorEventDelivererType
enum class ECEActorEventDelivererType : uint8_t
{
	CEActorEventDeliverer_T_NULL   = 0,
	CEActorEventDeliverer_T_SELF   = 1,
	CEActorEventDeliverer_T_INVOKER = 2,
	CEActorEventDeliverer_T_BEGIN  = 3,
	CEActorEventDeliverer_T_END    = 4,
	CEActorEventDeliverer_T_NIL    = 5,
	CEActorEventDeliverer_T_MAX    = 6
};


// Enum BLGame.ABLCTypeEnum.CERelationshipType
enum class ECERelationshipType : uint8_t
{
	CERelationship_T_NULL          = 0,
	CERelationship_T_FRIENDLY      = 1,
	CERelationship_T_FRIENDLYEXCEPTME = 2,
	CERelationship_T_HOSTILE       = 3,
	CERelationship_T_PARTY         = 4,
	CERelationship_T_ALL           = 5,
	CERelationship_T_ALLEXCEPTME   = 6,
	CERelationship_T_PARTYEXCEPTME = 7,
	CERelationship_T_HOSTILEANDME  = 8,
	CERelationship_T_RAID          = 9,
	CERelationship_T_RAIDEXCEPTME  = 10,
	CERelationship_T_RAIDORPARTY   = 11,
	CERelationship_T_RAIDORPARTYEXCEPTME = 12,
	CERelationship_T_BEGIN         = 13,
	CERelationship_T_END           = 14,
	CERelationship_T_NIL           = 15,
	CERelationship_T_MAX           = 16
};


// Enum BLGame.ABLCTypeEnum.CECombatElementComponentStateType
enum class ECECombatElementComponentStateType : uint8_t
{
	CECombatElementComponentState_T_ALWAYS = 0,
	CECombatElementComponentState_T_PEACE = 1,
	CECombatElementComponentState_T_COMBAT = 2,
	CECombatElementComponentState_T_BERSERKFRENZY = 3,
	CECombatElementComponentState_T_BERSERKDEVOTION = 4,
	CECombatElementComponentState_T_FIGHT_CONSUME_A = 5,
	CECombatElementComponentState_T_FIGHT_CONSUME_B = 6,
	CECombatElementComponentState_T_FIGHT_CONSUME_C = 7,
	CECombatElementComponentState_T_BEGIN = 8,
	CECombatElementComponentState_T_END = 9,
	CECombatElementComponentState_T_NIL = 10,
	CECombatElementComponentState_T_MAX = 11
};


// Enum BLGame.ABLCTypeEnum.CECombatElementStorageType
enum class ECECombatElementStorageType : uint8_t
{
	CECombatElementStorage_T_FIXED = 0,
	CECombatElementStorage_T_QUEUE = 1,
	CECombatElementStorage_T_GAUGE = 2,
	CECombatElementStorage_T_SWITCH = 3,
	CECombatElementStorage_T_BEGIN = 4,
	CECombatElementStorage_T_END   = 5,
	CECombatElementStorage_T_NIL   = 6,
	CECombatElementStorage_T_MAX   = 7
};


// Enum BLGame.ABLCTypeEnum.CECombatElementType
enum class ECECombatElementType : uint8_t
{
	CECombatElement_T_FIRE         = 0,
	CECombatElement_T_ICE          = 1,
	CECombatElement_T_AIR          = 2,
	CECombatElement_T_THUNDER      = 3,
	CECombatElement_T_INCISED      = 4,
	CECombatElement_T_PUNCTURED    = 5,
	CECombatElement_T_BRUISED      = 6,
	CECombatElement_T_VIGOR        = 7,
	CECombatElement_T_ENERGYSPHERE = 8,
	CECombatElement_T_SNIPE        = 9,
	CECombatElement_T_SHOT         = 10,
	CECombatElement_T_ANY          = 11,
	CECombatElement_T_ADRENALINE   = 12,
	CECombatElement_T_RANGERFOCUS  = 13,
	CECombatElement_T_FIGHT        = 14,
	CECombatElement_T_VALOR        = 15,
	CECombatElement_T_MARKOFDEATH  = 16,
	CECombatElement_T_ENERGY       = 17,
	CECombatElement_T_BEGIN        = 18,
	CECombatElement_T_END          = 19,
	CECombatElement_T_NIL          = 20,
	CECombatElement_T_MAX          = 21
};


// Enum BLGame.ABLCTypeEnum.CEAbnormalStatusOverlapType
enum class ECEAbnormalStatusOverlapType : uint8_t
{
	CEAbnormalStatusOverlap_T_NONE = 0,
	CEAbnormalStatusOverlap_T_GROWTH = 1,
	CEAbnormalStatusOverlap_T_FOCUS = 2,
	CEAbnormalStatusOverlap_T_SWIFTNESS = 3,
	CEAbnormalStatusOverlap_T_CURE = 4,
	CEAbnormalStatusOverlap_T_PROTECTION = 5,
	CEAbnormalStatusOverlap_T_PAIN = 6,
	CEAbnormalStatusOverlap_T_ANXIETY = 7,
	CEAbnormalStatusOverlap_T_WEAKNESS = 8,
	CEAbnormalStatusOverlap_T_AGONY = 9,
	CEAbnormalStatusOverlap_T_WOUND = 10,
	CEAbnormalStatusOverlap_T_BLEEDING = 11,
	CEAbnormalStatusOverlap_T_POISON = 12,
	CEAbnormalStatusOverlap_T_BURNING = 13,
	CEAbnormalStatusOverlap_T_CURSE = 14,
	CEAbnormalStatusOverlap_T_SLOW = 15,
	CEAbnormalStatusOverlap_T_SNARE = 16,
	CEAbnormalStatusOverlap_T_SILENCE = 17,
	CEAbnormalStatusOverlap_T_STUN = 18,
	CEAbnormalStatusOverlap_T_FEAR = 19,
	CEAbnormalStatusOverlap_T_TAUNT = 20,
	CEAbnormalStatusOverlap_T_BLIND = 21,
	CEAbnormalStatusOverlap_T_MEZ  = 22,
	CEAbnormalStatusOverlap_T_INCMOVESPEED = 23,
	CEAbnormalStatusOverlap_T_DECMOVESPEED = 24,
	CEAbnormalStatusOverlap_T_INCRECVHEAL = 25,
	CEAbnormalStatusOverlap_T_DECRECVHEAL = 26,
	CEAbnormalStatusOverlap_T_INCDAMAGE = 27,
	CEAbnormalStatusOverlap_T_INCATKPOWER = 28,
	CEAbnormalStatusOverlap_T_HOT  = 29,
	CEAbnormalStatusOverlap_T_DECATKSPEED = 30,
	CEAbnormalStatusOverlap_T_BATTLEWEAPON_01 = 31,
	CEAbnormalStatusOverlap_T_BATTLEWEAPON_02 = 32,
	CEAbnormalStatusOverlap_T_BATTLEWEAPON_03 = 33,
	CEAbnormalStatusOverlap_T_BATTLEWEAPON_04 = 34,
	CEAbnormalStatusOverlap_T_BATTLEWEAPON_05 = 35,
	CEAbnormalStatusOverlap_T_BATTLEWEAPON_06 = 36,
	CEAbnormalStatusOverlap_T_BATTLEWEAPON_07 = 37,
	CEAbnormalStatusOverlap_T_FOOD_01 = 38,
	CEAbnormalStatusOverlap_T_FOOD_02 = 39,
	CEAbnormalStatusOverlap_T_FOOD_03 = 40,
	CEAbnormalStatusOverlap_T_COMMON_01 = 41,
	CEAbnormalStatusOverlap_T_COMMON_02 = 42,
	CEAbnormalStatusOverlap_T_COMMON_03 = 43,
	CEAbnormalStatusOverlap_T_COMMON_04 = 44,
	CEAbnormalStatusOverlap_T_COMMON_05 = 45,
	CEAbnormalStatusOverlap_T_COMMON_06 = 46,
	CEAbnormalStatusOverlap_T_COMMON_07 = 47,
	CEAbnormalStatusOverlap_T_COMMON_08 = 48,
	CEAbnormalStatusOverlap_T_COMMON_09 = 49,
	CEAbnormalStatusOverlap_T_COMMON = 50,
	CEAbnormalStatusOverlap_T_COMMON01 = 51,
	CEAbnormalStatusOverlap_T_COMMON02 = 52,
	CEAbnormalStatusOverlap_T_COMMON03 = 53,
	CEAbnormalStatusOverlap_T_COMMON04 = 54,
	CEAbnormalStatusOverlap_T_COMMON05 = 55,
	CEAbnormalStatusOverlap_T_COMMON06 = 56,
	CEAbnormalStatusOverlap_T_COMMON07 = 57,
	CEAbnormalStatusOverlap_T_COMMON08 = 58,
	CEAbnormalStatusOverlap_T_COMMON09 = 59,
	CEAbnormalStatusOverlap_T_COMMON10 = 60,
	CEAbnormalStatusOverlap_T_COMMON11 = 61,
	CEAbnormalStatusOverlap_T_COMMON12 = 62,
	CEAbnormalStatusOverlap_T_COMMON13 = 63,
	CEAbnormalStatusOverlap_T_COMMON14 = 64,
	CEAbnormalStatusOverlap_T_COMMON15 = 65,
	CEAbnormalStatusOverlap_T_COMMON16 = 66,
	CEAbnormalStatusOverlap_T_COMMON17 = 67,
	CEAbnormalStatusOverlap_T_COMMON18 = 68,
	CEAbnormalStatusOverlap_T_COMMON19 = 69,
	CEAbnormalStatusOverlap_T_COMMON20 = 70,
	CEAbnormalStatusOverlap_T_BEGIN = 71,
	CEAbnormalStatusOverlap_T_END  = 72,
	CEAbnormalStatusOverlap_T_NIL  = 73,
	CEAbnormalStatusOverlap_T_MAX  = 74
};


// Enum BLGame.ABLCTypeEnum.CEParamChangeOvertimeFunctionType
enum class ECEParamChangeOvertimeFunctionType : uint8_t
{
	CEParamChangeOvertimeFunction_T_LINEAR = 0,
	CEParamChangeOvertimeFunction_T_CONVEX = 1,
	CEParamChangeOvertimeFunction_T_CONCAVE = 2,
	CEParamChangeOvertimeFunction_T_BEGIN = 3,
	CEParamChangeOvertimeFunction_T_END = 4,
	CEParamChangeOvertimeFunction_T_NIL = 5,
	CEParamChangeOvertimeFunction_T_MAX = 6
};


// Enum BLGame.ABLCTypeEnum.CEParamChangeOvertimePeriodType
enum class ECEParamChangeOvertimePeriodType : uint8_t
{
	CEParamChangeOvertimePeriod_T_INC = 0,
	CEParamChangeOvertimePeriod_T_DEC = 1,
	CEParamChangeOvertimePeriod_T_BEGIN = 2,
	CEParamChangeOvertimePeriod_T_END = 3,
	CEParamChangeOvertimePeriod_T_NIL = 4,
	CEParamChangeOvertimePeriod_T_MAX = 5
};


// Enum BLGame.ABLCTypeEnum.CEParamChangeReferenceType
enum class ECEParamChangeReferenceType : uint8_t
{
	CEParamChangeReference_T_SELF  = 0,
	CEParamChangeReference_T_TARGET = 1,
	CEParamChangeReference_T_CASTER = 2,
	CEParamChangeReference_T_BEGIN = 3,
	CEParamChangeReference_T_END   = 4,
	CEParamChangeReference_T_NIL   = 5,
	CEParamChangeReference_T_MAX   = 6
};


// Enum BLGame.ABLCTypeEnum.CEParamChangeType
enum class ECEParamChangeType : uint8_t
{
	CEParamChange_T_INC            = 0,
	CEParamChange_T_DEC            = 1,
	CEParamChange_T_PERCENT_INC    = 2,
	CEParamChange_T_PERCENT_DEC    = 3,
	CEParamChange_T_BEGIN          = 4,
	CEParamChange_T_END            = 5,
	CEParamChange_T_NIL            = 6,
	CEParamChange_T_MAX            = 7
};


// Enum BLGame.ABLCTypeEnum.CEParamType
enum class ECEParamType : uint8_t
{
	CEParam_T_NONE                 = 0,
	CEParam_T_RUN_FORWARD_SPEED    = 1,
	CEParam_T_RUN_BACKWARD_SPEED   = 2,
	CEParam_T_WALK_FORWARD_SPEED   = 3,
	CEParam_T_WALK_BACKWARD_SPEED  = 4,
	CEParam_T_FULL_RUN_FORWARD_SPEED = 5,
	CEParam_T_JUMP_ABILITY         = 6,
	CEParam_T_MAX_STEP_HEIGHT      = 7,
	CEParam_T_STAMINA              = 8,
	CEParam_T_STRENGTH             = 9,
	CEParam_T_AGILITY              = 10,
	CEParam_T_INTELLIGENCE         = 11,
	CEParam_T_WISDOM               = 12,
	CEParam_T_TECHNIQUE            = 13,
	CEParam_T_BALANCE              = 14,
	CEParam_T_QUICKNESS            = 15,
	CEParam_T_ARMOR                = 16,
	CEParam_T_SPELL_ARMOR          = 17,
	CEParam_T_ATTACK_POWER         = 18,
	CEParam_T_SPELL_POWER          = 19,
	CEParam_T_MAIN_WEAPON_MIN_DAMAGE = 20,
	CEParam_T_MAIN_WEAPON_MAX_DAMAGE = 21,
	CEParam_T_MAIN_WEAPON_ATTACK_PERIOD = 22,
	CEParam_T_WEAPON_SPELL_DAMAGE_MIN = 23,
	CEParam_T_WEAPON_SPELL_DAMAGE_MAX = 24,
	CEParam_T_HIT_RATING           = 25,
	CEParam_T_DODGE_RATING         = 26,
	CEParam_T_PARRY_RATING         = 27,
	CEParam_T_BLOCK_RATING         = 28,
	CEParam_T_BLOCK_REDUCE_RATING  = 29,
	CEParam_T_CRITICAL_RATING      = 30,
	CEParam_T_CRITICAL_POWER       = 31,
	CEParam_T_RESIST_RATING        = 32,
	CEParam_T_RC_RESIST_RATING     = 33,
	CEParam_T_HASTE_RATING         = 34,
	CEParam_T_HIT_CHANCE           = 35,
	CEParam_T_SPELL_HIT_CHANCE     = 36,
	CEParam_T_DODGE_CHANCE         = 37,
	CEParam_T_PARRY_CHANCE         = 38,
	CEParam_T_PARRY_AMOUNT         = 39,
	CEParam_T_BLOCK_CHANCE         = 40,
	CEParam_T_BLOCK_REDUCE         = 41,
	CEParam_T_SPELL_RESIST_CHANCE  = 42,
	CEParam_T_RC_RESIST_CHANCE     = 43,
	CEParam_T_CRITICAL_CHANCE      = 44,
	CEParam_T_CRITICAL_MODIFIER    = 45,
	CEParam_T_SPELL_CRITICAL_CHANCE = 46,
	CEParam_T_ARMOR_REDUCE         = 47,
	CEParam_T_SPELL_ARMOR_REDUCE   = 48,
	CEParam_T_HASTE                = 49,
	CEParam_T_AUTO_ATTACK_PERIOD   = 50,
	CEParam_T_MAX_HP               = 51,
	CEParam_T_HP_REGEN             = 52,
	CEParam_T_COST_TYPE            = 53,
	CEParam_T_MAX_COST             = 54,
	CEParam_T_COST_REGEN           = 55,
	CEParam_T_DEAL_AMPLIFICATION   = 56,
	CEParam_T_HEAL_AMPLIFICATION   = 57,
	CEParam_T_RECEIVE_DEAL_AMPLIFICATION = 58,
	CEParam_T_RECEIVE_HEAL_AMPLIFICATION = 59,
	CEParam_T_AGGRO_AMPLIFICATION  = 60,
	CEParam_T_HP                   = 61,
	CEParam_T_COST                 = 62,
	CEParam_T_ENERGY               = 63,
	CEParam_T_MAX_ENERGY           = 64,
	CEParam_T_SPRINT_COST          = 65,
	CEParam_T_ENERGY_REGEN         = 66,
	CEParam_T_RADIUS               = 67,
	CEParam_T_HALF_HEIGHT          = 68,
	CEParam_T_SWIM_FORWARD_SPEED   = 69,
	CEParam_T_SWIM_BACKWARD_SPEED  = 70,
	CEParam_T_PUSH_BLOCK_AMOUNT    = 71,
	CEParam_T_PHYSICAL_DEAL_AMPLIFICATION = 72,
	CEParam_T_MAGICAL_DEAL_AMPLIFICATION = 73,
	CEParam_T_RECEIVE_PHYSICAL_DEAL_AMPLIFICATION = 74,
	CEParam_T_RECEIVE_MAGICAL_DEAL_AMPLIFICATION = 75,
	CEParam_T_HILL_CLIMBING_ABILITY = 76,
	CEParam_T_FLYING_FORWARD_SPEED = 77,
	CEParam_T_FLYING_BACKWARD_SPEED = 78,
	CEParam_T_MELEE_DEAL_AMPLIFICATION = 79,
	CEParam_T_RANGE_DEAL_AMPLIFICATION = 80,
	CEParam_T_SPELL_DEAL_AMPLIFICATION = 81,
	CEParam_T_RECEIVE_MELEE_DEAL_AMPLIFICATION = 82,
	CEParam_T_RECEIVE_RANGE_DEAL_AMPLIFICATION = 83,
	CEParam_T_RECEIVE_SPELL_DEAL_AMPLIFICATION = 84,
	CEParam_T_DEAL_AMP_BY_BACKATTACK = 85,
	CEParam_T_RECEIVE_DEAL_AMP_BY_BACKATTACK = 86,
	CEParam_T_PVE_EXP_COEFFICIENT  = 87,
	CEParam_T_PVP_EXP_COEFFICIENT  = 88,
	CEParam_T_PVE_GOLD_DROP_COEFFICIENT = 89,
	CEParam_T_BP_COEFFICIENT       = 90,
	CEParam_T_CP_COEFFICIENT       = 91,
	CEParam_T_DP_COEFFICIENT       = 92,
	CEParam_T_GUILD_INFLUENCE_COEFFICIENT = 93,
	CEParam_T_SPIRIT_RUN_FORWARD_SPEED = 94,
	CEParam_T_SPIRIT_RUN_BACKWARD_SPEED = 95,
	CEParam_T_GATHER_TIME_MODIFIER = 96,
	CEParam_T_GATHER_EXP_MODIFIER  = 97,
	CEParam_T_CRAFT_TIME_MODIFIER  = 98,
	CEParam_T_CRAFT_EXP_MODIFIER   = 99,
	CEParam_T_WAYPOINT_PRICE       = 100,
	CEParam_T_PVP_DEAL_AMPLIFICATION = 101,
	CEParam_T_PVP_RECEIVE_DEAL_AMPLIFICATION = 102,
	CEParam_T_MOUNT_EXP_COEFFICIENT = 103,
	CEParam_T_PET_EXP_COEFFICIENT  = 104,
	CEParam_T_SMITH_TIME_MODIFIER  = 105,
	CEParam_T_HANDIWORK_TIME_MODIFIER = 106,
	CEParam_T_SMELT_TIME_MODIFIER  = 107,
	CEParam_T_COOK_TIME_MODIFIER   = 108,
	CEParam_T_ALCHEMY_TIME_MODIFIER = 109,
	CEParam_T_SMITH_EXP_MODIFIER   = 110,
	CEParam_T_HANDIWORK_EXP_MODIFIER = 111,
	CEParam_T_SMELT_EXP_MODIFIER   = 112,
	CEParam_T_COOK_EXP_MODIFIER    = 113,
	CEParam_T_ALCHEMY_EXP_MODIFIER = 114,
	CEParam_T_GATHER_PLANTS_TIME_MODIFIER = 115,
	CEParam_T_MINING_TIME_MODIFIER = 116,
	CEParam_T_GATHER_PLANTS_EXP_MODIFIER = 117,
	CEParam_T_MINING_EXP_MODIFIER  = 118,
	CEParam_T_REPAIR_COST_MODIFIER = 119,
	CEParam_T_MOUNT_FATIGUE_CONSUME = 120,
	CEParam_T_PET_FATIGUE_CONSUME  = 121,
	CEParam_T_FELLOW_FATIGUE_CONSUME = 122,
	CEParam_T_FELLOW_EXP_COEFFICIENT = 123,
	CEParam_T_BEGIN                = 124,
	CEParam_T_END                  = 125,
	CEParam_T_NIL                  = 126,
	CEParam_T_MAX                  = 127
};


// Enum BLGame.ABLCTypeEnum.CEItemBondingType
enum class ECEItemBondingType : uint8_t
{
	CEItemBonding_T_NONE           = 0,
	CEItemBonding_T_ONGET          = 1,
	CEItemBonding_T_ONEQUIP        = 2,
	CEItemBonding_T_BEGIN          = 3,
	CEItemBonding_T_END            = 4,
	CEItemBonding_T_NIL            = 5,
	CEItemBonding_T_MAX            = 6
};


// Enum BLGame.ABLCTypeEnum.CEItemGradeType
enum class ECEItemGradeType : uint8_t
{
	CEItemGrade_T_NONE             = 0,
	CEItemGrade_T_POOR             = 1,
	CEItemGrade_T_COMMON           = 2,
	CEItemGrade_T_UNCOMMON         = 3,
	CEItemGrade_T_RARE             = 4,
	CEItemGrade_T_EPIC             = 5,
	CEItemGrade_T_LEGENDARY        = 6,
	CEItemGrade_T_LUMENA           = 7,
	CEItemGrade_T_BEGIN            = 8,
	CEItemGrade_T_END              = 9,
	CEItemGrade_T_NIL              = 10,
	CEItemGrade_T_MAX              = 11
};


// Enum BLGame.ABLCTypeEnum.CEEquipLayerType
enum class ECEEquipLayerType : uint8_t
{
	CEEquipLayer_T_NONE            = 0,
	CEEquipLayer_T_CUSTOMIZING     = 1,
	CEEquipLayer_T_EQUIP           = 2,
	CEEquipLayer_T_COSTUME         = 3,
	CEEquipLayer_T_BEGIN           = 4,
	CEEquipLayer_T_END             = 5,
	CEEquipLayer_T_NIL             = 6,
	CEEquipLayer_T_MAX             = 7
};


// Enum BLGame.ABLCTypeEnum.CEItemRepairType
enum class ECEItemRepairType : uint8_t
{
	CEItemRepair_T_SMITH           = 0,
	CEItemRepair_T_USEKIT          = 1,
	CEItemRepair_T_BEGIN           = 2,
	CEItemRepair_T_END             = 3,
	CEItemRepair_T_NIL             = 4,
	CEItemRepair_T_MAX             = 5
};


// Enum BLGame.ABLCTypeEnum.CECompanionSlotType
enum class ECECompanionSlotType : uint8_t
{
	CECompanionSlot_T_NONE         = 0,
	CECompanionSlot_T_FOSTER_EXPUP_SLOT = 1,
	CECompanionSlot_T_FOSTER_GRADEUP_PROTECT_SLOT_UNCOMMON = 2,
	CECompanionSlot_T_FOSTER_GRADEUP_PROTECT_SLOT_RARE = 3,
	CECompanionSlot_T_FOSTER_GRADEUP_PROTECT_SLOT_EPIC = 4,
	CECompanionSlot_T_FOSTER_GRADEUP_INCREASE_RATE_SLOT_UNCOMMON = 5,
	CECompanionSlot_T_FOSTER_GRADEUP_INCREASE_RATE_SLOT_RARE = 6,
	CECompanionSlot_T_FOSTER_GRADEUP_INCREASE_RATE_SLOT_EPIC = 7,
	CECompanionSlot_T_GRADEUP_SKILL_CHANGE_ITEM_SLOT_01 = 8,
	CECompanionSlot_T_GRADEUP_SKILL_CHANGE_ITEM_SLOT_02 = 9,
	CECompanionSlot_T_GRADEUP_SKILL_CHANGE_ITEM_SLOT_03 = 10,
	CECompanionSlot_T_GRADE_UP_COUNT_ADD_SLOT_01 = 11,
	CECompanionSlot_T_GRADE_UP_COUNT_ADD_SLOT_02 = 12,
	CECompanionSlot_T_GRADE_UP_COUNT_ADD_SLOT_03 = 13,
	CECompanionSlot_T_MOUNT_RESTOREFATIGUE_SLOT_01 = 14,
	CECompanionSlot_T_MOUNT_RESTOREFATIGUE_SLOT_02 = 15,
	CECompanionSlot_T_MOUNT_RESTOREFATIGUE_SLOT_03 = 16,
	CECompanionSlot_T_PET_RESTOREFATIGUE_SLOT_01 = 17,
	CECompanionSlot_T_PET_RESTOREFATIGUE_SLOT_02 = 18,
	CECompanionSlot_T_PET_RESTOREFATIGUE_SLOT_03 = 19,
	CECompanionSlot_T_PET_MPF_CAPSULE_SLOT_UNCOMMON = 20,
	CECompanionSlot_T_PET_MPF_CAPSULE_SLOT_RARE = 21,
	CECompanionSlot_T_PET_MPF_CAPSULE_SLOT_EPIC = 22,
	CECompanionSlot_T_PET_MPF_CAPSULE_SLOT_LEGENDARY = 23,
	CECompanionSlot_T_MOUNT_MPF_CAPSULE_SLOT_UNCOMMON = 24,
	CECompanionSlot_T_MOUNT_MPF_CAPSULE_SLOT_RARE = 25,
	CECompanionSlot_T_MOUNT_MPF_CAPSULE_SLOT_EPIC = 26,
	CECompanionSlot_T_MOUNT_MPF_CAPSULE_SLOT_LEGENDARY = 27,
	CECompanionSlot_T_ALL_SKILL_CHANGE_ITEM_SLOT = 28,
	CECompanionSlot_T_FELLOW_RESTOREFATIGUE_SLOT_01 = 29,
	CECompanionSlot_T_FELLOW_RESTOREFATIGUE_SLOT_02 = 30,
	CECompanionSlot_T_FELLOW_RESTOREFATIGUE_SLOT_03 = 31,
	CECompanionSlot_T_FELLOW_MPF_CAPSULE_SLOT_UNCOMMON = 32,
	CECompanionSlot_T_FELLOW_MPF_CAPSULE_SLOT_RARE = 33,
	CECompanionSlot_T_FELLOW_MPF_CAPSULE_SLOT_EPIC = 34,
	CECompanionSlot_T_FELLOW_MPF_CAPSULE_SLOT_LEGENDARY = 35,
	CECompanionSlot_T_BEGIN        = 36,
	CECompanionSlot_T_END          = 37,
	CECompanionSlot_T_NIL          = 38,
	CECompanionSlot_T_MAX          = 39
};


// Enum BLGame.ABLCTypeEnum.CEItemEquipSlotType
enum class ECEItemEquipSlotType : uint8_t
{
	CEItemEquipSlot_T_NONE         = 0,
	CEItemEquipSlot_T_OFF_HAND     = 1,
	CEItemEquipSlot_T_ONE_HAND     = 2,
	CEItemEquipSlot_T_BOTH_HAND    = 3,
	CEItemEquipSlot_T_FULLBODY     = 4,
	CEItemEquipSlot_T_HEAD         = 5,
	CEItemEquipSlot_T_CHEST        = 6,
	CEItemEquipSlot_T_BELT         = 7,
	CEItemEquipSlot_T_LEGGING      = 8,
	CEItemEquipSlot_T_BOOTS        = 9,
	CEItemEquipSlot_T_SHOULDER     = 10,
	CEItemEquipSlot_T_GLOVE        = 11,
	CEItemEquipSlot_T_CLOAK        = 12,
	CEItemEquipSlot_T_UNDERWEAR    = 13,
	CEItemEquipSlot_T_NECKLACE     = 14,
	CEItemEquipSlot_T_RING         = 15,
	CEItemEquipSlot_T_ONE_HAND_COSTUME = 16,
	CEItemEquipSlot_T_OFF_HAND_COSTUME = 17,
	CEItemEquipSlot_T_BOTH_HAND_COSTUME = 18,
	CEItemEquipSlot_T_HEAD_COSTUME = 19,
	CEItemEquipSlot_T_CHEST_COSTUME = 20,
	CEItemEquipSlot_T_SHOULDER_COSTUME = 21,
	CEItemEquipSlot_T_BELT_COSTUME = 22,
	CEItemEquipSlot_T_GLOVE_COSTUME = 23,
	CEItemEquipSlot_T_LEGGING_COSTUME = 24,
	CEItemEquipSlot_T_BOOTS_COSTUME = 25,
	CEItemEquipSlot_T_ONE_PIECE_COSTUME = 26,
	CEItemEquipSlot_T_TWO_PIECE_COSTUME = 27,
	CEItemEquipSlot_T_THREE_PIECE_COSTUME_CHEST = 28,
	CEItemEquipSlot_T_THREE_PIECE_COSTUME_LEGGING = 29,
	CEItemEquipSlot_T_MOUNT_GROUND_COSTUME_SLOT = 30,
	CEItemEquipSlot_T_MOUNT_AIR_COSTUME_SLOT = 31,
	CEItemEquipSlot_T_PET_COSTUME_SLOT = 32,
	CEItemEquipSlot_T_BRACELET     = 33,
	CEItemEquipSlot_T_BEGIN        = 34,
	CEItemEquipSlot_T_END          = 35,
	CEItemEquipSlot_T_NIL          = 36,
	CEItemEquipSlot_T_MAX          = 37
};


// Enum BLGame.ABLCTypeEnum.CEItemCusomizingEquipCategory
enum class ECEItemCusomizingEquipCategory : uint8_t
{
	CEItemCusomizingEquip_CT_NONE  = 0,
	CEItemCusomizingEquip_CT_HAIR  = 1,
	CEItemCusomizingEquip_CT_EYESHADOW = 2,
	CEItemCusomizingEquip_CT_EYELINER = 3,
	CEItemCusomizingEquip_CT_EYELASHES = 4,
	CEItemCusomizingEquip_CT_LENS  = 5,
	CEItemCusomizingEquip_CT_LIPSTIC = 6,
	CEItemCusomizingEquip_CT_LIPGLOSS = 7,
	CEItemCusomizingEquip_CT_BLUSHER = 8,
	CEItemCusomizingEquip_CT_HIGHLIGHTER = 9,
	CEItemCusomizingEquip_CT_MOLE  = 10,
	CEItemCusomizingEquip_CT_FACETATTOO = 11,
	CEItemCusomizingEquip_CT_BODYTATTOO = 12,
	CEItemCusomizingEquip_CT_STAMP = 13,
	CEItemCusomizingEquip_CT_FRECKLE = 14,
	CEItemCusomizingEquip_CT_BEARD = 15,
	CEItemCusomizingEquip_CT_SCAR  = 16,
	CEItemCusomizingEquip_CT_WRINKLE = 17,
	CEItemCusomizingEquip_CT_TAIL  = 18,
	CEItemCusomizingEquip_CT_BEGIN = 19,
	CEItemCusomizingEquip_CT_END   = 20,
	CEItemCusomizingEquip_CT_NIL   = 21,
	CEItemCusomizingEquip_CT_MAX   = 22
};


// Enum BLGame.ABLCTypeEnum.CEItemEquipCategory
enum class ECEItemEquipCategory : uint8_t
{
	CEItemEquip_CT_NONE            = 0,
	CEItemEquip_CT_WP_1H_DAGGER    = 1,
	CEItemEquip_CT_WP_1H_SWORD     = 2,
	CEItemEquip_CT_WP_1H_MACE      = 3,
	CEItemEquip_CT_WP_1H_AXE       = 4,
	CEItemEquip_CT_WP_2H_BOW       = 5,
	CEItemEquip_CT_WP_2H_SWORD     = 6,
	CEItemEquip_CT_WP_2H_MACE      = 7,
	CEItemEquip_CT_WP_2H_AXE       = 8,
	CEItemEquip_CT_WP_2H_STAFF     = 9,
	CEItemEquip_CT_WP_2H_SCYTHE    = 10,
	CEItemEquip_CT_WP_2H_ORB       = 11,
	CEItemEquip_CT_WP_1H_SHIELD    = 12,
	CEItemEquip_CT_AR_MASSIVE_HELMET = 13,
	CEItemEquip_CT_AR_HEAVY_HELMET = 14,
	CEItemEquip_CT_AR_MEDIUM_HELMET = 15,
	CEItemEquip_CT_AR_LIGHT_HELMET = 16,
	CEItemEquip_CT_AR_ROBE_HELMET  = 17,
	CEItemEquip_CT_AR_MASSIVE_UPPER = 18,
	CEItemEquip_CT_AR_HEAVY_UPPER  = 19,
	CEItemEquip_CT_AR_MEDIUM_UPPER = 20,
	CEItemEquip_CT_AR_LIGHT_UPPER  = 21,
	CEItemEquip_CT_AR_ROBE_UPPER   = 22,
	CEItemEquip_CT_AR_MASSIVE_LOWER = 23,
	CEItemEquip_CT_AR_HEAVY_LOWER  = 24,
	CEItemEquip_CT_AR_MEDIUM_LOWER = 25,
	CEItemEquip_CT_AR_LIGHT_LOWER  = 26,
	CEItemEquip_CT_AR_ROBE_LOWER   = 27,
	CEItemEquip_CT_AR_MASSIVE_GLOVE = 28,
	CEItemEquip_CT_AR_HEAVY_GLOVE  = 29,
	CEItemEquip_CT_AR_MEDIUM_GLOVE = 30,
	CEItemEquip_CT_AR_LIGHT_GLOVE  = 31,
	CEItemEquip_CT_AR_ROBE_GLOVE   = 32,
	CEItemEquip_CT_AR_MASSIVE_BOOTS = 33,
	CEItemEquip_CT_AR_HEAVY_BOOTS  = 34,
	CEItemEquip_CT_AR_MEDIUM_BOOTS = 35,
	CEItemEquip_CT_AR_LIGHT_BOOTS  = 36,
	CEItemEquip_CT_AR_ROBE_BOOTS   = 37,
	CEItemEquip_CT_AR_MASSIVE_SHOULDER = 38,
	CEItemEquip_CT_AR_HEAVY_SHOULDER = 39,
	CEItemEquip_CT_AR_MEDIUM_SHOULDER = 40,
	CEItemEquip_CT_AR_LIGHT_SHOULDER = 41,
	CEItemEquip_CT_AR_ROBE_SHOULDER = 42,
	CEItemEquip_CT_AR_MASSIVE_BELT = 43,
	CEItemEquip_CT_AR_HEAVY_BELT   = 44,
	CEItemEquip_CT_AR_MEDIUM_BELT  = 45,
	CEItemEquip_CT_AR_LIGHT_BELT   = 46,
	CEItemEquip_CT_AR_ROBE_BELT    = 47,
	CEItemEquip_CT_EE_ETC_CLOAK    = 48,
	CEItemEquip_CT_EE_ETC_UNDERWEAR = 49,
	CEItemEquip_CT_EE_ETC_NECKLACE = 50,
	CEItemEquip_CT_EE_ETC_RING     = 51,
	CEItemEquip_CT_EE_ETC_BRACELET = 52,
	CEItemEquip_CT_EI_ETC_NONE     = 53,
	CEItemEquip_CT_WP_1H_HAMMER    = 54,
	CEItemEquip_CT_WP_2H_HAMMER    = 55,
	CEItemEquip_CT_WP_2H_CROSSBOW  = 56,
	CEItemEquip_CT_WP_2H_WAND      = 57,
	CEItemEquip_CT_WP_1H_DAGGER_COSTUME = 58,
	CEItemEquip_CT_WP_1H_SWORD_COSTUME = 59,
	CEItemEquip_CT_WP_1H_MACE_COSTUME = 60,
	CEItemEquip_CT_WP_1H_AXE_COSTUME = 61,
	CEItemEquip_CT_WP_1H_HAMMER_COSTUME = 62,
	CEItemEquip_CT_WP_2H_BOW_COSTUME = 63,
	CEItemEquip_CT_WP_2H_SWORD_COSTUME = 64,
	CEItemEquip_CT_WP_2H_MACE_COSTUME = 65,
	CEItemEquip_CT_WP_2H_AXE_COSTUME = 66,
	CEItemEquip_CT_WP_2H_HAMMER_COSTUME = 67,
	CEItemEquip_CT_WP_2H_STAFF_COSTUME = 68,
	CEItemEquip_CT_WP_2H_SCYTHE_COSTUME = 69,
	CEItemEquip_CT_WP_2H_ORB_COSTUME = 70,
	CEItemEquip_CT_WP_2H_CROSSBOW_COSTUME = 71,
	CEItemEquip_CT_WP_2H_WAND_COSTUME = 72,
	CEItemEquip_CT_WP_1H_SHIELD_COSTUME = 73,
	CEItemEquip_CT_AR_HELMET_COSTUME = 74,
	CEItemEquip_CT_AR_UPPER_COSTUME = 75,
	CEItemEquip_CT_AR_LOWER_COSTUME = 76,
	CEItemEquip_CT_AR_GLOVE_COSTUME = 77,
	CEItemEquip_CT_AR_BOOTS_COSTUME = 78,
	CEItemEquip_CT_AR_SHOULDER_COSTUME = 79,
	CEItemEquip_CT_AR_BELT_COSTUME = 80,
	CEItemEquip_CT_AR_ONE_PIECE_COSTUME = 81,
	CEItemEquip_CT_AR_TWO_PIECE_COSTUME = 82,
	CEItemEquip_CT_AR_THREE_PIECE_COSTUME_CHEST = 83,
	CEItemEquip_CT_AR_THREE_PIECE_COSTUME_LEGGING = 84,
	CEItemEquip_CT_MOUNT_GROUND_COSTUME = 85,
	CEItemEquip_CT_MOUNT_AIR_COSTUME = 86,
	CEItemEquip_CT_PET_COSTUME     = 87,
	CEItemEquip_CT_BEGIN           = 88,
	CEItemEquip_CT_END             = 89,
	CEItemEquip_CT_NIL             = 90,
	CEItemEquip_CT_MAX             = 91
};


// Enum BLGame.ABLCTypeEnum.CEItemCooltimeType
enum class ECEItemCooltimeType : uint8_t
{
	CEItemCooltime_T_ITEMCIDTYPE   = 0,
	CEItemCooltime_T_GROUPCOOLCIDTYPE = 1,
	CEItemCooltime_T_BEGIN         = 2,
	CEItemCooltime_T_END           = 3,
	CEItemCooltime_T_NIL           = 4,
	CEItemCooltime_T_MAX           = 5
};


// Enum BLGame.ABLCTypeEnum.CEItemWeightCategory
enum class ECEItemWeightCategory : uint8_t
{
	CEItemWeight_CT_NONE           = 0,
	CEItemWeight_CT_ROBE           = 1,
	CEItemWeight_CT_LIGHT          = 2,
	CEItemWeight_CT_MEDIUM         = 3,
	CEItemWeight_CT_HEAVY          = 4,
	CEItemWeight_CT_MASSIVE        = 5,
	CEItemWeight_CT_BEGIN          = 6,
	CEItemWeight_CT_END            = 7,
	CEItemWeight_CT_NIL            = 8,
	CEItemWeight_CT_MAX            = 9
};


// Enum BLGame.ABLCTypeEnum.CEGroupCoolDownType
enum class ECEGroupCoolDownType : uint8_t
{
	CEGroupCoolDown_T_NONE         = 0,
	CEGroupCoolDown_T_BERSERKERMODE = 1,
	CEGroupCoolDown_T_GUARDIANROLEBUFF = 2,
	CEGroupCoolDown_T_PALADINIMBUE = 3,
	CEGroupCoolDown_T_BATTLEWEAPONA = 4,
	CEGroupCoolDown_T_BATTLEWEAPONB = 5,
	CEGroupCoolDown_T_BATTLEWEAPONC = 6,
	CEGroupCoolDown_T_BEGIN        = 7,
	CEGroupCoolDown_T_END          = 8,
	CEGroupCoolDown_T_NIL          = 9,
	CEGroupCoolDown_T_MAX          = 10
};


// Enum BLGame.ABLCTypeEnum.CERelativePositionType
enum class ECERelativePositionType : uint8_t
{
	CERelativePosition_T_FRONT     = 0,
	CERelativePosition_T_REAR      = 1,
	CERelativePosition_T_ANGLE     = 2,
	CERelativePosition_T_BEGIN     = 3,
	CERelativePosition_T_END       = 4,
	CERelativePosition_T_NIL       = 5,
	CERelativePosition_T_MAX       = 6
};


// Enum BLGame.ABLCTypeEnum.CEImpactDelayCalcType
enum class ECEImpactDelayCalcType : uint8_t
{
	CEImpactDelayCalc_T_NONE       = 0,
	CEImpactDelayCalc_T_LOOSE      = 1,
	CEImpactDelayCalc_T_AT_ALL_COSTS = 2,
	CEImpactDelayCalc_T_BEGIN      = 3,
	CEImpactDelayCalc_T_END        = 4,
	CEImpactDelayCalc_T_NIL        = 5,
	CEImpactDelayCalc_T_MAX        = 6
};


// Enum BLGame.ABLCTypeEnum.CEProjectileType
enum class ECEProjectileType : uint8_t
{
	CEProjectile_T_NOT_PROJECTILE  = 0,
	CEProjectile_T_TARGETING       = 1,
	CEProjectile_T_NON_TARGETING   = 2,
	CEProjectile_T_BEGIN           = 3,
	CEProjectile_T_END             = 4,
	CEProjectile_T_NIL             = 5,
	CEProjectile_T_MAX             = 6
};


// Enum BLGame.ABLCTypeEnum.CEProjectileCategory
enum class ECEProjectileCategory : uint8_t
{
	CEProjectile_CT_NONE           = 0,
	CEProjectile_CT_NORMAL_PROJECTILE = 1,
	CEProjectile_CT_PHYSICAL_PROJECTILE = 2,
	CEProjectile_CT_GUIDED_PROJECTILE = 3,
	CEProjectile_CT_BEGIN          = 4,
	CEProjectile_CT_END            = 5,
	CEProjectile_CT_NIL            = 6,
	CEProjectile_CT_MAX            = 7
};


// Enum BLGame.ABLCTypeEnum.CEApplyingAreaLocationReferenceDirectionType
enum class ECEApplyingAreaLocationReferenceDirectionType : uint8_t
{
	CEApplyingAreaLocationReferenceDirection_T_ACTORS_FRONT = 0,
	CEApplyingAreaLocationReferenceDirection_T_FROM_ACTOR_TO_TARGET_STRAIGHT_LINE = 1,
	CEApplyingAreaLocationReferenceDirection_T_BEGIN = 2,
	CEApplyingAreaLocationReferenceDirection_T_END = 3,
	CEApplyingAreaLocationReferenceDirection_T_NIL = 4,
	CEApplyingAreaLocationReferenceDirection_T_MAX = 5
};


// Enum BLGame.ABLCTypeEnum.CEApplyingAreaLocationReferencePointType
enum class ECEApplyingAreaLocationReferencePointType : uint8_t
{
	CEApplyingAreaLocationReferencePoint_T_ACTOR = 0,
	CEApplyingAreaLocationReferencePoint_T_OBJECT_TARGET = 1,
	CEApplyingAreaLocationReferencePoint_T_POINT_TARGET = 2,
	CEApplyingAreaLocationReferencePoint_T_BEGIN = 3,
	CEApplyingAreaLocationReferencePoint_T_END = 4,
	CEApplyingAreaLocationReferencePoint_T_NIL = 5,
	CEApplyingAreaLocationReferencePoint_T_MAX = 6
};


// Enum BLGame.ABLCTypeEnum.CEAttackAreaShapeType
enum class ECEAttackAreaShapeType : uint8_t
{
	CEAttackAreaShape_T_OBJECT     = 0,
	CEAttackAreaShape_T_CIRCULAR_CYLINDER = 1,
	CEAttackAreaShape_T_SPHERE     = 2,
	CEAttackAreaShape_T_SECTOR_CYLINDER = 3,
	CEAttackAreaShape_T_HEXAHEDRON = 4,
	CEAttackAreaShape_T_CIRCULAR_CONE = 5,
	CEAttackAreaShape_T_CROSS_PRISM = 6,
	CEAttackAreaShape_T_TRIANGULAR_PRISM = 7,
	CEAttackAreaShape_T_DOUGHNUT_CYLINDER = 8,
	CEAttackAreaShape_T_REAL_DOUGHNUT = 9,
	CEAttackAreaShape_T_BOOMERANG  = 10,
	CEAttackAreaShape_T_FLOW       = 11,
	CEAttackAreaShape_T_CIRCULAR_ARC_CYLINDER = 12,
	CEAttackAreaShape_T_BEGIN      = 13,
	CEAttackAreaShape_T_END        = 14,
	CEAttackAreaShape_T_NIL        = 15,
	CEAttackAreaShape_T_MAX        = 16
};


// Enum BLGame.ABLCTypeEnum.CEExtendAttackChanceType
enum class ECEExtendAttackChanceType : uint8_t
{
	CEExtendAttackChance_T_NONE    = 0,
	CEExtendAttackChance_T_PROTECT = 1,
	CEExtendAttackChance_T_REFLECT = 2,
	CEExtendAttackChance_T_SHIFT_DAMAGE = 3,
	CEExtendAttackChance_T_BEGIN   = 4,
	CEExtendAttackChance_T_END     = 5,
	CEExtendAttackChance_T_NIL     = 6,
	CEExtendAttackChance_T_MAX     = 7
};


// Enum BLGame.ABLCTypeEnum.CEAttackChanceType
enum class ECEAttackChanceType : uint8_t
{
	CEAttackChance_T_NONE          = 0,
	CEAttackChance_T_MISS          = 1,
	CEAttackChance_T_DODGE         = 2,
	CEAttackChance_T_PARRY         = 3,
	CEAttackChance_T_BLOCK         = 4,
	CEAttackChance_T_RESIST        = 5,
	CEAttackChance_T_CRITICAL_HIT  = 6,
	CEAttackChance_T_ORDINARY_HIT  = 7,
	CEAttackChance_T_IMMUNE        = 8,
	CEAttackChance_T_BEGIN         = 9,
	CEAttackChance_T_END           = 10,
	CEAttackChance_T_NIL           = 11,
	CEAttackChance_T_MAX           = 12
};


// Enum BLGame.ABLCTypeEnum.CEAttackRangeCategory
enum class ECEAttackRangeCategory : uint8_t
{
	CEAttackRange_CT_SHORT         = 0,
	CEAttackRange_CT_LONG          = 1,
	CEAttackRange_CT_BEGIN         = 2,
	CEAttackRange_CT_END           = 3,
	CEAttackRange_CT_NIL           = 4,
	CEAttackRange_CT_MAX           = 5
};


// Enum BLGame.ABLCTypeEnum.CEDamageType
enum class ECEDamageType : uint8_t
{
	CEDamage_T_PHYSICAL            = 0,
	CEDamage_T_MAGICAL             = 1,
	CEDamage_T_NONE                = 2,
	CEDamage_T_BEGIN               = 3,
	CEDamage_T_END                 = 4,
	CEDamage_T_NIL                 = 5,
	CEDamage_T_MAX                 = 6
};


// Enum BLGame.ABLCTypeEnum.CEJudgeType
enum class ECEJudgeType : uint8_t
{
	CEJudge_T_MELEE                = 0,
	CEJudge_T_RANGE                = 1,
	CEJudge_T_SPELL                = 2,
	CEJudge_T_NONE                 = 3,
	CEJudge_T_BEGIN                = 4,
	CEJudge_T_END                  = 5,
	CEJudge_T_NIL                  = 6,
	CEJudge_T_MAX                  = 7
};


// Enum BLGame.ABLCTypeEnum.CEVoluntaryActionEffectType
enum class ECEVoluntaryActionEffectType : uint8_t
{
	CEVoluntaryActionEffect_T_DISPELCC = 0,
	CEVoluntaryActionEffect_T_DISPELDEBUFF = 1,
	CEVoluntaryActionEffect_T_BEGIN = 2,
	CEVoluntaryActionEffect_T_END  = 3,
	CEVoluntaryActionEffect_T_NIL  = 4,
	CEVoluntaryActionEffect_T_MAX  = 5
};


// Enum BLGame.ABLCTypeEnum.CEVoluntaryActionType
enum class ECEVoluntaryActionType : uint8_t
{
	CEVoluntaryAction_T_INSTANT    = 0,
	CEVoluntaryAction_T_HOLD       = 1,
	CEVoluntaryAction_T_BEGIN      = 2,
	CEVoluntaryAction_T_END        = 3,
	CEVoluntaryAction_T_NIL        = 4,
	CEVoluntaryAction_T_MAX        = 5
};


// Enum BLGame.ABLCTypeEnum.CEAggressiveType
enum class ECEAggressiveType : uint8_t
{
	CEAggressive_T_AGGRESSIVE      = 0,
	CEAggressive_T_DEFENSIVE       = 1,
	CEAggressive_T_BEGIN           = 2,
	CEAggressive_T_END             = 3,
	CEAggressive_T_NIL             = 4,
	CEAggressive_T_MAX             = 5
};


// Enum BLGame.ABLCTypeEnum.CENPCShowConditionPhaseType
enum class ECENPCShowConditionPhaseType : uint8_t
{
	CENPCShowConditionPhase_T_ALL  = 0,
	CENPCShowConditionPhase_T_ALIVE = 1,
	CENPCShowConditionPhase_T_SPIRIT = 2,
	CENPCShowConditionPhase_T_BEGIN = 3,
	CENPCShowConditionPhase_T_END  = 4,
	CENPCShowConditionPhase_T_NIL  = 5,
	CENPCShowConditionPhase_T_MAX  = 6
};


// Enum BLGame.ABLCTypeEnum.CEApplyingType
enum class ECEApplyingType : uint8_t
{
	CEApplying_T_OBJECT            = 0,
	CEApplying_T_SELF              = 1,
	CEApplying_T_AREA              = 2,
	CEApplying_T_OBJECT_AREA       = 3,
	CEApplying_T_SELF_AREA         = 4,
	CEApplying_T_LINKED_OBJECT     = 5,
	CEApplying_T_BEGIN             = 6,
	CEApplying_T_END               = 7,
	CEApplying_T_NIL               = 8,
	CEApplying_T_MAX               = 9
};


// Enum BLGame.ABLCTypeEnum.CETargetingType
enum class ECETargetingType : uint8_t
{
	CETargeting_T_OBJECT           = 0,
	CETargeting_T_POINT            = 1,
	CETargeting_T_NON_TARGET       = 2,
	CETargeting_T_BEGIN            = 3,
	CETargeting_T_END              = 4,
	CETargeting_T_NIL              = 5,
	CETargeting_T_MAX              = 6
};


// Enum BLGame.ABLCTypeEnum.CEAttackType
enum class ECEAttackType : uint8_t
{
	CEAttack_T_OBJECT_TARGET_OBJECT_EFFECT = 0,
	CEAttack_T_OBJECT_TARGET_AREA_EFFECT = 1,
	CEAttack_T_POINT_TARGET_AREA_EFFECT = 2,
	CEAttack_T_NON_TARGET_AREA_EFFECT = 3,
	CEAttack_T_NON_TARGET_SELF_EFFECT = 4,
	CEAttack_T_BEGIN               = 5,
	CEAttack_T_END                 = 6,
	CEAttack_T_NIL                 = 7,
	CEAttack_T_MAX                 = 8
};


// Enum BLGame.ABLCTypeEnum.CEAttackTableType
enum class ECEAttackTableType : uint8_t
{
	CEAttackTable_T_PHYSICS_MELEE  = 0,
	CEAttackTable_T_PHYSICS_RANGE  = 1,
	CEAttackTable_T_SPELL          = 2,
	CEAttackTable_T_NONE           = 3,
	CEAttackTable_T_FRIENDLY       = 4,
	CEAttackTable_T_BEGIN          = 5,
	CEAttackTable_T_END            = 6,
	CEAttackTable_T_NIL            = 7,
	CEAttackTable_T_MAX            = 8
};


// Enum BLGame.ABLCTypeEnum.CENatureType
enum class ECENatureType : uint8_t
{
	CENature_T_PHYSICAL            = 0,
	CENature_T_MAGICAL             = 1,
	CENature_T_BEGIN               = 2,
	CENature_T_END                 = 3,
	CENature_T_NIL                 = 4,
	CENature_T_MAX                 = 5
};


// Enum BLGame.ABLCTypeEnum.CEMagicalSubNatureType
enum class ECEMagicalSubNatureType : uint8_t
{
	CEMagicalSubNature_T_NONE      = 0,
	CEMagicalSubNature_T_FIRE      = 1,
	CEMagicalSubNature_T_ICE       = 2,
	CEMagicalSubNature_T_THUNDER   = 3,
	CEMagicalSubNature_T_BEGIN     = 4,
	CEMagicalSubNature_T_END       = 5,
	CEMagicalSubNature_T_NIL       = 6,
	CEMagicalSubNature_T_MAX       = 7
};


// Enum BLGame.ABLCTypeEnum.CEPhysicalSubNatureType
enum class ECEPhysicalSubNatureType : uint8_t
{
	CEPhysicalSubNature_T_NONE     = 0,
	CEPhysicalSubNature_T_SLASH    = 1,
	CEPhysicalSubNature_T_PIERCE   = 2,
	CEPhysicalSubNature_T_BLUNT    = 3,
	CEPhysicalSubNature_T_BEGIN    = 4,
	CEPhysicalSubNature_T_END      = 5,
	CEPhysicalSubNature_T_NIL      = 6,
	CEPhysicalSubNature_T_MAX      = 7
};


// Enum BLGame.ABLCTypeEnum.CEEquipSlotType
enum class ECEEquipSlotType : uint8_t
{
	CEEquipSlot_T_MAIN_HAND        = 0,
	CEEquipSlot_T_OFF_HAND         = 1,
	CEEquipSlot_T_HEAD             = 2,
	CEEquipSlot_T_CHEST            = 3,
	CEEquipSlot_T_BELT             = 4,
	CEEquipSlot_T_LEGGING          = 5,
	CEEquipSlot_T_BOOTS            = 6,
	CEEquipSlot_T_SHOULDER         = 7,
	CEEquipSlot_T_GLOVE            = 8,
	CEEquipSlot_T_CLOAK            = 9,
	CEEquipSlot_T_UNDERWEAR        = 10,
	CEEquipSlot_T_NECKLACE         = 11,
	CEEquipSlot_T_RING             = 12,
	CEEquipSlot_T_RING01           = 13,
	CEEquipSlot_T_HAIR             = 14,
	CEEquipSlot_T_EYESHADOW        = 15,
	CEEquipSlot_T_EYELINER         = 16,
	CEEquipSlot_T_EYELASHES        = 17,
	CEEquipSlot_T_LEFT_LENS        = 18,
	CEEquipSlot_T_RIGHT_LENS       = 19,
	CEEquipSlot_T_LIPSTIC          = 20,
	CEEquipSlot_T_LIPGLOSS         = 21,
	CEEquipSlot_T_BLUSHER          = 22,
	CEEquipSlot_T_HIGHLIGHTER      = 23,
	CEEquipSlot_T_MOLE0            = 24,
	CEEquipSlot_T_MOLE1            = 25,
	CEEquipSlot_T_MOLE2            = 26,
	CEEquipSlot_T_MOLE3            = 27,
	CEEquipSlot_T_MOLE4            = 28,
	CEEquipSlot_T_MOLE5            = 29,
	CEEquipSlot_T_MOLE6            = 30,
	CEEquipSlot_T_MOLE7            = 31,
	CEEquipSlot_T_MOLE8            = 32,
	CEEquipSlot_T_MOLE9            = 33,
	CEEquipSlot_T_FACETATTOO       = 34,
	CEEquipSlot_T_BODYTATTOO       = 35,
	CEEquipSlot_T_STAMP            = 36,
	CEEquipSlot_T_FRECKLE          = 37,
	CEEquipSlot_T_BEARD            = 38,
	CEEquipSlot_T_SCAR             = 39,
	CEEquipSlot_T_WRINKLE          = 40,
	CEEquipSlot_T_TAIL             = 41,
	CEEquipSlot_T_MAIN_HAND_COSTUME = 42,
	CEEquipSlot_T_OFF_HAND_COSTUME = 43,
	CEEquipSlot_T_BOTH_HAND_COSTUME = 44,
	CEEquipSlot_T_HEAD_COSTUME     = 45,
	CEEquipSlot_T_CHEST_COSTUME    = 46,
	CEEquipSlot_T_SHOULDER_COSTUME = 47,
	CEEquipSlot_T_BELT_COSTUME     = 48,
	CEEquipSlot_T_GLOVE_COSTUME    = 49,
	CEEquipSlot_T_LEGGING_COSTUME  = 50,
	CEEquipSlot_T_BOOTS_COSTUME    = 51,
	CEEquipSlot_T_MOUNT_GROUND_COSTUME = 52,
	CEEquipSlot_T_MOUNT_AIR_COSTUME = 53,
	CEEquipSlot_T_PET_COSTUME      = 54,
	CEEquipSlot_T_BRACELET         = 55,
	CEEquipSlot_T_BRACELET01       = 56,
	CEEquipSlot_T_BEGIN            = 57,
	CEEquipSlot_T_END              = 58,
	CEEquipSlot_T_NIL              = 59,
	CEEquipSlot_T_MAX              = 60
};


// Enum BLGame.ABLCTypeEnum.CENPCStateType
enum class ECENPCStateType : uint8_t
{
	CENPCState_T_IDLEDEFAULT       = 0,
	CENPCState_T_IDLE1             = 1,
	CENPCState_T_BEGIN             = 2,
	CENPCState_T_END               = 3,
	CENPCState_T_NIL               = 4,
	CENPCState_T_MAX               = 5
};


// Enum BLGame.ABLCTypeEnum.CEWeaponSheatheType
enum class ECEWeaponSheatheType : uint8_t
{
	CEWeaponSheathe_T_NORMAL       = 0,
	CEWeaponSheathe_T_WEAPON       = 1,
	CEWeaponSheathe_T_BEGIN        = 2,
	CEWeaponSheathe_T_END          = 3,
	CEWeaponSheathe_T_NIL          = 4,
	CEWeaponSheathe_T_MAX          = 5
};


// Enum BLGame.ABLCTypeEnum.CEMerchantCategory
enum class ECEMerchantCategory : uint8_t
{
	CEMerchant_CT_ETC              = 0,
	CEMerchant_CT_POTION           = 1,
	CEMerchant_CT_MOUNT            = 2,
	CEMerchant_CT_GATHERING        = 3,
	CEMerchant_CT_EQUIP            = 4,
	CEMerchant_CT_QUEST            = 5,
	CEMerchant_CT_RP               = 6,
	CEMerchant_CT_CRAFT            = 7,
	CEMerchant_CT_RUNE_CRAFT       = 8,
	CEMerchant_CT_CINIS            = 9,
	CEMerchant_CT_GOTOS            = 10,
	CEMerchant_CT_BEGIN            = 11,
	CEMerchant_CT_END              = 12,
	CEMerchant_CT_NIL              = 13,
	CEMerchant_CT_MAX              = 14
};


// Enum BLGame.ABLCTypeEnum.CENPCProductionCategory
enum class ECENPCProductionCategory : uint8_t
{
	CENPCProduction_CT_MOB_NC      = 0,
	CENPCProduction_CT_MOB_C       = 1,
	CENPCProduction_CT_MOB_BOSS    = 2,
	CENPCProduction_CT_MOB_MOUNT   = 3,
	CENPCProduction_CT_LEGO_NC     = 4,
	CENPCProduction_CT_LEGO_C      = 5,
	CENPCProduction_CT_ORIGINAL_NC = 6,
	CENPCProduction_CT_ORIGINAL_C  = 7,
	CENPCProduction_CT_MOB_HOLD    = 8,
	CENPCProduction_CT_LEGO_JOB    = 9,
	CENPCProduction_CT_CHILD       = 10,
	CENPCProduction_CT_BEGIN       = 11,
	CENPCProduction_CT_END         = 12,
	CENPCProduction_CT_NIL         = 13,
	CENPCProduction_CT_MAX         = 14
};


// Enum BLGame.ABLCTypeEnum.CENPCCategory
enum class ECENPCCategory : uint8_t
{
	CENPC_CT_MONSTER               = 0,
	CENPC_CT_CIVILIAN              = 1,
	CENPC_CT_GUARD                 = 2,
	CENPC_CT_GUILD_MASTER          = 3,
	CENPC_CT_MERCHANT              = 4,
	CENPC_CT_SOLDIER               = 5,
	CENPC_CT_VENDER                = 6,
	CENPC_CT_WAYPOINT_MANAGER      = 7,
	CENPC_CT_RETURN_MANAGER        = 8,
	CENPC_CT_SKILL_TRAINER         = 9,
	CENPC_CT_REVIVAL_MANAGER       = 10,
	CENPC_CT_DUNGEON_MANAGER       = 11,
	CENPC_CT_AUCTION               = 12,
	CENPC_CT_MUTE                  = 13,
	CENPC_CT_CONQUEST_STONE_NEUTRAL = 14,
	CENPC_CT_CONQUEST_STONE_HIERON = 15,
	CENPC_CT_CONQUEST_STONE_UNION  = 16,
	CENPC_CT_CONQUEST_TREE         = 17,
	CENPC_CT_CONQUEST_TREE_GHOST   = 18,
	CENPC_CT_CONQUEST_GHOST        = 19,
	CENPC_CT_CONQUEST_GATE         = 20,
	CENPC_CT_CONQUEST_NPC_HIERON   = 21,
	CENPC_CT_CONQUEST_NPC_UNION    = 22,
	CENPC_CT_RO_MANAGER            = 23,
	CENPC_CT_RO_DEFENDER_FIRST_BASE = 24,
	CENPC_CT_RO_DEFENDER_SECOND_BASE = 25,
	CENPC_CT_RO_DEFENDER_FINAL_BASE = 26,
	CENPC_CT_RO_ATTACKER_FIRST_BASE = 27,
	CENPC_CT_RO_ATTACKER_SECOND_BASE = 28,
	CENPC_CT_RO_ATTACKER_FINAL_BASE = 29,
	CENPC_CT_RO_ATTACKER_WEAPON    = 30,
	CENPC_CT_RO_DEFENDER_WEAPON    = 31,
	CENPC_CT_RO_CASTLE_DOOR        = 32,
	CENPC_CT_PORTAL                = 33,
	CENPC_CT_GUILD_SHOP            = 34,
	CENPC_CT_NPCCRAFT              = 35,
	CENPC_CT_FIELDRAID_ENTRANCE    = 36,
	CENPC_CT_WAREHOUSE_MANAGER     = 37,
	CENPC_CT_LIMITED_RANK_MANAGER  = 38,
	CENPC_CT_ROYAL_QUEST_GIVER     = 39,
	CENPC_CT_REVIVAL_POINT_PERSONAL = 40,
	CENPC_CT_REVIVAL_POINT_PARTY   = 41,
	CENPC_CT_REVIVAL_POINT_GUILD   = 42,
	CENPC_CT_EXCHANGE_MANAGER      = 43,
	CENPC_CT_CRAFT                 = 44,
	CENPC_CT_CRAFT_SMITH           = 45,
	CENPC_CT_CRAFT_SMELT           = 46,
	CENPC_CT_CRAFT_HANDIWORK       = 47,
	CENPC_CT_CRAFT_COOK            = 48,
	CENPC_CT_CRAFT_ALCHEMY         = 49,
	CENPC_CT_CRAFT_CHOICE          = 50,
	CENPC_CT_REPAIR                = 51,
	CENPC_CT_DESYNTHESIS           = 52,
	CENPC_CT_EQUIPLVUP             = 53,
	CENPC_CT_OCCUPATIONWAR_HIERONNORMALBASE = 54,
	CENPC_CT_OCCUPATIONWAR_UNIONNORMALBASE = 55,
	CENPC_CT_OCCUPATIONWAR_NONENORMALBASE = 56,
	CENPC_CT_OCCUPATIONWAR_HIERONHALFNORMALBASE = 57,
	CENPC_CT_OCCUPATIONWAR_UNIONHALFNORMALBASE = 58,
	CENPC_CT_OCCUPATIONWAR_HIERONSPECIALBASE = 59,
	CENPC_CT_OCCUPATIONWAR_UNIONSPECIALBASE = 60,
	CENPC_CT_OCCUPATIONWAR_NONESPECIALBASE = 61,
	CENPC_CT_OCCUPATIONWAR_HIERONHALFSPECIALBASE = 62,
	CENPC_CT_OCCUPATIONWAR_UNIONHALFSPECIALBASE = 63,
	CENPC_CT_OCCUPATIONWAR_ITEMRED = 64,
	CENPC_CT_OCCUPATIONWAR_ITEMGREEN = 65,
	CENPC_CT_OCCUPATIONWAR_ITEMBLUE = 66,
	CENPC_CT_CHALLENGETOWER        = 67,
	CENPC_CT_CHALLENGETOWER_TURRET = 68,
	CENPC_CT_CHALLENGETOWER_MONSTER = 69,
	CENPC_CT_CHALLENGETOWER_FIRST_HOLY = 70,
	CENPC_CT_CHALLENGETOWER_LAST_HOLY = 71,
	CENPC_CT_CHALLENGETOWER_HELLGATE = 72,
	CENPC_CT_BEGIN                 = 73,
	CENPC_CT_END                   = 74,
	CENPC_CT_NIL                   = 75,
	CENPC_CT_MAX                   = 76
};


// Enum BLGame.ABLCTypeEnum.CEFactionRelationshipType
enum class ECEFactionRelationshipType : uint8_t
{
	CEFactionRelationship_T_FRIEND = 0,
	CEFactionRelationship_T_ENEMY  = 1,
	CEFactionRelationship_T_BEGIN  = 2,
	CEFactionRelationship_T_END    = 3,
	CEFactionRelationship_T_NIL    = 4,
	CEFactionRelationship_T_MAX    = 5
};


// Enum BLGame.ABLCTypeEnum.CECostType
enum class ECECostType : uint8_t
{
	CECost_T_MP                    = 0,
	CECost_T_BEGIN                 = 1,
	CECost_T_END                   = 2,
	CECost_T_NIL                   = 3,
	CECost_T_MAX                   = 4
};


// Enum BLGame.ABLCTypeEnum.CEWeekDayType
enum class ECEWeekDayType : uint8_t
{
	CEWeekDay_T_NONE               = 0,
	CEWeekDay_T_SUN                = 1,
	CEWeekDay_T_MON                = 2,
	CEWeekDay_T_TUE                = 3,
	CEWeekDay_T_WED                = 4,
	CEWeekDay_T_THU                = 5,
	CEWeekDay_T_FRI                = 6,
	CEWeekDay_T_SAT                = 7,
	CEWeekDay_T_BEGIN              = 8,
	CEWeekDay_T_END                = 9,
	CEWeekDay_T_NIL                = 10,
	CEWeekDay_T_MAX                = 11
};


// Enum BLGame.ABLCTypeEnum.CEActionShowType
enum class ECEActionShowType : uint8_t
{
	CEActionShow_T_NONE            = 0,
	CEActionShow_T_ALWAYS          = 1,
	CEActionShow_T_CLASSIC         = 2,
	CEActionShow_T_AIM             = 3,
	CEActionShow_T_BEGIN           = 4,
	CEActionShow_T_END             = 5,
	CEActionShow_T_NIL             = 6,
	CEActionShow_T_MAX             = 7
};


// Enum BLGame.ABLCTypeEnum.CERefActionComboType
enum class ECERefActionComboType : uint8_t
{
	CERefActionCombo_T_NONE        = 0,
	CERefActionCombo_T_DOUBLE      = 1,
	CERefActionCombo_T_CONTROL     = 2,
	CERefActionCombo_T_ALT         = 3,
	CERefActionCombo_T_SHIFT       = 4,
	CERefActionCombo_T_SYNC        = 5,
	CERefActionCombo_T_BEGIN       = 6,
	CERefActionCombo_T_END         = 7,
	CERefActionCombo_T_NIL         = 8,
	CERefActionCombo_T_MAX         = 9
};


// Enum BLGame.ABLCTypeEnum.CEPlacebleObjectType
enum class ECEPlacebleObjectType : uint8_t
{
	CEPlacebleObject_T_PC          = 0,
	CEPlacebleObject_T_NPC         = 1,
	CEPlacebleObject_T_PROP        = 2,
	CEPlacebleObject_T_TRAP        = 3,
	CEPlacebleObject_T_BEGIN       = 4,
	CEPlacebleObject_T_END         = 5,
	CEPlacebleObject_T_NIL         = 6,
	CEPlacebleObject_T_MAX         = 7
};


// Enum BLGame.ABLCTypeEnum.CEGenderType
enum class ECEGenderType : uint8_t
{
	CEGender_T_NONE                = 0,
	CEGender_T_MALE                = 1,
	CEGender_T_FEMALE              = 2,
	CEGender_T_ANDROGYNOUS         = 3,
	CEGender_T_BEGIN               = 4,
	CEGender_T_END                 = 5,
	CEGender_T_NIL                 = 6,
	CEGender_T_MAX                 = 7
};


// Enum BLGame.ABLCTypeEnum.CEClassSubCategory
enum class ECEClassSubCategory : uint8_t
{
	CEClassSub_CT_MIGHTY           = 0,
	CEClassSub_CT_AGILE            = 1,
	CEClassSub_CT_PHYSICAL         = 2,
	CEClassSub_CT_MAGICAL          = 3,
	CEClassSub_CT_BEGIN            = 4,
	CEClassSub_CT_END              = 5,
	CEClassSub_CT_NIL              = 6,
	CEClassSub_CT_MAX              = 7
};


// Enum BLGame.ABLCTypeEnum.CEClassCategory
enum class ECEClassCategory : uint8_t
{
	CEClass_CT_MELEE               = 0,
	CEClass_CT_RANGED              = 1,
	CEClass_CT_BEGIN               = 2,
	CEClass_CT_END                 = 3,
	CEClass_CT_NIL                 = 4,
	CEClass_CT_MAX                 = 5
};


// Enum BLGame.ABLCTypeEnum.CEClassType
enum class ECEClassType : uint8_t
{
	CEClass_T_NONE                 = 0,
	CEClass_T_GUARDIAN             = 1,
	CEClass_T_BERSERKER            = 2,
	CEClass_T_STRIKER              = 3,
	CEClass_T_RANGER               = 4,
	CEClass_T_MAGE                 = 5,
	CEClass_T_WARLOCK              = 6,
	CEClass_T_PALADIN              = 7,
	CEClass_T_MYSTIC               = 8,
	CEClass_T_ASSASSIN             = 9,
	CEClass_T_BEGIN                = 10,
	CEClass_T_END                  = 11,
	CEClass_T_NIL                  = 12,
	CEClass_T_MAX                  = 13
};


// Enum BLGame.ABLCTypeEnum.CEVehicleType
enum class ECEVehicleType : uint8_t
{
	CEVehicle_T_NONE               = 0,
	CEVehicle_T                    = 1,
	CEVehicle_T01                  = 2,
	CEVehicle_T02                  = 3,
	CEVehicle_T03                  = 4,
	CEVehicle_T04                  = 5,
	CEVehicle_T05                  = 6,
	CEVehicle_T06                  = 7,
	CEVehicle_T07                  = 8,
	CEVehicle_T08                  = 9,
	CEVehicle_T_BEGIN              = 10,
	CEVehicle_T_END                = 11,
	CEVehicle_T_NIL                = 12,
	CEVehicle_T_MAX                = 13
};


// Enum BLGame.ABLCTypeEnum.CERaceType
enum class ECERaceType : uint8_t
{
	CERace_T_NONE                  = 0,
	CERace_T_AMISTAD               = 1,
	CERace_T_AQUAELF               = 2,
	CERace_T_PANTERA               = 3,
	CERace_T_IBLIS                 = 4,
	CERace_T_SIREN                 = 5,
	CERace_T_HABICHTS              = 6,
	CERace_T_SYLVANELF             = 7,
	CERace_T_LUPUS                 = 8,
	CERace_T_FEDAYIN               = 9,
	CERace_T_MASCU                 = 10,
	CERace_T_MASCU_H               = 11,
	CERace_T_MASCU_U               = 12,
	CERace_T_BEGIN                 = 13,
	CERace_T_END                   = 14,
	CERace_T_NIL                   = 15,
	CERace_T_MAX                   = 16
};


// Enum BLGame.ABLCTypeEnum.CERealmType
enum class ECERealmType : uint8_t
{
	CERealm_T_NONE                 = 0,
	CERealm_T_HIERON               = 1,
	CERealm_T_UNION                = 2,
	CERealm_T_MOB                  = 3,
	CERealm_T_ALLFRIENDLY          = 4,
	CERealm_T_BEGIN                = 5,
	CERealm_T_END                  = 6,
	CERealm_T_NIL                  = 7,
	CERealm_T_MAX                  = 8
};


// Enum BLGame.ABLDef.EItemUsableTargetType
enum class EItemUsableTargetType : uint8_t
{
	EItemUsableTarget_T_None       = 0,
	EItemUsableTarget_T_NPC        = 1,
	EItemUsableTarget_T_NPCFaction = 2,
	EItemUsableTarget_T_Prop       = 3,
	EItemUsableTarget_T_Territory  = 4,
	EItemUsableTarget_T_MAX        = 5
};


// Enum BLGame.ABLDef.EQuestAreaType
enum class EQuestAreaType : uint8_t
{
	EQA_Story                      = 0,
	EQA_Royal                      = 1,
	EQA_Episode                    = 2,
	EQA_Monster                    = 3,
	EQA_Guide                      = 4,
	EQA_MAX                        = 5
};


// Enum BLGame.ABLDef.EQuestMarker
enum class EQuestMarker : uint8_t
{
	EQM_None                       = 0,
	EQM_Insufficient               = 1,
	EQM_Ongoing                    = 2,
	EQM_Acceptable                 = 3,
	EQM_Complete                   = 4,
	EQM_Story                      = 5,
	EQM_RoyalAcceptable            = 6,
	EQM_RoyalOngoing               = 7,
	EQM_Guide_Ongoing              = 8,
	EQM_MAX                        = 9
};


// Enum BLGame.ABLDef.BLSkillInfoType
enum class EBLSkillInfoType : uint8_t
{
	BLSkillInfoType_None           = 0,
	BLSkillInfoType_Stance         = 1,
	BLSkillInfoType_StanceSkill    = 2,
	BLSkillInfoType_NonStanceSkill = 3,
	BLSkillInfoType_Parameter      = 4,
	BLSkillInfoType_MAX            = 5
};


// Enum BLGame.ABLDef.BLSkillNodeManageType
enum class EBLSkillNodeManageType : uint8_t
{
	BLSkillNodeManageType_None     = 0,
	BLSkillNodeManageType_Add      = 1,
	BLSkillNodeManageType_Remove   = 2,
	BLSkillNodeManageType_MAX      = 3
};


// Enum BLGame.ABLDef.ERenderTargetName
enum class ERenderTargetName : uint8_t
{
	ERenderTargetName_MonsterBook  = 0,
	ERenderTargetName_CollectionBook = 1,
	ERenderTargetName_Anima        = 2,
	ERenderTargetName_PlayerEquip  = 3,
	ERenderTargetName_LumenaShop   = 4,
	ERenderTargetName_MAX          = 5
};


// Enum BLGame.ABLDef.EActionBarIconEffect
enum class EActionBarIconEffect : uint8_t
{
	EActionBarIconEffect_New       = 0,
	EActionBarIconEffect_Recommend = 1,
	EActionBarIconEffect_RiotControl = 2,
	EActionBarIconEffect_All       = 3,
	EActionBarIconEffect_SlotUnlock = 4,
	EActionBarIconEffect_ToggleBGShow = 5,
	EActionBarIconEffect_ToggleAnimPlay = 6,
	EActionBarIconEffect_ToggleAnimShow = 7,
	EActionBarIconEffect_SwitchBGShow = 8,
	EActionBarIconEffect_SwitchAnimPlay = 9,
	EActionBarIconEffect_SwitchAnimShow = 10,
	EActionBarIconEffect_Max       = 11
};


// Enum BLGame.ABLDef.ENPCFunctionMarker
enum class ENPCFunctionMarker : uint8_t
{
	ENPCFunctionMarker_None        = 0,
	ENPCFunctionMarker_RoyalQuestGiver = 1,
	ENPCFunctionMarker_MAX         = 2
};


// Enum BLGame.ABLDef.EQuestElementType
enum class EQuestElementType : uint8_t
{
	EQuestElement_None             = 0,
	EQuestElement_Area             = 1,
	EQuestElement_Marker           = 2,
	EQuestElement_MAX              = 3
};


// Enum BLGame.ABLDef.EDialogStyle
enum class EDialogStyle : uint8_t
{
	EDialogStyle_None              = 0,
	EDialogStyle_OK                = 1,
	EDialogStyle_Cancel            = 2,
	EDialogStyle_YesNo             = 3,
	EDialogStyle_OKCancel          = 4,
	EDialogStyle_AcceptReject      = 5,
	EDialogStyle_Invite            = 6,
	EDialogStyle_Revival           = 7,
	EDialogStyle_RevivalInSpecialWar = 8,
	EDialogStyle_WaitCancel        = 9,
	EDialogStyle_WarJoin_OkCancel  = 10,
	EDialogStyle_WarReJoin_OkCancel = 11,
	EDialogStyle_WarJoin_LackActingPoint = 12,
	EDialogStyle_WarJoin_Colosseum_CheckCondtion = 13,
	EDialogStyle_WarReJoin_Colosseum_CheckCondtion = 14,
	EDialogStyle_ChangeCancel      = 15,
	EDialogStyle_RevivalDungeon    = 16,
	EDialogStype_RevivalWithInstanceRevivalPoint = 17,
	EDialogStyle_OccupationWarRevival_Base = 18,
	EDialogStyle_OccupationWarRevival_BaseGuide = 19,
	EDialogStyle_Revival_ChallengeTower = 20,
	EDialogStyle_Max               = 21
};


// Enum BLGame.ABLDef.EQuestNPCType
enum class EQuestNPCType : uint8_t
{
	EQuestNPCType_Giver            = 0,
	EQuestNPCType_Rewarder         = 1,
	EQuestNPCType_MAX              = 2
};


// Enum BLGame.ABLDef.CEQuestObjectiveType
enum class ECEQuestObjectiveType : uint8_t
{
	CEQuestObjectiveType_None      = 0,
	CEQuestObjectiveType_Kill      = 1,
	CEQuestObjectiveType_KillSkill = 2,
	CEQuestObjectiveType_Kill2     = 3,
	CEQuestObjectiveType_Kill3     = 4,
	CEQuestObjectiveType_killFaction = 5,
	CEQuestObjectiveType_GetItem   = 6,
	CEQuestObjectiveType_Escort    = 7,
	CEQuestObjectiveType_Escort2   = 8,
	CEQuestObjectiveType_Pulling   = 9,
	CEQuestObjectiveType_EnterTerritory = 10,
	CEQuestObjectiveType_PropInteract = 11,
	CEQuestObjectiveType_PropInteract2 = 12,
	CEQuestObjectiveType_PropInteractG = 13,
	CEQuestObjectiveType_TalkNPC   = 14,
	CEQuestObjectiveType_TalkSelectionNPC = 15,
	CEQuestObjectiveType_TalkSelectionNPCFaction = 16,
	CEQuestObjectiveType_UseItem   = 17,
	CEQuestObjectiveType_CompleteLocationQuest = 18,
	CEQuestObjectiveType_DealDamage = 19,
	CEQuestObjectiveType_DealDamage2 = 20,
	CEQuestObjectiveType_AcquireSkill = 21,
	CEQuestObjectiveType_Observe   = 22,
	CEQuestObjectiveType_SetDestination = 23,
	CEQuestObjectiveType_FiringSkill = 24,
	CEQuestObjectiveType_ArrivalWaypoint = 25,
	CEQuestObjectiveType_MyDeath   = 26,
	CEQuestObjectiveType_PropCarry = 27,
	CEQuestObjectiveType_PropCarry2 = 28,
	CEQuestObjectiveType_EquipItem = 29,
	CEQuestObjectiveType_ChoiceOfEquipItem = 30,
	CEQuestObjectiveType_Monsterbook = 31,
	CEQuestObjectiveType_TacTicBook = 32,
	CEQuestObjectiveType_GetItemG  = 33,
	CEQuestObjectiveType_VolumePlayerSkill = 34,
	CEQuestObjectiveType_VolumePlayerKillAssist = 35,
	CEQuestObjectiveType_GetMainCraftSkill = 36,
	CEQuestObjectiveType_GetSubCraftSkill = 37,
	CEQuestObjectiveType_GetPCAction = 38,
	CEQuestObjectiveType_ShortcutMount = 39,
	CEQuestObjectiveType_ShortcutPet = 40,
	CEQuestObjectiveType_ShortcutFellow = 41,
	CEQuestObjectiveType_TamingMount = 42,
	CEQuestObjectiveType_TamingPet = 43,
	CEQuestObjectiveType_TamingFellow = 44,
	CEQuestObjectiveType_RestoreMount = 45,
	CEQuestObjectiveType_RestorePet = 46,
	CEQuestObjectiveType_RestoreFellow = 47,
	CEQuestObjectiveType_StrengthenMount = 48,
	CEQuestObjectiveType_StrengthenMount2 = 49,
	CEQuestObjectiveType_StrengthenPet = 50,
	CEQuestObjectiveType_StrengthenFellow = 51,
	CEQuestObjectiveType_MonsterBallMount = 52,
	CEQuestObjectiveType_MonsterBallPet = 53,
	CEQuestObjectiveType_MonsterBallFellow = 54,
	CEQuestObjectiveType_EquipLevelUp = 55,
	CEQuestObjectiveType_RepairItemDurability = 56,
	CEQuestObjectiveType_RuneTitleAttach = 57,
	CEQuestObjectiveType_AnimaShaping = 58,
	CEQuestObjectiveType_ItemDesynthesize = 59,
	CEQuestObjectiveType_EquipStance = 60,
	CEQuestObjectiveType_EquipNonstance = 61,
	CEQuestObjectiveType_GetTarget = 62,
	CEQuestObjectiveType_Revival   = 63,
	CEQuestObjectiveType_UseItemG  = 64,
	CEQuestObjectiveType_MAX       = 65
};


// Enum BLGame.ABLDef.CEQuestTargetObjectType
enum class ECEQuestTargetObjectType : uint8_t
{
	CEQuestTargetObjectType_NPC    = 0,
	CEQuestTargetObjectType_SKILL  = 1,
	CEQuestTargetObjectType_PROP   = 2,
	CEQuestTargetObjectType_TERRITORY = 3,
	CEQuestTargetObjectType_ITEM   = 4,
	CEQuestTargetObjectType_FACTION = 5,
	CEQuestTargetObjectType_PCACTION = 6,
	CEQuestTargetObjectType_MAX    = 7
};


// Enum BLGame.ABLDef.EBLMissionState
enum class EBLMissionState : uint8_t
{
	EBLMissionState_None           = 0,
	EBLMissionState_Prepare        = 1,
	EBLMissionState_Process        = 2,
	EBLMissionState_Success        = 3,
	EBLMissionState_GreatSuccess   = 4,
	EBLMissionState_Fail           = 5,
	EBLMissionState_Complete       = 6,
	EBLMissionState_MAX            = 7
};


// Enum BLGame.ABLDef.EBLMissionSlot
enum class EBLMissionSlot : uint8_t
{
	EBLMissionSlot_First           = 0,
	EBLMissionSlot_Second          = 1,
	EBLMissionSlot_Third           = 2,
	EBLMissionSlot_Max             = 3
};


// Enum BLGame.ABLDef.PropEffectTriggerType_Possibility
enum class EPropEffectTriggerType_Possibility : uint8_t
{
	PropTrigger_T_Possibility_Possible = 0,
	PropTrigger_T_Possibility_Impossible = 1,
	PropTrigger_T_Possibility_MAX  = 2
};


// Enum BLGame.ABLDef.EPawnMeshRenderState
enum class EPawnMeshRenderState : uint8_t
{
	EPawnMeshRenderState_T_NotRender = 0,
	EPawnMeshRenderState_T_Proxy   = 1,
	EPawnMeshRenderState_T_Characterize = 2,
	EPawnMeshRenderState_T_Max     = 3
};


// Enum BLGame.ABLUIDef.EGuildCrownType
enum class EGuildCrownType : uint8_t
{
	EGuildCrownType_None           = 0,
	EGuildCrownType_RO             = 1,
	EGuildCrownType_CO             = 2,
	EGuildCrownType_MAX            = 3
};


// Enum BLGame.ABLUIDef.EGuildDialogOpenType
enum class EGuildDialogOpenType : uint8_t
{
	EGuildDialogOpenType_RPGrant   = 0,
	EGuildDialogOpenType_LeaderDelegate = 1,
	EGuildDialogOpenType_End       = 2,
	EGuildDialogOpenType_MAX       = 3
};


// Enum BLGame.ABLDef.CETutorialOrderObjectiveType
enum class ECETutorialOrderObjectiveType : uint8_t
{
	CETutorialOrderObjectiveType_none = 0,
	CETutorialOrderObjectiveType_FightWin = 1,
	CETutorialOrderObjectiveType_GetPoint = 2,
	CETutorialOrderObjectiveType_EnemyPlayerKillassist = 3,
	CETutorialOrderObjectiveType_Gather = 4,
	CETutorialOrderObjectiveType_Craft = 5,
	CETutorialOrderObjectiveType_Taming = 6,
	CETutorialOrderObjectiveType_FellowMission = 7,
	CETutorialOrderObjectiveType_SocialAction = 8,
	CETutorialOrderObjectiveType_Kill = 9,
	CETutorialOrderObjectiveType_GetTargetingType = 10,
	CETutorialOrderObjectiveType_GetItem = 11,
	CETutorialOrderObjectiveType_UseItem = 12,
	CETutorialOrderObjectiveType_EquipClassItem = 13,
	CETutorialOrderObjectiveType_EnterTerritory = 14,
	CETutorialOrderObjectiveType_GetPCState = 15,
	CETutorialOrderObjectiveType_GetPCAction = 16,
	CETutorialOrderObjectiveType_GetQuest = 17,
	CETutorialOrderObjectiveType_RewardQuest = 18,
	CETutorialOrderObjectiveType_CreateOrJoinParty = 19,
	CETutorialOrderObjectiveType_CreateOrJoinGuild = 20,
	CETutorialOrderObjectiveType_UseItemCategoryType = 21,
	CETutorialOrderObjectiveType_PCCreate = 22,
	CETutorialOrderObjectiveType_GetPCCondition = 23,
	CETutorialOrderObjectiveType_GetQuestType = 24,
	CETutorialOrderObjectiveType_GetTimeTypeQuest = 25,
	CETutorialOrderObjectiveType_GetItemCategoryType = 26,
	CETutorialOrderObjectiveType_SetLevel = 27,
	CETutorialOrderObjectiveType_EnterLocation = 28,
	CETutorialOrderObjectiveType_EnterDungeon = 29,
	CETutorialOrderObjectiveType_EnterWorldMapType = 30,
	CETutorialOrderObjectiveType_GetMail = 31,
	CETutorialOrderObjectiveType_MAX = 32
};


// Enum BLGame.ABLDef.CollectionBookFellowMissionState
enum class ECollectionBookFellowMissionState : uint8_t
{
	FELLOW_MISSION_FREE            = 0,
	FELLOW_MISSION_PREPARE         = 1,
	FELLOW_MISSION_PROCESS         = 2,
	FELLOW_MISSION_MAX             = 3
};


// Enum BLGame.ABLUIDef.ERevivalState
enum class ERevivalState : uint8_t
{
	ERevivalState_None             = 0,
	ERevivalState_ChoiceWaiting    = 1,
	ERevivalState_RevivalWaitingStandAlone = 2,
	ERevivalState_RevivalWaiting   = 3,
	ERevivalState_FromCurrentPosition = 4,
	ERevivalState_OutOfCorpse      = 5,
	ERevivalState_PossibleRevivalBySpiritualAwaker = 6,
	ERevivalState_FromCorpseByOthers = 7,
	ERevivalState_FromOtherByOthers = 8,
	ERevivalState_RevivalWaitingRO = 9,
	ERevivalState_OccupationWarRevival_Waiting = 10,
	ERevivalState_OccupationWarRevival_BaseGuide = 11,
	ERevivalState_MAX              = 12
};


// Enum BLGame.ABLUIDef.EPawnType
enum class EPawnType : uint8_t
{
	EPawnType_Player               = 0,
	EPawnType_Target               = 1,
	EPawnType_TargetOfTarget       = 2,
	EPawnType_AutoTarget           = 3,
	EPawnType_PartyMember          = 4,
	EPawnType_RaidGroupMember      = 5,
	EPawnType_PlayerPet            = 6,
	EPawnType_TargetPet            = 7,
	EPawnType_PartyMemberPet       = 8,
	EPawnType_ETC                  = 9,
	EPawnType_MAX                  = 10
};


// Enum BLGame.ABLDef.EDialogValue
enum class EDialogValue : uint8_t
{
	EDialogValue_Yes               = 0,
	EDialogValue_No                = 1,
	EDialogValue_OK                = 2,
	EDialogValue_Cancel            = 3,
	EDialogValue_Accept            = 4,
	EDialogValue_Reject            = 5,
	EDialogValue_Invite            = 6,
	EDialogValue_RevivalStandAlone = 7,
	EDialogValue_RevivalTomb       = 8,
	EDialogValue_TimeOver          = 9,
	EDialogValue_RevivalStandAloneWithoutSpirit = 10,
	EDialogValue_RevivalBase       = 11,
	EDialogValue_GoToLumenaShop    = 12,
	EDialogValue_Change            = 13,
	EDialogValue_RevivalDungeon    = 14,
	EDialogValue_InstanceRevivalPoint = 15,
	EDialogValue_OccupationWarRevival_Base = 16,
	EDialogValue_OccupationWarRevival_BaseGuide = 17,
	EDialogValue_MAX               = 18
};


// Enum BLGame.ABLUIDef.EBLMonsterBookSkillType
enum class EBLMonsterBookSkillType : uint8_t
{
	EBLMonsterBookSkillType_None   = 0,
	EBLMonsterBookSkillType_Pet    = 1,
	EBLMonsterBookSkillType_MountActive = 2,
	EBLMonsterBookSkillType_MountPassive = 3,
	EBLMonsterBookSkillType_Fellow = 4,
	EBLMonsterBookSkillType_MAX    = 5
};


// Enum BLGame.ABLDef.BLFellowSkillEffectType
enum class EBLFellowSkillEffectType : uint8_t
{
	BLFellowSkillEffect_None       = 0,
	BLFellowSkillEffect_SuccessByMission = 1,
	BLFellowSkillEffect_SuccessWithRace = 2,
	BLFellowSkillEffect_TimeDecrease = 3,
	BLFellowSkillEffect_BonusReward = 4,
	BLFellowSkillEffect_MissionCompleteImmediately = 5,
	BLFellowSkillEffect_GreatSuccessByMission = 6,
	BLFellowSkillEffect_RewardItemIncrease = 7,
	BLFellowSkillEffect_RewardExpIncrease = 8,
	BLFellowSkillEffect_RewardExpIncreaseExceptMe = 9,
	BLFellowSkillEffect_ContractConsumeIgnore = 10,
	BLFellowSkillEffect_MAX        = 11
};


// Enum BLGame.ABLDef.SUMMON_EFFECT_TYPE
enum class ESUMMON_EFFECT_TYPE : uint8_t
{
	SUMMON_EFFECT_TYPE_NONE        = 0,
	SUMMON_EFFECT_TYPE_PARTY       = 1,
	SUMMON_EFFECT_TYPE_MAX         = 2
};


// Enum BLGame.ABLDef.BLTargetingMode
enum class EBLTargetingMode : uint8_t
{
	BLTargetingMode_ClassicTargeting = 0,
	BLTargetingMode_AimTargeting   = 1,
	BLTargetingMode_MAX            = 2
};


// Enum BLGame.ABLDef.BLPropInteractConditionType
enum class EBLPropInteractConditionType : uint8_t
{
	BLPropInteractConditionType_None = 0,
	BLPropInteractConditionType_Quest = 1,
	BLPropInteractConditionType_Item = 2,
	BLPropInteractConditionType_Carry = 3,
	BLPropInteractConditionType_MAX = 4
};


// Enum BLGame.ABLDef.BLEquipItemCategory
enum class EBLEquipItemCategory : uint8_t
{
	BLEquipItemCategory_Weapon     = 0,
	BLEquipItemCategory_Robe       = 1,
	BLEquipItemCategory_Light      = 2,
	BLEquipItemCategory_Medium     = 3,
	BLEquipItemCategory_Heavy      = 4,
	BLEquipItemCategory_Massive    = 5,
	BLEquipItemCategory_Accessory  = 6,
	BLEquipItemCategory_MAX        = 7
};


// Enum BLGame.ABLDef.EOnHeadTagIconType
enum class EOnHeadTagIconType : uint8_t
{
	EOnHeadTagIcon_T_Story         = 0,
	EOnHeadTagIcon_T_Episode       = 1,
	EOnHeadTagIcon_T_MonsterBook   = 2,
	EOnHeadTagIcon_T_Royal         = 3,
	EOnHeadTagIcon_T_Hide          = 4,
	EOnHeadTagIcon_T_Max           = 5
};


// Enum BLGame.ABLDef.EBLAnimMoveState
enum class EBLAnimMoveState : uint8_t
{
	EBLAnimMoveState_Walking       = 0,
	EBLAnimMoveState_Falling       = 1,
	EBLAnimMoveState_Ladder        = 2,
	EBLAnimMoveState_Flying        = 3,
	EBLAnimMoveState_Swimming      = 4,
	EBLAnimMoveState_Interpolating = 5,
	EBLAnimMoveState_Mount         = 6,
	EBLAnimMoveState_MAX           = 7
};


// Enum BLGame.ABLDef.EClientQuestObjectiveType
enum class EClientQuestObjectiveType : uint8_t
{
	ECQOT_Essencial                = 0,
	ECQOT_Selective                = 1,
	ECQOT_Sequential               = 2,
	ECQOT_MAX                      = 3
};


// Enum BLGame.ABLDef.WarRankingSortType
enum class EWarRankingSortType : uint8_t
{
	WRST_RANK                      = 0,
	WRST_NAME                      = 1,
	WRST_KILL                      = 2,
	WRST_ASSIST                    = 3,
	WRST_SCORE                     = 4,
	WRST_MEDAL                     = 5,
	WRST_REWARDS                   = 6,
	WRST_MAX                       = 7
};


// Enum BLGame.ABLDef.SkillInfoDataTag
enum class ESkillInfoDataTag : uint8_t
{
	SkillInfoDataTag_Base          = 0,
	SkillInfoDataTag_PC            = 1,
	SkillInfoDataTag_NPC           = 2,
	SkillInfoDataTag_MAX           = 3
};


// Enum BLGame.ABLDef.STATUS_PARTICLE_LOCATION_TYPE
enum class ESTATUS_PARTICLE_LOCATION_TYPE : uint8_t
{
	SPLT_Center                    = 0,
	SPLT_Ground                    = 1,
	SPLT_Overhead                  = 2,
	SPLT_AttachBone                = 3,
	SPLT_AttachSocket              = 4,
	SPLT_SoftAttachBone            = 5,
	SPLT_SoftAttachSocket          = 6,
	SPLT_SkelVertSurfLoc           = 7,
	SPLT_MAX                       = 8
};


// Enum BLGame.ABLDef.EEffectiveIK
enum class EEffectiveIK : uint8_t
{
	EEffectiveIK_LookAt            = 0,
	EEffectiveIK_FootPlacement     = 1,
	EEffectiveIK_MAX               = 2
};


// Enum BLGame.ABLDef.MCApplyType
enum class EMCApplyType : uint8_t
{
	MCAT_All                       = 0,
	MCAT_WeaponShield              = 1,
	MCAT_Weapon                    = 2,
	MCAT_Shield                    = 3,
	MCAT_Body                      = 4,
	MCAT_MAX                       = 5
};


// Enum BLGame.ABLDef.HitReactionType
enum class EHitReactionType : uint8_t
{
	HitReaction_Nothing            = 0,
	HitReaction_OnlyIdle           = 1,
	HitReaction_BreakEnemyAction   = 2,
	HitReaction_Overlap            = 3,
	HitReaction_MAX                = 4
};


// Enum BLGame.ABLDef.ERootMotionMovementType
enum class ERootMotionMovementType : uint8_t
{
	ERootMotionMovement_None       = 0,
	ERootMotionMovement_Fly        = 1,
	ERootMotionMovement_Walk       = 2,
	ERootMotionMovement_Walk_BackAndForth = 3,
	ERootMotionMovement_MAX        = 4
};


// Enum BLGame.ABLDef.SkillMovableType
enum class ESkillMovableType : uint8_t
{
	SkillMovableType_None          = 0,
	SkillMovableType_Able          = 1,
	SkillMovableType_Unable        = 2,
	SkillMovableType_Cancel        = 3,
	SkillMovableType_MAX           = 4
};


// Enum BLGame.ABLDef.ActionBarFavoriteSlotType
enum class EActionBarFavoriteSlotType : uint8_t
{
	ABFST_MOUNT                    = 0,
	ABFST_PET                      = 1,
	ABFST_FELLOW                   = 2,
	ABFST_MAX                      = 3
};


// Enum BLGame.ABLDef.EBoneDeformPart
enum class EBoneDeformPart : uint8_t
{
	EBoneDeformPart_CheekBoneHorizontalLocation = 0,
	EBoneDeformPart_Cheek          = 1,
	EBoneDeformPart_JawProjection  = 2,
	EBoneDeformPart_JawLength      = 3,
	EBoneDeformPart_JawTipProjection = 4,
	EBoneDeformPart_JawVolume      = 5,
	EBoneDeformPart_TotalEyeVerticalLocation = 6,
	EBoneDeformPart_TotalEyeHorizontalLocation = 7,
	EBoneDeformPart_EyeVerticalLocation = 8,
	EBoneDeformPart_EyeTweenLength = 9,
	EBoneDeformPart_EyeProjection  = 10,
	EBoneDeformPart_EyeSize        = 11,
	EBoneDeformPart_EyeHorizontalLength = 12,
	EBoneDeformPart_EyeVerticalLength = 13,
	EBoneDeformPart_EyeRotation    = 14,
	EBoneDeformPart_EyeTailVerticalLocation = 15,
	EBoneDeformPart_EyebrowVerticalLocation = 16,
	EBoneDeformPart_EyebrowProjection = 17,
	EBoneDeformPart_EyeTween       = 18,
	EBoneDeformPart_NoseVerticalLocation = 19,
	EBoneDeformPart_NoseSize       = 20,
	EBoneDeformPart_NoseProjection = 21,
	EBoneDeformPart_NoseBridgeShape = 22,
	EBoneDeformPart_NoseBridgeWidth = 23,
	EBoneDeformPart_NoseBallSize   = 24,
	EBoneDeformPart_NoseTipShape   = 25,
	EBoneDeformPart_NoseTipWidth   = 26,
	EBoneDeformPart_MouthVerticalLocation = 27,
	EBoneDeformPart_MouthProjection = 28,
	EBoneDeformPart_MouthWidth     = 29,
	EBoneDeformPart_MouthTailVerticalLocation = 30,
	EBoneDeformPart_UpperLipsThickness = 31,
	EBoneDeformPart_UpperLipsProjection = 32,
	EBoneDeformPart_LowerLipsThickness = 33,
	EBoneDeformPart_LowerLipsProjection = 34,
	EBoneDeformPart_EarSize        = 35,
	EBoneDeformPart_EarVerticalLength = 36,
	EBoneDeformPart_EarHorizontalLength = 37,
	EBoneDeformPart_HeadSize       = 38,
	EBoneDeformPart_NeckLength     = 39,
	EBoneDeformPart_NeckCircumference = 40,
	EBoneDeformPart_UpperBodyCircumference = 41,
	EBoneDeformPart_ShoulderVerticalLocation = 42,
	EBoneDeformPart_ShoulderWidth  = 43,
	EBoneDeformPart_UpperArmThickness = 44,
	EBoneDeformPart_UpperArmLength = 45,
	EBoneDeformPart_ForeArmThickness = 46,
	EBoneDeformPart_ForeArmLength  = 47,
	EBoneDeformPart_HandSize       = 48,
	EBoneDeformPart_HandThickness  = 49,
	EBoneDeformPart_FingerLength   = 50,
	EBoneDeformPart_BreastVerticalLocation = 51,
	EBoneDeformPart_BreastHorizontalLocation = 52,
	EBoneDeformPart_BreastSize     = 53,
	EBoneDeformPart_AbdomenProjection = 54,
	EBoneDeformPart_WaistCircumference = 55,
	EBoneDeformPart_WaistLength    = 56,
	EBoneDeformPart_PelvisWidth    = 57,
	EBoneDeformPart_HipSize        = 58,
	EBoneDeformPart_ThighLength    = 59,
	EBoneDeformPart_ThighCircumference = 60,
	EBoneDeformPart_CalfLength     = 61,
	EBoneDeformPart_CalfCircumference = 62,
	EBoneDeformPart_FootSize       = 63,
	EBoneDeformPart_BodyCircumference = 64,
	EBoneDeformPart_Height         = 65,
	EBoneDeformPart_ArmThickness   = 66,
	EBoneDeformPart_ArmLength      = 67,
	EBoneDeformPart_EyebrowThickness = 68,
	EBoneDeformPart_EyebrowHorizontalLength = 69,
	EBoneDeformPart_NoseBallVerticalLocation = 70,
	EBoneDeformPart_UpperLipsWidth = 71,
	EBoneDeformPart_LowerLipsWidth = 72,
	EBoneDeformPart_EarWheelHorizontalLocation = 73,
	EBoneDeformPart_UpperEarWheelLocation = 74,
	EBoneDeformPart_CheekBoneVerticalLocation = 75,
	EBoneDeformPart_CheekBoneProjection = 76,
	EBoneDeformPart_JawTipSize     = 77,
	EBoneDeformPart_JawAngle       = 78,
	EBoneDeformPart_JawSize        = 79,
	EBoneDeformPart_NoseBridgeProjection = 80,
	EBoneDeformPart_HipVerticalLocation = 81,
	EBoneDeformPart_HipHorizontalLocation = 82,
	EBoneDeformPart_KneeCircumference = 83,
	EBoneDeformPart_Max            = 84
};


// Enum BLGame.ABLDef.EDungeonType
enum class EDungeonType : uint8_t
{
	EDungeonType_Normal            = 0,
	EDungeonType_Hero              = 1,
	EDungeonType_MAX               = 2
};


// Enum BLGame.ABLDef.EStealthState
enum class EStealthState : uint8_t
{
	EStealthState_None             = 0,
	EStealthState_Hide             = 1,
	EStealthState_Detected         = 2,
	EStealthState_MAX              = 3
};


// Enum BLGame.ABLDef.EPartyEffectConditionType
enum class EPartyEffectConditionType : uint8_t
{
	EPartyEffectConditionType_None = 0,
	EPartyEffectConditionType_MemberCount = 1,
	EPartyEffectConditionType_Class = 2,
	EPartyEffectConditionType_ClassGroupCount = 3,
	EPartyEffectConditionType_Race = 4,
	EPartyEffectConditionType_RaceGroupCount = 5,
	EPartyEffectConditionType_MAX  = 6
};


// Enum BLGame.ABLDef.EBLPreviewType
enum class EBLPreviewType : uint8_t
{
	EBLPreviewType_EquipPlayer     = 0,
	EBLPreviewType_LumenaShop_Player = 1,
	EBLPreviewType_LumenaShop_NPC  = 2,
	EBLPreviewType_MAX             = 3
};


// Enum BLGame.ABLDef.TransitionFX_Type
enum class ETransitionFX_Type : uint8_t
{
	TFX_None                       = 0,
	TFX_Short                      = 1,
	TFX_Long                       = 2,
	TFX_MAX                        = 3
};


// Enum BLGame.ABLDef.WebSessionType
enum class EWebSessionType : uint8_t
{
	WST_NONE                       = 0,
	WST_Help                       = 1,
	WST_MainShop                   = 2,
	WST_FirstShop                  = 3,
	WST_VIPService                 = 4,
	WST_Lumena                     = 5,
	WST_Item                       = 6,
	WST_Blessership                = 7,
	WST_StorageBox                 = 8,
	WST_Exchange                   = 9,
	WST_Exchange_Opener            = 10,
	WST_EventPromotion             = 11,
	WST_GameOnWebMall              = 12,
	WST_LumenaSending              = 13,
	WST_GameOnWebEvent             = 14,
	WST_TestWeb                    = 15,
	WST_MAX                        = 16
};


// Enum BLGame.ABLDef.ESetItemType
enum class ESetItemType : uint8_t
{
	ESetItemType_None              = 0,
	ESetItemType_EquipCount        = 1,
	ESetItemType_EquipLv           = 2,
	ESetItemType_MAX               = 3
};


// Enum BLGame.ABLDef.EBattleTypeForOutline
enum class EBattleTypeForOutline : uint8_t
{
	EBattleTypeForOutline_Field    = 0,
	EBattleTypeForOutline_Dungeon  = 1,
	EBattleTypeForOutline_Warfare  = 2,
	EBattleTypeForOutline_MAX      = 3
};


// Enum BLGame.ABLDef.ERuneSoundType
enum class ERuneSoundType : uint8_t
{
	ERuneSoundType_UIOpen          = 0,
	ERuneSoundType_UIClose         = 1,
	ERuneSoundType_Synthesize_Progress = 2,
	ERuneSoundType_Synthesize_Fail = 3,
	ERuneSoundType_Synthesize_Success = 4,
	ERuneSoundType_Synthesize_GreatSuccess = 5,
	ERuneSoundType_Rune_Equip_Success = 6,
	ERuneSoundType_Rune_UnEquip_Success = 7,
	ERuneSoundType_MAX             = 8
};


// Enum BLGame.ABLDef.ETacticsTreeSkillLevelState
enum class ETacticsTreeSkillLevelState : uint8_t
{
	Level_Zero                     = 0,
	Level_Normal                   = 1,
	Level_Minus                    = 2,
	Level_Plus                     = 3,
	Level_Max                      = 4,
	SkillPointZero                 = 5,
	ETacticsTreeSkillLevelState_MAX = 6
};


// Enum BLGame.ABLDef.ETacticsTreeSkillState
enum class ETacticsTreeSkillState : uint8_t
{
	Lock_PCLevelLimit              = 0,
	Lock_PrecedeSkillLimit         = 1,
	Unlock_UnknowSkill             = 2,
	Unlock_LearnSkill              = 3,
	ETacticsTreeSkillState_MAX     = 4
};


// Enum BLGame.ABLDef.EDirtyInventoryItemDataType
enum class EDirtyInventoryItemDataType : uint8_t
{
	EDIIDT_Amount                  = 0,
	EDIIDT_CustomCount             = 1,
	EDIIDT_StatDataList            = 2,
	EDIIDT_LegendOptCid            = 3,
	EDIIDT_Bonding                 = 4,
	EDIIDT_DurationTime            = 5,
	EDIIDT_MakerName               = 6,
	EDIIDT_IsExpressMakerName      = 7,
	EDIIDT_TradingAbleDurationTime = 8,
	EDIIDT_UpgradeLevel            = 9,
	EDIIDT_EvolutionLevel          = 10,
	EDIIDT_Rune_Item_CId           = 11,
	EDIIDT_Rune_Item_CId01         = 12,
	EDIIDT_Rune_Item_CId02         = 13,
	EDIIDT_Rune_Item_CId03         = 14,
	EDIIDT_Durability              = 15,
	EDIIDT_MPFExtractionInfo       = 16,
	EDIIDT_Tab_SlotIndex           = 17,
	EDIIDT_EquipSlotIndex          = 18,
	EDIIDT_EvolutionAdditionalEffect = 19,
	EDIIDT_MAX                     = 20
};


// Enum BLGame.ABLDef.EEquipItemDurabilityHUDGradeType
enum class EEquipItemDurabilityHUDGradeType : uint8_t
{
	EDHGT_INVISIBLE                = 0,
	EDHGT_WHITE                    = 1,
	EDHGT_YELLOW                   = 2,
	EDHGT_ORANGE                   = 3,
	EDHGT_RED                      = 4,
	EDHGT_MAX                      = 5
};


// Enum BLGame.ABLDef.EEquipItemDurabilityHUDArmorType
enum class EEquipItemDurabilityHUDArmorType : uint8_t
{
	EDHAT_HELMET                   = 0,
	EDHAT_CHEST                    = 1,
	EDHAT_BELT                     = 2,
	EDHAT_LEGGING                  = 3,
	EDHAT_BOOTS                    = 4,
	EDHAT_SHOULDER                 = 5,
	EDHAT_GLOVE                    = 6,
	EDHAT_MAX                      = 7
};


// Enum BLGame.ABLDef.EEquipItemDurabilityHUDWeaponType
enum class EEquipItemDurabilityHUDWeaponType : uint8_t
{
	EDHWT_SWORD                    = 0,
	EDHWT_SHIELD                   = 1,
	EDHWT_STAFF                    = 2,
	EDHWT_AXE                      = 3,
	EDHWT_BOW                      = 4,
	EDHWT_DAGGER_LEFT              = 5,
	EDHWT_DAGGER_RIGHT             = 6,
	EDHWT_STAFF2                   = 7,
	EDHWT_HAMMER                   = 8,
	EDHWT_MAX                      = 9
};


// Enum BLGame.ABLDef.EEquipConvertResult_Mode
enum class EEquipConvertResult_Mode : uint8_t
{
	EEquipConvertResult_Mode_ItemEquipUpgrade = 0,
	EEquipConvertResult_Mode_ItemEvolution = 1,
	EEquipConvertResult_Mode_ItemSucceed = 2,
	EEquipConvertResult_Mode_UCB_GradeUpManager = 3,
	EEquipConvertResult_Mode_MAX   = 4
};


// Enum BLGame.ABLDef.EExpBarType
enum class EExpBarType : uint8_t
{
	EExpBarType_Exp                = 0,
	EExpBarType_SPExp              = 1,
	EExpBarType_MAX                = 2
};


// Enum BLGame.ABLDef.ETamingType
enum class ETamingType : uint8_t
{
	ETaming_T_Pet                  = 0,
	ETaming_T_Mount                = 1,
	ETaming_T_Fellow               = 2,
	ETaming_T_MAX                  = 3
};


// Enum BLGame.ABLDef.EItemEquipEffectType
enum class EItemEquipEffectType : uint8_t
{
	EItemEquipEffect_T_None        = 0,
	EItemEquipEffect_T_Abnormal    = 1,
	EItemEquipEffect_T_MAX         = 2
};


// Enum BLGame.ABLDef.EAddMPFType
enum class EAddMPFType : uint8_t
{
	EAddMPFType_None               = 0,
	EAddMPFType_Mount              = 1,
	EAddMPFType_Pet                = 2,
	EAddMPFType_Fellow             = 3,
	EAddMPFType_MAX                = 4
};


// Enum BLGame.ABLDef.EItemUseEffectType
enum class EItemUseEffectType : uint8_t
{
	EItemUseEffect_T_None          = 0,
	EItemUseEffect_T_UseSkill      = 1,
	EItemUseEffect_T_Interact      = 2,
	EItemUseEffect_T_QuestStart    = 3,
	EItemUseEffect_T_AcquireMount  = 4,
	EItemUseEffect_T_AcquirePet    = 5,
	EItemUseEffect_T_AcquireFellow = 6,
	EItemUseEffect_T_RPProductNPC  = 7,
	EItemUseEffect_T_RPProductProp = 8,
	EItemUseEffect_T_RPProductTrap = 9,
	EItemUseEffect_T_RpairTool     = 10,
	EItemUseEffect_T_RrepairMaxTool = 11,
	EItemUseEffect_T_InvenExpansionSlot = 12,
	EItemUseEffect_T_GetDropTable  = 13,
	EItemUseEffect_T_AcquireV2Mount = 14,
	EItemUseEffect_T_AcquireV2Pet  = 15,
	EItemUseEffect_T_AcquireV2Fellow = 16,
	EItemUseEffect_T_AddGemPiece   = 17,
	EItemUseEffect_T_AddGem        = 18,
	EItemUseEffect_T_MAX           = 19
};


// Enum BLGame.ABLDef.CEConquerorType
enum class ECEConquerorType : uint8_t
{
	CEConquerorType_RO             = 0,
	CEConquerorType_CO             = 1,
	CEConquerorType_MAX            = 2
};


// Enum BLGame.ABLDef.CEMountSkillBindingType
enum class ECEMountSkillBindingType : uint8_t
{
	CEMountSkillBindingType_None   = 0,
	CEMountSkillBindingType_WW     = 1,
	CEMountSkillBindingType_C      = 2,
	CEMountSkillBindingType_MAX    = 3
};


// Enum BLGame.ABLDef.ECustomizingResoureType
enum class ECustomizingResoureType : uint8_t
{
	ECustomizingResoureType_None   = 0,
	ECustomizingResoureType_Texture = 1,
	ECustomizingResoureType_MultiTexture = 2,
	ECustomizingResoureType_HairAsset = 3,
	ECustomizingResoureType_SkeletalMesh = 4,
	ECustomizingResoureType_MorphTarget = 5,
	ECustomizingResoureType_MAX    = 6
};


// Enum BLGame.ABLDef.EBLOccupationWarType
enum class EBLOccupationWarType : uint8_t
{
	EBLOccupationWarType_None      = 0,
	EBLOccupationWarType_SpermaWar = 1,
	EBLOccupationWarType_MAX       = 2
};


// Enum BLGame.ABLDef.ESpecialWarJoinButtonType
enum class ESpecialWarJoinButtonType : uint8_t
{
	ESpecialWarJoinButtonType_None = 0,
	ESpecialWarJoinButtonType_Join = 1,
	ESpecialWarJoinButtonType_BolterJoin = 2,
	ESpecialWarJoinButtonType_ReJoin = 3,
	ESpecialWarJoinButtonType_CancelWaiting = 4,
	ESpecialWarJoinButtonType_Leave = 5,
	ESpecialWarJoinButtonType_MAX  = 6
};


// Enum BLGame.ABLDef.EConquestModeType
enum class EConquestModeType : uint8_t
{
	EConquestMode_T_UnSelect       = 0,
	EConquestMode_T_SpecialWar     = 1,
	EConquestMode_T_ColosseumWar   = 2,
	EConquestMode_T_OccupationWar  = 3,
	EConquestMode_T_ChallengeTower = 4,
	EConquestMode_T_MAX            = 5
};


// Enum BLGame.ABLDef.SkillHitNotifyType
enum class ESkillHitNotifyType : uint8_t
{
	SHNT_AnimNotify                = 0,
	SHNT_ServerNotify              = 1,
	SHNT_ServerNotifyWithIndex     = 2,
	SHNT_MAX                       = 3
};


// Enum BLGame.ABLDef.ELevelGapClass
enum class ELevelGapClass : uint8_t
{
	ELGC_NONE                      = 0,
	ELGC_OVER_3rd_LEVEL            = 1,
	ELGC_OVER_2nd_LEVEL            = 2,
	ELGC_OVER_1st_LEVEL            = 3,
	ELGC_INSIDE_LEVEL              = 4,
	ELGC_UNDER_1st_LEVEL           = 5,
	ELGC_UNDER_2nd_LEVEL           = 6,
	ELGC_MAX                       = 7
};


// Enum BLGame.ABLDef.TextInputMode
enum class ETextInputMode : uint8_t
{
	INPUT_MODE_NONE                = 0,
	INPUT_MODE_TEXT_WAIT           = 1,
	INPUT_MODE_TEXT_START          = 2,
	INPUT_MODE_KEY_SET_START       = 3,
	INPUT_MODE_AWE_WEB_START       = 4,
	INPUT_MODE_MAX                 = 5
};


// Enum BLGame.ABLDef.EMinimapTooltipType
enum class EMinimapTooltipType : uint8_t
{
	EMinimapTooltipType_Story      = 0,
	EMinimapTooltipType_Episode    = 1,
	EMinimapTooltipType_Npc        = 2,
	EMinimapTooltipType_FieldRaid  = 3,
	EMinimapTooltipType_InstanceRevivalPoint = 4,
	EMinimapTooltipType_MAX        = 5
};


// Enum BLGame.ABLDef.EMinimapFilter
enum class EMinimapFilter : uint8_t
{
	EMinimapFilter_Story           = 0,
	EMinimapFilter_Royal           = 1,
	EMinimapFilter_Episode         = 2,
	EMinimapFilter_Merchant        = 3,
	EMinimapFilter_Waypoint        = 4,
	EMinimapFilter_Return          = 5,
	EMinimapFilter_Revival         = 6,
	EMinimapFilter_RevivalPoint    = 7,
	EMinimapFilter_RO              = 8,
	EMinimapFilter_Dungeon         = 9,
	EMinimapFilter_Party           = 10,
	EMinimapFilter_Portal          = 11,
	EMinimapFilter_Guild           = 12,
	EMinimapFilter_Warehouse       = 13,
	EMinimapFilter_LimitedRank     = 14,
	EMinimapFilter_Raid            = 15,
	EMinimapFilter_Exchange        = 16,
	EMinimapFilter_Craft           = 17,
	EMinimapFilter_Repair          = 18,
	EMinimapFilter_Strengthen      = 19,
	EMinimapFilter_Guide           = 20,
	EMinimapFilter_MAX             = 21
};


// Enum BLGame.ABLDef.EWorldMapPlayerIconType
enum class EWorldMapPlayerIconType : uint8_t
{
	EWorldMapPlayerIconType_Player = 0,
	EWorldMapPlayerIconType_Party  = 1,
	EWorldMapPlayerIconType_DeadBody = 2,
	EWorldMapPlayerIconType_Raid_Member = 3,
	EWorldMapPlayerIconType_Max    = 4
};


// Enum BLGame.ABLDef.EWorldMapMode
enum class EWorldMapMode : uint8_t
{
	EWorldMapMode_NONE             = 0,
	EWorldMapMode_WorldMap         = 1,
	EWorldMapMode_WayPoint         = 2,
	EWorldMapMode_PositionSend     = 3,
	EWorldMapMode_Teleport         = 4,
	EWorldMapMode_Max              = 5
};


// Enum BLGame.ABLDef.EChatChannelType
enum class EChatChannelType : uint8_t
{
	EChatChannelType_Chat          = 0,
	EChatChannelType_SystemChat    = 1,
	EChatChannelType_MAX           = 2
};


// Enum BLGame.ABLDef.EBLAnimWeaponState
enum class EBLAnimWeaponState : uint8_t
{
	EBLAnimWeaponState_Sheathe     = 0,
	EBLAnimWeaponState_Unsheathe   = 1,
	EBLAnimWeaponState_MAX         = 2
};


// Enum BLGame.ABLDef.EChatMode
enum class EChatMode : uint8_t
{
	EChatMode_HIDE                 = 0,
	EChatMode_SHOW_ALL             = 1,
	EChatMode_INPUT                = 2,
	EChatMode_MAX                  = 3
};


// Enum BLGame.ABLDef.TargetFrameType
enum class ETargetFrameType : uint8_t
{
	TFT_WEAK                       = 0,
	TFT_NORMAL                     = 1,
	TFT_SKILLED                    = 2,
	TFT_ELITE                      = 3,
	TFT_BOSS                       = 4,
	TFT_MAX                        = 5
};


// Enum BLGame.ABLDef.AlertNotifierType
enum class EAlertNotifierType : uint8_t
{
	ANT_NORMAL                     = 0,
	ANT_NEW                        = 1,
	ANT_COMPETE                    = 2,
	ANT_SEQUNCIAL_QUEST            = 3,
	ANT_MAX                        = 4
};


// Enum BLGame.ABLDef.ActionBarMultiSlotType
enum class EActionBarMultiSlotType : uint8_t
{
	ABMST_SKILL                    = 0,
	ABMST_ITEMSKILL                = 1,
	ABMST_ITEM                     = 2,
	ABMST_MOUNT                    = 3,
	ABMST_PET                      = 4,
	ABMST_MAX                      = 5
};


// Enum BLGame.ABLDef.EQTESkillSlotType
enum class EQTESkillSlotType : uint8_t
{
	EQTESkillSlotType_Slot1        = 0,
	EQTESkillSlotType_Slot2        = 1,
	EQTESkillSlotType_None         = 2,
	EQTESkillSlotType_MAX          = 3
};


// Enum BLGame.ABLDef.ActionBarSlotType
enum class EActionBarSlotType : uint8_t
{
	ABST_NONE                      = 0,
	ABST_SKILL_KEY                 = 1,
	ABST_SKILL_ACTIVE              = 2,
	ABST_SKILL_QTE_ACTIVE          = 3,
	ABST_MULTI                     = 4,
	ABST_VOLUNTARY                 = 5,
	ABST_SKILL_QTE                 = 6,
	ABST_INTERACTION_QTE           = 7,
	ABST_MOUNT_SKILL               = 8,
	ABST_MPFFAVORITE               = 9,
	ABST_AUTOPATH_QTE              = 10,
	ABST_SKILL_STANCE              = 11,
	ABST_SKILL_STANCESKILL         = 12,
	ABST_SKILL_STANCESKILL01       = 13,
	ABST_SKILL_NONSTANCESKILL      = 14,
	ABST_SKILL_STANCESKILL_QTE     = 15,
	ABST_MAX                       = 16
};


// Enum BLGame.ABLDef.ActionBarCoolDownType
enum class EActionBarCoolDownType : uint8_t
{
	ABCDT_NORMAL                   = 0,
	ABCDT_GLOBAL                   = 1,
	ABCDT_MAX                      = 2
};


// Enum BLGame.ABLDef.SkillDeckTacticSlotType
enum class ESkillDeckTacticSlotType : uint8_t
{
	SDTST_NONE                     = 0,
	SDTST_STANCE                   = 1,
	SDTST_STANCE01                 = 2,
	SDTST_STANCE_SKILL             = 3,
	SDTST_STANCE_SKILL01           = 4,
	SDTST_NONSTANCE_SKILL          = 5,
	SDTST_MAX                      = 6
};


// Enum BLGame.ABLDef.AutoPathQTE
enum class EAutoPathQTE : uint8_t
{
	AutoPathQTE_MOVE               = 0,
	AutoPathQTE_CANCEL             = 1,
	AutoPathQTE_MAX                = 2
};


// Enum BLGame.ABLDef.EMountVehicleType
enum class EMountVehicleType : uint8_t
{
	EMountVehicle_Unmountable      = 0,
	EMountVehicle_HorseType        = 1,
	EMountVehicle_WyvernType       = 2,
	EMountVehicle_StandingSeatType = 3,
	EMountVehicle_FlyingBoatType   = 4,
	EMountVehicle_MAX              = 5
};


// Enum BLGame.ABLDef.OrderType
enum class EOrderType : uint8_t
{
	OT_DAILYWEEKLY                 = 0,
	OT_TUTORIAL                    = 1,
	OT_MAX                         = 2
};


// Enum BLGame.ABLDef.VFX_SCALE_TYPE
enum class EVFX_SCALE_TYPE : uint8_t
{
	VST_NOSCALE                    = 0,
	VST_HEIGHT                     = 1,
	VST_RADIUS                     = 2,
	VST_LARGER                     = 3,
	VST_SMALLER                    = 4,
	VST_MAX                        = 5
};


// Enum BLGame.ABLDef.EHostileTargetType
enum class EHostileTargetType : uint8_t
{
	EHostileTargetType_None        = 0,
	EHostileTargetType_Enemy       = 1,
	EHostileTargetType_MAX         = 2
};


// Enum BLGame.ABLDef.EFriendlyTargetType
enum class EFriendlyTargetType : uint8_t
{
	EFriendlyTargetType_None       = 0,
	EFriendlyTargetType_Prop       = 1,
	EFriendlyTargetType_Npc        = 2,
	EFriendlyTargetType_Loot       = 3,
	EFriendlyTargetType_PutDown    = 4,
	EFriendlyTargetType_Door       = 5,
	EFriendlyTargetType_MAX        = 6
};


// Enum BLGame.ABLDef.MaterialOffenceType
enum class EMaterialOffenceType : uint8_t
{
	MOT_None                       = 0,
	MOT_Blade                      = 1,
	MOT_Blunt                      = 2,
	MOT_Arrow                      = 3,
	MOT_NPC_Blade                  = 4,
	MOT_NPC_Blunt                  = 5,
	MOT_NPC_Arrow                  = 6,
	MOT_BladePullOut               = 7,
	MOT_NPC_BladePullOut           = 8,
	MOT_MAX                        = 9
};


// Enum BLGame.ABLDef.VisualMaterialDefenceType
enum class EVisualMaterialDefenceType : uint8_t
{
	VMDT_None                      = 0,
	VMDT_Skin                      = 1,
	VMDT_Insect                    = 2,
	VMDT_Stone                     = 3,
	VMDT_Wood                      = 4,
	VMDT_Water                     = 5,
	VMDT_GoldShield                = 6,
	VMDT_WaterShield               = 7,
	VMDT_VoluntaryShield           = 8,
	VMDT_MAX                       = 9
};


// Enum BLGame.ABLDef.SoundMaterialDefenceType
enum class ESoundMaterialDefenceType : uint8_t
{
	SMDT_None                      = 0,
	SMDT_ThinWood                  = 1,
	SMDT_HeavyWood                 = 2,
	SMDT_Stone                     = 3,
	SMDT_Fabric                    = 4,
	SMDT_ThinLeather               = 5,
	SMDT_HeavyLeather              = 6,
	SMDT_PlateMail                 = 7,
	SMDT_ChainMail                 = 8,
	SMDT_WaterLittle               = 9,
	SMDT_WaterPlenty               = 10,
	SMDT_Sprit                     = 11,
	SMDT_GoldShield                = 12,
	SMDT_WaterShield               = 13,
	SMDT_VoluntaryShield           = 14,
	SMDT_MAX                       = 15
};


// Enum BLGame.ABLDef.EClimbMoveType
enum class EClimbMoveType : uint8_t
{
	EClimbMoveType_Idle            = 0,
	EClimbMoveType_Release         = 1,
	EClimbMoveType_StartHop        = 2,
	EClimbMoveType_Nudge           = 3,
	EClimbMoveType_HopUp           = 4,
	EClimbMoveType_DropDown        = 5,
	EClimbMoveType_MAX             = 6
};


// Enum BLGame.ABLDef.TargetSelectType
enum class ETargetSelectType : uint8_t
{
	TARGET_SELECT_DEFAULT          = 0,
	TARGET_SELECT_EX               = 1,
	AUTOTARGET_DEFAULT             = 2,
	AUTOTARGET_EX                  = 3,
	TargetSelectType_MAX           = 4
};


// Enum BLGame.ABLDef.EMeshOrientedCamMode
enum class EMeshOrientedCamMode : uint8_t
{
	MeshOrientedCam_FollowMeshZ    = 0,
	MeshOrientedCam_MAX            = 1
};


// Enum BLGame.ABLDef.EBleedCauseType
enum class EBleedCauseType : uint8_t
{
	EBleed_ByWeapon                = 0,
	EBleed_ByCrash                 = 1,
	EBleed_None                    = 2,
	EBleed_MAX                     = 3
};


// Enum BLGame.ABLDef.EnumSheatheAction
enum class EnumSheatheAction : uint8_t
{
	EnumSheatheAction_DoNothing    = 0,
	EnumSheatheAction_Sheathe      = 1,
	EnumSheatheAction_Unsheathe    = 2,
	EnumSheatheAction_MAX          = 3
};


// Enum BLGame.ABLDef.AREA_TARGETING_TYPE
enum class EAREA_TARGETING_TYPE : uint8_t
{
	ATT_SKILL                      = 0,
	ATT_ITEM                       = 1,
	ATT_MAX                        = 2
};


// Enum BLGame.ABLDef.HIT_DAMAGE_TYPE
enum class EHIT_DAMAGE_TYPE : uint8_t
{
	HDT_NONE                       = 0,
	HDT_SHORT_SWORD                = 1,
	HDT_LONG_SWORD                 = 2,
	HDT_STAFF                      = 3,
	HDT_ARROW                      = 4,
	HDT_WHIP                       = 5,
	HDT_HAMMER                     = 6,
	HDT_MAX                        = 7
};


// Enum BLGame.ABLDef.EBLImpactType
enum class EBLImpactType : uint8_t
{
	BLIT_None                      = 0,
	BLIT_LightImpact               = 1,
	BLIT_Slash                     = 2,
	BLIT_Pierce                    = 3,
	BLIT_Blunt                     = 4,
	BLIT_MAX                       = 5
};


// Enum BLGame.ABLDef.CY_NOTI_ClientStatus
enum class ECY_NOTI_ClientStatus : uint8_t
{
	CY_NOTI_START_GAME_SUCCESS     = 0,
	CY_NOTI_SELECT_WORLD           = 1,
	CY_NOTI_SELECT_WORLD_SUCCESS   = 2,
	CY_NOTI_CREATE_ROLE_SUCCESS    = 3,
	CY_NOTI_LOGIN_SCENE_SUCCESS    = 4,
	CY_NOTI_CLIENT_FIRST_CRASH     = 5,
	CY_NOTI_CLIENT_CRASH           = 6,
	CY_NOTI_MAX                    = 7
};


// Enum BLGame.ABLDef.EBLPartyMatchingState
enum class EBLPartyMatchingState : uint8_t
{
	EBLPartyMatchingState_None     = 0,
	EBLPartyMatchingState_PositionSelecting = 1,
	EBLPartyMatchingState_CheckPosition = 2,
	EBLPartyMatchingState_Matching = 3,
	EBLPartyMatchingState_RandomMatching = 4,
	EBLPartyMatchingState_MAX      = 5
};


// Enum BLGame.ABLDef.ECastingStopType
enum class ECastingStopType : uint8_t
{
	ECastingStopType_T_FullStop    = 0,
	ECastingStopType_T_Cancel      = 1,
	ECastingStopType_T_CurrentStop = 2,
	ECastingStopType_T_MAX         = 3
};


// Enum BLGame.ABLDef.EWarRealmResult
enum class EWarRealmResult : uint8_t
{
	EWarRealmResult_Win            = 0,
	EWarRealmResult_Lose           = 1,
	EWarRealmResult_Draw           = 2,
	EWarRealmResult_MAX            = 3
};


// Enum BLGame.ABLDef.EFaceMorphPart
enum class EFaceMorphPart : uint8_t
{
	EFaceMorphPart_Forehead        = 0,
	EFaceMorphPart_Eye             = 1,
	EFaceMorphPart_Nose            = 2,
	EFaceMorphPart_Mouth           = 3,
	EFaceMorphPart_Jaw             = 4,
	EFaceMorphPart_Cheek           = 5,
	EFaceMorphPart_Ear             = 6,
	EFaceMorphPart_Max             = 7
};


// Enum BLGame.ABLDef.EWayPointType
enum class EWayPointType : uint8_t
{
	EWayPointType_Start            = 0,
	EWayPointType_Arrive           = 1,
	EWayPointType_MAX              = 2
};


// Enum BLGame.ABLDef.EDialogType
enum class EDialogType : uint8_t
{
	EDialogType_None               = 0,
	EDialogType_PartyInvitation    = 1,
	EDialogType_PartyInvitationReceived = 2,
	EDialogType_Revival            = 3,
	EDialogType_RevivalWaiting     = 4,
	EDialogType_RevivalByOthers    = 5,
	EDialogType_RevivalBySpiritualAwaker = 6,
	EDialogType_ItemDestruction    = 7,
	EDialogType_ItemDestructionWithQuestFail = 8,
	EDialogType_GoToLobby          = 9,
	EDialogType_Error              = 10,
	EDialogType_GameExit           = 11,
	EDialogType_DeleteCharacter    = 12,
	EDialogType_DropQuest          = 13,
	EDialogType_ServerLoginFail    = 14,
	EDialogType_LoginWaiting       = 15,
	EDialogType_ReStartQuest       = 16,
	EDialogType_EntrustPartyLeader = 17,
	EDialogType_BanishFromParty    = 18,
	EDialogType_PartySummon_Summoner = 19,
	EDialogType_PartySummon_Summonee = 20,
	EDialogType_LeaveParty         = 21,
	EDialogType_DissolveParty      = 22,
	EDialogType_MoveToPartyChannel = 23,
	EDialogType_ServerConnectionError = 24,
	EDialogType_PrivateTradeSending = 25,
	EDialogType_PrivateTradeAccept = 26,
	EDialogType_SystemSettingCanceledApply = 27,
	EDialogType_SystemSettingReset = 28,
	EDialogType_InterfaceSettingCanceledApply = 29,
	EDialogType_InterfaceSettingReset = 30,
	EDialogType_CreateGuildAgreement = 31,
	EDialogType_LeaveGuildAgreement = 32,
	EDialogType_RemoveGuildAgreement = 33,
	EDialogType_InviteGuildAgreement = 34,
	EDialogType_InviteGuildInputTarget = 35,
	EDialogType_DisbandGuildAgreement = 36,
	EDialogType_ModifyGuildMemberGradeAgreement = 37,
	EDialogType_DeleteMail         = 38,
	EDialogType_Tutorial           = 39,
	EDialogType_Conquest_SpecialWar_JoinReserve = 40,
	EDialogType_Conquest_SpecialWar_Join = 41,
	EDialogType_Conquest_SpecialWar_Join_CheckCondition = 42,
	EDialogType_Conquest_SpecialWar_Rejoin = 43,
	EDialogType_Conquest_SpecialWar_CancelWait = 44,
	EDialogType_Conquest_SpecialWar_Leave_NotComplete = 45,
	EDialogType_Conquest_SpecialWar_Leave_Complete = 46,
	EDialogType_Citadel_Ownership_Bid_Confirm = 47,
	EDialogType_Realm_Ownership_Leave = 48,
	EDialogType_GrantRPAgreement   = 49,
	EDialogType_Dungeon_Initialization = 50,
	EDialogType_Shop_PurchaseGiftItemCheck = 51,
	EDialogType_NPC_Craft_Confirm  = 52,
	ECustomDialogType_InventoryExpansionPurchase = 53,
	ECustomDialogType_Common_ChargeLumena = 54,
	ECustomDialogType_InventoryItemSplit = 55,
	ECustomDialogType_Revival_ConsumeLumena = 56,
	ECustomDialogType_Revival_ChargeLumena = 57,
	ECustomDialogType_EquipCustom_ChargeLumena = 58,
	EDialogType_EquipCustom_PotentialDisjoint = 59,
	ECustomDialogType_ChargeActingPoint = 60,
	ECustomDialogType_Foster_Result_Success = 61,
	ECustomDialogType_LumenaShop_PurchaseItem = 62,
	EDialogType_ChargeActingPoint_Restriction = 63,
	EDialogType_PC_Craft_Confirm   = 64,
	EDialogType_Admission_Restriction = 65,
	EDialogType_Mission_Refresh    = 66,
	EDialogType_KickOut_Server     = 67,
	EDialogType_KickOut_Server_Select = 68,
	EDialogType_Foster_Result_Fail = 69,
	EDialogType_Teleport_TeleportConfirm = 70,
	EDialogType_Teleport_RegistConfirm = 71,
	EDialogType_Teleport_UnregistConfirm = 72,
	EDialogType_Colosseum_Register_Cancel = 73,
	EDialogType_Colosseum_Join     = 74,
	EDialogType_Colosseum_Join_WaitServer = 75,
	EDialogType_Colosseum_Join_WaitOther = 76,
	EDialogType_Colosseum_Join_CheckCondition = 77,
	EDialogType_Colosseum_Battle_Exit = 78,
	EDialogType_Bot_Report         = 79,
	EDialogType_AllServer_Login_Fail = 80,
	EDialogType_Server_Waiting_Full = 81,
	EDialogType_AuthServer_Redirect_Fail = 82,
	EDialogType_Customizing_WrongFile = 83,
	EDialogType_Customizing_LoadFile_Confirm = 84,
	EDialogType_Customizing_Reset_Confirm = 85,
	EDialogType_Customizing_Prev_Confirm = 86,
	EDialogType_Customizing_Preset_Confirm = 87,
	EDialogType_Customizing_Load_TemporaryFile = 88,
	EDialogType_Customizing_Save_Overwrite = 89,
	EDialogType_Customizing_Load_Confirm = 90,
	EDialogType_Customizing_Load_Error = 91,
	EDialogType_LoginServerError_Preseason = 92,
	EDialogType_Start_Enter_Fail_Preseason = 93,
	ECustomDialogType_Reset_Return = 94,
	EDialogType_Friend_Add         = 95,
	EDialogType_Friend_Add_Impossibility = 96,
	EDialogType_Friend_Add_Confirm = 97,
	EDialogType_Friend_Del_Confirm = 98,
	EDialogType_Looting_AdditionalLooting_Confirm = 99,
	EDialogType_CollectionBook_Term_Companion_Confirm = 100,
	ECustomDialogType_FlashShop_PurchaseItem = 101,
	ECustomDialogType_ChangeOverlapCharacterName = 102,
	ECustomDialogType_ChangeOverlapGuildName = 103,
	EDialogType_Chat_Reset         = 104,
	ECustomDialogType_WarehouseItemSplit = 105,
	EDialogType_Warehouse_ItemDestruction = 106,
	EDialogType_Warehouse_ItemDestructionWithQuestFail = 107,
	ECustomDialogType_RegistLimitedRankConfirm = 108,
	EDialogType_DelegateGuildLeader = 109,
	EDialogType_DelegateGuildLeaderAgreement = 110,
	EDialogType_BlockAddInputTarget = 111,
	EDialogType_BlockConfirm       = 112,
	EDialogType_AcceptDuel         = 113,
	EDialogType_AlertBondingOnEquip = 114,
	EDialogType_PartyMatchingCancel = 115,
	ECustomDialogType_PartyMatchingTeleport = 116,
	ECustomDialogType_Rune_ConfirmRemoveRune = 117,
	EDialogType_Rune_FullInventory = 118,
	EDialogType_Rune_NotEnoughGold = 119,
	EDialogType_Rune_NotEnoughLumena = 120,
	EDialogType_Rune_ConfirmEquipRune = 121,
	EDialogType_Rune_CheckRuneEquippedMaterial = 122,
	ECustomDialogType_Shop_PurchaseConfirmCheck = 123,
	EDialogType_AlreadyLogin       = 124,
	EDialogType_Colosseum_Cancel   = 125,
	ECustomDialogType_Shop_PurchaseAmountCheck = 126,
	ECustomDialogType_LumenaShop_PurchaseAmountCheck = 127,
	ECustomDialogType_FlashShop_PurchaseAmountCheck = 128,
	EDialogType_Guild_GuildWar_ConfirmDeclareWar = 129,
	EDialogType_Guild_GuildWar_ConfirmSurrenderWar = 130,
	EDialogType_Conquest_SpecialWar_Lumena_Join = 131,
	EDialogType_Death_InstanceRevivalConfirm = 132,
	EDialogType_Trasport_Confirm   = 133,
	EDialogType_SkillDeck_Reset    = 134,
	EDialogType_SkillDeck_Close    = 135,
	ECustomDialogType_Collection_GradeUpAdd_Result = 136,
	ECustomDialogType_RepairCost   = 137,
	ECustomDialogType_Craft_Skill_LevelUp = 138,
	ECustomDialogType_Craft_Skill_Promotion = 139,
	ECustomDialogType_Craft_Great_Success = 140,
	ECustomDialogType_Craft_Super_Success = 141,
	EDialogType_Craft_Skill_Select = 142,
	EDialogType_Craft_Skill_Change = 143,
	ECustomDialogType_InventoryItemSplitItemRepair = 144,
	EDialogType_Desynthesis_Check_Rune = 145,
	EDialogType_Escape_Confirm     = 146,
	EDialogType_Escape_Confirm_Final = 147,
	EDialogType_ItemEvolution_Confirm = 148,
	EDialogType_ItemSucceed_Confirm = 149,
	EDialogType_MP_GradeUpAdd_Confirm = 150,
	EDialogType_MP_SkillChange_Confirm = 151,
	EDialogType_MP_MonsterBall_Confirm = 152,
	EDialogType_Chat_FocusMode     = 153,
	EDialogType_Chat_NameNotAvalible = 154,
	EDialogType_Inven_Expansion    = 155,
	EDialogType_Random_Dungeon_Request_Cancel = 156,
	EDialogType_Appearance_Change_Add = 157,
	EDialogType_Gender_Change_Overwrite = 158,
	EDialogType_Gender_Change_Add  = 159,
	EDialogType_Appearance_Change_Reset = 160,
	EDialogType_Gender_Change_Reset = 161,
	EDialogType_OccupationWar_JoinCancelCheck = 162,
	EDialogType_OccupationWar_JoinCheck = 163,
	EDialogType_OccupationWar_CancelCheck = 164,
	EDialogType_OccupationWar_PopupExit = 165,
	ECustomDialogType_ChallengeTower_PartyMatchingTeleport = 166,
	EDialogType_ContentTokenNotEnouogh = 167,
	EDialogType_GemExchange_Caution = 168,
	EDialogType_SkillDeck_ChangeTactics = 169,
	EDialogType_SkillDeck_GemWithdrawCheck = 170,
	EDialogType_MassageBox         = 171,
	EDialogType_AddGemPieceOver    = 172,
	EDialogType_AddGemOver         = 173,
	EDialogType_MAX                = 174
};


// Enum BLGame.ABLDef.ETimeGapMode
enum class ETimeGapMode : uint8_t
{
	ETimeGapMode_Init              = 0,
	ETimeGapMode_Start             = 1,
	ETimeGapMode_End               = 2,
	ETimeGapMode_Print             = 3,
	ETimeGapMode_PrintAll          = 4,
	ETimeGapMode_Clear             = 5,
	ETimeGapMode_ClearAll          = 6,
	ETimeGapMode_MAX               = 7
};


// Enum BLGame.ABLDef.ENPCWalkingType
enum class ENPCWalkingType : uint8_t
{
	ENPCWalking_Narrow             = 0,
	ENPCWalking_Broad              = 1,
	ENPCWalking_MAX                = 2
};


// Enum BLGame.ABLDef.EReqActionType
enum class EReqActionType : uint8_t
{
	EReqActionType_Skill           = 0,
	EReqActionType_Interaction     = 1,
	EReqActionType_MAX             = 2
};


// Enum BLGame.ABLDef.ESprintState
enum class ESprintState : uint8_t
{
	ESprintState_None              = 0,
	ESprintState_Ready             = 1,
	ESprintState_Accel             = 2,
	ESprintState_Sprinting         = 3,
	ESprintState_OutDelay          = 4,
	ESprintState_MAX               = 5
};


// Enum BLGame.ABLDef.EInterpMoveCurveType
enum class EInterpMoveCurveType : uint8_t
{
	EInterpMoveCurveType_None      = 0,
	EInterpMoveCurveType_RC_Hitup  = 1,
	EInterpMoveCurveType_RC_Push   = 2,
	EInterpMoveCurveType_MAX       = 3
};


// Enum BLGame.ABLDef.EPawnOutLineColorType
enum class EPawnOutLineColorType : uint8_t
{
	EPawnOutLineColorType_MouseOver_None = 0,
	EPawnOutLineColorType_MouseOver_Prop = 1,
	EPawnOutLineColorType_MouseOver_Pawn_Friendly = 2,
	EPawnOutLineColorType_MouseOver_Pawn_Defensive = 3,
	EPawnOutLineColorType_MouseOver_Pawn_Aggressive = 4,
	EPawnOutLineColorType_Quest_Story = 5,
	EPawnOutLineColorType_Quest_Episode = 6,
	EPawnOutLineColorType_Focus_Owner = 7,
	EPawnOutLineColorType_Focus_Target = 8,
	EPawnOutLineColorType_MAX      = 9
};


// Enum BLGame.ABLDef.EPawnOutLineType
enum class EPawnOutLineType : uint8_t
{
	EPawnOutLineType_None          = 0,
	EPawnOutLineType_Quest_Episode = 1,
	EPawnOutLineType_Quest_Story   = 2,
	EPawnOutLineType_FriendlyAutoTarget = 3,
	EPawnOutLineType_MouseOver     = 4,
	EPawnOutLineType_Focus_Owner   = 5,
	EPawnOutLineType_Focus_Target  = 6,
	EPawnOutLineType_MAX           = 7
};


// Enum BLGame.ABLDef.EPawnCompHidden
enum class EPawnCompHidden : uint8_t
{
	EPawnCompHidden_NotLoadResource = 0,
	EPawnCompHidden_MAX            = 1
};


// Enum BLGame.ABLDef.EPawnHidden
enum class EPawnHidden : uint8_t
{
	EPawnHidden_ToggleHidden       = 0,
	EPawnHidden_Talk               = 1,
	EPawnHidden_ConditionPhase_Spirit = 2,
	EPawnHidden_ConditionPhase_Stealth = 3,
	EPawnHidden_CheckHidePawn      = 4,
	EPawnHidden_Cinematic          = 5,
	EPawnHidden_ShowConditionalPhase = 6,
	EPawnHidden_Quest              = 7,
	EPawnHidden_Trap               = 8,
	EPawnHidden_Stealth            = 9,
	EPawnHidden_MAX                = 10
};


// Enum BLGame.ABLDef.BLWeaponStatus
enum class EBLWeaponStatus : uint8_t
{
	BLWS_None                      = 0,
	BLWS_Sheathe                   = 1,
	BLWS_Unsheathe                 = 2,
	BLWS_MAX                       = 3
};


// Enum BLGame.ABLDef.BLCombatStatus
enum class EBLCombatStatus : uint8_t
{
	BLCS_None                      = 0,
	BLCS_Peace                     = 1,
	BLCS_Combat                    = 2,
	BLCS_MAX                       = 3
};


// Enum BLGame.ABLDef.FootStepSize
enum class EFootStepSize : uint8_t
{
	FootStepSize_Small             = 0,
	FootStepSize_Medium            = 1,
	FootStepSize_Large             = 2,
	FootStepSize_Huge              = 3,
	FootStepSize_None              = 4,
	FootStepSize_MAX               = 5
};


// Enum BLGame.ABLDef.DialogCameraType
enum class EDialogCameraType : uint8_t
{
	DialogCameraType_FREE          = 0,
	DialogCameraType_FULL          = 1,
	DialogCameraType_THREE_PERSON  = 2,
	DialogCameraType_CUSTOM        = 3,
	DialogCameraType_INHERIT       = 4,
	DialogCameraType_WAIST         = 5,
	DialogCameraType_MEDIUM        = 6,
	DIalogCameraType_STORE         = 7,
	DialogCameraType_MAX           = 8
};


// Enum BLGame.ABLDef.TalkCameraType
enum class ETalkCameraType : uint8_t
{
	TalkCamType_FREE               = 0,
	TalkCamType_UPPER              = 1,
	TalkCamType_FULL               = 2,
	TalkCamType_MAX                = 3
};


// Enum BLGame.ABLUIDef.ETooltipType
enum class ETooltipType : uint8_t
{
	ETooltipType_Item              = 0,
	ETooltipType_EquippedItem      = 1,
	ETooltipType_Skill             = 2,
	ETooltipType_AbnormalStatus    = 3,
	ETooltipType_Voluntary         = 4,
	ETooltipType_PCHP              = 5,
	ETooltipType_PCSR              = 6,
	ETooltipType_PCEnergy          = 7,
	ETooltipType_MiniMap_NPC       = 8,
	ETooltipType_MiniMap_QuestArea = 9,
	ETooltipType_MiniMap_QuestMaker = 10,
	ETooltipType_CUSTOM            = 11,
	ETooltipType_AUTO              = 12,
	ETooltipType_PCEnergy_Mount    = 13,
	ETooltipType_MountSkill        = 14,
	ETooltipType_MailBoxCounter    = 15,
	ETooltipType_Token             = 16,
	ETooltipType_AbnormalStatusGroup = 17,
	ETooltipType_MiniMap_Prop      = 18,
	ETooltipType_Level             = 19,
	ETooltipType_SpecialWarMedal   = 20,
	ETooltipType_NextWeek_Expactation_Rank = 21,
	ETooltipType_Element_Guage     = 22,
	ETooltipType_Pet               = 23,
	ETooltipType_Lumena            = 24,
	ETooltipType_BP                = 25,
	ETooltipType_CP                = 26,
	ETooltipType_DP                = 27,
	ETooltipType_RP                = 28,
	ETooltipType_Gather            = 29,
	ETooltipType_Craft             = 30,
	ETooltipType_Inventory_Lock    = 31,
	ETooltipType_CraftUI_Acting    = 32,
	ETooltipType_CraftUI_Skill     = 33,
	ETooltipType_EquipCustom_LegendOption = 34,
	ETooltipType_MailBox_Item      = 35,
	ETooltipType_Mission_Refresh   = 36,
	ETooltipType_MountSkill_Passive = 37,
	ETooltipType_PetSkill          = 38,
	ETooltipType_FellowSkill       = 39,
	ETooltipType_Mount             = 40,
	ETooltipType_Fellow            = 41,
	ETooltipType_CRAFT_ITEM_ACTING = 42,
	ETooltipType_FieldRaid         = 43,
	ETooltipType_MonsterBook_Repeat = 44,
	ETooltipType_LumenaShop_Addlumena = 45,
	ETooltipType_LumenaShop_Item   = 46,
	ETooltipType_Skill_Deck_Tab_Button = 47,
	ETooltipType_Cinis             = 48,
	ETooltipType_OTHER_CHANNEL     = 49,
	ETooltipType_DuelResult        = 50,
	ETooltipType_Tanker            = 51,
	ETooltipType_Dealer            = 52,
	ETooltipType_Healer            = 53,
	ETooltipType_PartyMatching     = 54,
	ETooltipType_Private_Trade_Item = 55,
	ETooltipType_GuildManagement_History = 56,
	ETooltipType_WorldMap_COZoneName = 57,
	ETooltipType_InstanceRevivalPoint = 58,
	ETooltipType_SkillTree_LockState = 59,
	ETooltipType_MPF_Count         = 60,
	ETooltipType_SkillTree         = 61,
	ETooltipType_MPF_Fatigue       = 62,
	ETooltipType_SkillTreeStat     = 63,
	ETooltipType_Anima             = 64,
	ETooltipType_GradeUp_Chance    = 65,
	ETooltipType_Minimap_TOD       = 66,
	ETooltipType_QuestAlert_AutoPathFind = 67,
	ETooltipType_QuestAlert_Minimize = 68,
	ETooltipType_ActionBar_Favorite_Left = 69,
	ETooltipType_ActionBar_Favorite_Right = 70,
	ETooltipType_Gear_Score        = 71,
	ETooltipType_Minimap_Extension = 72,
	ETooltipType_AppearanceChangeType = 73,
	ETooltipType_PartyMatching_RandomMatchingCount = 74,
	ETooltipType_HUD_ICONS_LT      = 75,
	ETooltipType_ActionBar_Skill   = 76,
	ETooltipType_CT                = 77,
	ETooltipType_SkillDeck_Stance  = 78,
	ETooltipType_SkillDeck_StanceSkill = 79,
	ETooltipType_SkillDeck_NonStanceSkill = 80,
	ETooltipType_SkillDeck_SkillGem = 81,
	ETooltipType_SkillDeck_GemPiece = 82,
	ETooltipType_PCGearScore       = 83,
	ETooltipType_SkillDeck_SelectiveSkillGem = 84,
	ETooltipType_MAX               = 85
};


// Enum BLGame.ABLUIDef.EActionScript_QuestType
enum class EActionScript_QuestType : uint8_t
{
	EActionScript_QuestType_Episode = 0,
	EActionScript_QuestType_Story  = 1,
	EActionScript_QuestType_Monster = 2,
	EActionScript_QuestType_Royal  = 3,
	EActionScript_QuestType_Guide  = 4,
	EActionScript_QuestType_MAX    = 5
};


// Enum BLGame.ABLUIDef.EWarConquestScoreBoardType
enum class EWarConquestScoreBoardType : uint8_t
{
	EWarConquestScoreBoardType_RO  = 0,
	EWarConquestScoreBoardType_Colosseum = 1,
	EWarConquestScoreBoardType_MAX = 2
};


// Enum BLGame.ABLUIDef.EBLMissionUIState
enum class EBLMissionUIState : uint8_t
{
	EBLMissionUIState_None         = 0,
	EBLMissionUIState_Prepare      = 1,
	EBLMissionUIState_Process      = 2,
	EBLMissionUIState_Success      = 3,
	EBLMissionUIState_Fail         = 4,
	EBLMissionUIState_MAX          = 5
};


// Enum BLGame.ABLUIDef.EBLMissionIconType
enum class EBLMissionIconType : uint8_t
{
	EBLMissionIconType_None        = 0,
	EBLMissionIconType_Demolition  = 1,
	EBLMissionIconType_Killer      = 2,
	EBLMissionIconType_Research    = 3,
	EBLMissionIconType_Chase       = 4,
	EBLMissionIconType_Battle      = 5,
	EBLMissionIconType_Craft       = 6,
	EBLMissionIconType_Alchemy     = 7,
	EBLMissionIconType_Asceticism  = 8,
	EBLMissionIconType_MAX         = 9
};


// Enum BLGame.ABLUIDef.EBLSkillDeckTabType
enum class EBLSkillDeckTabType : uint8_t
{
	EBLSkillDeckTabType_Stance     = 0,
	EBLSkillDeckTabType_NonStance  = 1,
	EBLSkillDeckTabType_Parameter  = 2,
	EBLSkillDeckTabType_MAX        = 3
};


// Enum BLGame.ABLUIDef.EBLSkillShortCutUISlotIndex
enum class EBLSkillShortCutUISlotIndex : uint8_t
{
	EBLSkillShortCutUISlotIndex_Stance = 0,
	EBLSkillShortCutUISlotIndex_StanceSkill = 1,
	EBLSkillShortCutUISlotIndex_StanceSkill01 = 2,
	EBLSkillShortCutUISlotIndex_StanceSkill02 = 3,
	EBLSkillShortCutUISlotIndex_Stance01 = 4,
	EBLSkillShortCutUISlotIndex_StanceSkill03 = 5,
	EBLSkillShortCutUISlotIndex_StanceSkill04 = 6,
	EBLSkillShortCutUISlotIndex_StanceSkill05 = 7,
	EBLSkillShortCutUISlotIndex_NonStanceSkill = 8,
	EBLSkillShortCutUISlotIndex_NonStanceSkill01 = 9,
	EBLSkillShortCutUISlotIndex_NonStanceSkill02 = 10,
	EBLSkillShortCutUISlotIndex_NonStanceSkill03 = 11,
	EBLSkillShortCutUISlotIndex_MAX = 12
};


// Enum BLGame.ABLUIDef.EUIJournalTabType
enum class EUIJournalTabType : uint8_t
{
	EUIJournal_Tab_None            = 0,
	EUIJournal_Tab_Story           = 1,
	EUIJournal_Tab_Episode         = 2,
	EUIJournal_Tab_Monster         = 3,
	EUIJournal_Tab_Royal           = 4,
	EUIJournal_Tab_Guide           = 5,
	EUIJournal_Tab_MAX             = 6
};


// Enum BLGame.ABLUIDef.EBLQTESlotAniType
enum class EBLQTESlotAniType : uint8_t
{
	EBLQTESlotAniType_Hide         = 0,
	EBLQTESlotAniType_Show         = 1,
	EBLQTESlotAniType_KeyPress     = 2,
	EBLQTESlotAniType_KeyRelease   = 3,
	EBLQTESlotAniType_MAX          = 4
};


// Enum BLGame.ABLUIDef.EBLTimerType
enum class EBLTimerType : uint8_t
{
	EBLTimerType_Default           = 0,
	EBLTimerType_ChallengeTower    = 1,
	EBLTimerType_ChallengeTowerBoss = 2,
	EBLTimerType_MAX               = 3
};


// Enum BLGame.ABLUIDef.ESkillTreeGroupsType
enum class ESkillTreeGroupsType : uint8_t
{
	SkillGroupsType_Key            = 0,
	SkillGroupsType_Active         = 1,
	SkillGroupsType_QTE            = 2,
	SkillGroupsType_Passive        = 3,
	SkillGroupsType_Stat           = 4,
	SkillGroupsType_MAX            = 5
};


// Enum BLGame.ABLUIDef.EBLQTEHUDExecuteSlotType
enum class EBLQTEHUDExecuteSlotType : uint8_t
{
	EBLQTEHUDExecuteSlotType_None  = 0,
	EBLQTEHUDExecuteSlotType_Interaction = 1,
	EBLQTEHUDExecuteSlotType_QuestItem = 2,
	EBLQTEHUDExecuteSlotType_AutoPath = 3,
	EBLQTEHUDExecuteSlotType_DeleteAutoPath = 4,
	EBLQTEHUDExecuteSlotType_Max   = 5
};


// Enum BLGame.ABLUIDef.EShortcutSlotType
enum class EShortcutSlotType : uint8_t
{
	EShortcutSlotType_None         = 0,
	EShortcutSlotType_Skill        = 1,
	EShortcutSlotType_Item         = 2,
	EShortcutSlotType_Interaction  = 3,
	EShortcutSlotType_Voluntary    = 4,
	EShortcutSlotType_MountSkill   = 5,
	EShortcutSlotType_QuestItem    = 6,
	EShortcutSlotType_Mount        = 7,
	EShortcutSlotType_Pet          = 8,
	EShortcutSlotType_AutoPath     = 9,
	EShortcutSlotType_Max          = 10
};


// Enum BLGame.ABLUIDef.EUIRuneSlateEffectType
enum class EUIRuneSlateEffectType : uint8_t
{
	EUIRuneSlateEffectType_Progress = 0,
	EUIRuneSlateEffectType_Fail    = 1,
	EUIRuneSlateEffectType_Success = 2,
	EUIRuneSlateEffectType_GreateSuccess = 3,
	EUIRuneSlateEffectType_Cancel  = 4,
	EUIRuneSlateEffectType_MAX     = 5
};


// Enum BLGame.ABLUIDef.EMailWriteForbid
enum class EMailWriteForbid : uint8_t
{
	EMailWriteForbid_NONE          = 0,
	EMailWriteForbid_Title         = 1,
	EMailWriteForbid_Content       = 2,
	EMailWriteForbid_Max           = 3
};


// Enum BLGame.ABLUIDef.EMailWriteOpenType
enum class EMailWriteOpenType : uint8_t
{
	EMailWriteOpenType_New         = 0,
	EMailWriteOpenType_Return      = 1,
	EMailWriteOpenType_Max         = 2
};


// Enum BLGame.ABLUIDef.EMailBoxState
enum class EMailBoxState : uint8_t
{
	EMailBoxState_NONE             = 0,
	EMailBoxState_Standard         = 1,
	EMailBoxState_Send             = 2,
	EMailBoxState_Keep             = 3,
	EMailBoxState_Max              = 4
};


// Enum BLGame.ABLUIDef.EUI_ItemCategory
enum class EUI_ItemCategory : uint8_t
{
	EUI_ItemCategory_None          = 0,
	EUI_ItemCategory_Rune          = 1,
	EUI_ItemCategory_RuneCraftMaterial = 2,
	EUI_ItemCategory_MP_Material   = 3,
	EUI_ItemCategory_GradeUp_Special_Material = 4,
	EUI_ItemCategory_MAX           = 5
};


// Enum BLGame.ABLUIDef.EDialogOption
enum class EDialogOption : uint8_t
{
	EDialogOption_Normal           = 0,
	EDialogOption_Input            = 1,
	EDialogOption_Radio            = 2,
	EDialogOption_Label            = 3,
	EDialogOption_NumberStepper    = 4,
	EDialogOption_Slot             = 5,
	EDialogOption_Naming_Input     = 6,
	EDialogOption_GoldUnit         = 7,
	EDialogOption_Amount           = 8,
	EDialogOption_Living           = 9,
	EDialogOption_CraftSuccess     = 10,
	EDialogOption_BattleFieldApplyConfirm = 11,
	EDialogOption_MAX              = 12
};


// Enum BLGame.ABLUIDef.EDialogAlign
enum class EDialogAlign : uint8_t
{
	EDialogAlign_Default           = 0,
	EDialogAlign_LT                = 1,
	EDialogAlign_CT                = 2,
	EDialogAlign_RT                = 3,
	EDialogAlign_LM                = 4,
	EDialogAlign_CM                = 5,
	EDialogAlign_RM                = 6,
	EDialogAlign_LB                = 7,
	EDialogAlign_CB                = 8,
	EDialogAlign_RB                = 9,
	EDialogAlign_MAX               = 10
};


// Enum BLGame.ABLUIDef.EBLMPFSkillList
enum class EBLMPFSkillList : uint8_t
{
	EBLMPFSkillList_Rare           = 0,
	EBLMPFSkillList_Epic           = 1,
	EBLMPFSkillList_Legendary      = 2,
	EBLMPFSkillList_MAX            = 3
};


// Enum BLGame.ABLUIDef.ECB_CompanionType
enum class ECB_CompanionType : uint8_t
{
	ECB_CompanionType_None         = 0,
	ECB_CompanionType_MOUNT_GROUND = 1,
	ECB_CompanionType_MOUNT_FLY    = 2,
	ECB_CompanionType_PET          = 3,
	ECB_CompanionType_FELLOW       = 4,
	ECB_CompanionType_MAX          = 5
};


// Enum BLGame.ABLUIDef.CollectionBookTabEnum
enum class ECollectionBookTabEnum : uint8_t
{
	COLLECTIONBOOK_TAB_ALL         = 0,
	COLLECTIONBOOK_TAB_MOUNT_GROUND = 1,
	COLLECTIONBOOK_TAB_MOUNT_FLY   = 2,
	COLLECTIONBOOK_TAB_PET         = 3,
	COLLECTIONBOOK_TAB_FELLOW      = 4,
	COLLECTIONBOOK_TAB_MAXCOUNT    = 5,
	COLLECTIONBOOK_TAB_MAX         = 6
};


// Enum BLGame.ABLUIDef.CustomizeActionScriptUIType
enum class ECustomizeActionScriptUIType : uint8_t
{
	CM_AS_UI_T_List                = 0,
	CM_AS_UI_T_CheckBox            = 1,
	CM_AS_UI_T_CloseEyeCheckBox    = 2,
	CM_AS_UI_T_WhispyHairCheckBox  = 3,
	CM_AS_UI_T_Slider              = 4,
	CM_AS_UI_T_Radio               = 5,
	CM_AS_UI_T_DropDown            = 6,
	CM_AS_UI_T_MAX                 = 7
};


// Enum BLGame.ABLUIDef.EBLChallengeTowerTimerType
enum class EBLChallengeTowerTimerType : uint8_t
{
	EBLChallengeTowerTimerType_WaitingTime = 0,
	EBLChallengeTowerTimerType_BonusTime = 1,
	EBLChallengeTowerTimerType_MAX = 2
};


// Enum BLGame.ABLUIDef.CustomizeActionScriptUIEnum
enum class ECustomizeActionScriptUIEnum : uint8_t
{
	CM_AS_UI_UNDEFINED             = 0,
	CM_AS_UI_ALLSTYLE_PRESET_LIST  = 1,
	CM_AS_UI_ALLBODY_PRESET_LIST   = 2,
	CM_AS_UI_ALLBODY_HEIGHT_SLIDER = 3,
	CM_AS_UI_ALLBODY_FAT_CROSS     = 4,
	CM_AS_UI_ALLBODY_MUSCLE_CROSS  = 5,
	CM_AS_UI_ALLSKIN_COLOR_LIST    = 6,
	CM_AS_UI_ALLSKIN_SHINE_SLIDER  = 7,
	CM_AS_UI_ALLLETHERCOLOR_COLOR_LIST_IN = 8,
	CM_AS_UI_ALLLETHERCOLOR_COLOR_LIST_OUT = 9,
	CM_AS_UI_ALLLETHERCOLOR_SHINE_SLIDER = 10,
	CM_AS_UI_HAIRSTYLE_PRESET_LIST = 11,
	CM_AS_UI_HAIRSTYLECHANGE_PRESET_LIST = 12,
	CM_AS_UI_HAIRSTYLECHANGE_COLOR_LIST = 13,
	CM_AS_UI_HAIRSTYLECHANGE_SHINE_SLIDER = 14,
	CM_AS_UI_FACESTYLE_WHISPYHAIR_CHECK = 15,
	CM_AS_UI_FACESTYLE_EYECLOSE_CHECK = 16,
	CM_AS_UI_FACESTYLE_PRESET_LIST = 17,
	CM_AS_UI_FACESTYLE_COLOR_LIST  = 18,
	CM_AS_UI_FACESTYLE_SHINE_SLIDER = 19,
	CM_AS_UI_FACEEYEBROW_WHISPYHAIR_CHECK = 20,
	CM_AS_UI_FACEEYEBROW_EYECLOSE_CHECK = 21,
	CM_AS_UI_FACEEYEBROW_FOREHEAD_PRESET_LIST = 22,
	CM_AS_UI_FACEEYEBROW_EYEBROW_PRESET_LIST = 23,
	CM_AS_UI_FACEEYEBROW_MATCHCOLOR_CHECK = 24,
	CM_AS_UI_FACEEYEBROW_COLOR_LIST = 25,
	CM_AS_UI_FACEEYE_WHISPYHAIR_CHECK = 26,
	CM_AS_UI_FACEEYE_EYECLOSE_CHECK = 27,
	CM_AS_UI_FACEEYE_PRESET_LIST   = 28,
	CM_AS_UI_FACEEYE_IRISSIZE_SLIDER = 29,
	CM_AS_UI_FACEEYE_IRISE_COLOR_LIST = 30,
	CM_AS_UI_FACEEYE_PULPIL_COLOR_LIST = 31,
	CM_AS_UI_FACEEYE_EYEBALL_COLOR_LIST = 32,
	CM_AS_UI_FACENOSE_WHISPYHAIR_CHECK = 33,
	CM_AS_UI_FACENOSE_EYECLOSE_CHECK = 34,
	CM_AS_UI_FACENOSE_PRESET_LIST  = 35,
	CM_AS_UI_FACEMOUTH_WHISPYHAIR_CHECK = 36,
	CM_AS_UI_FACEMOUTH_EYECLOSE_CHECK = 37,
	CM_AS_UI_FACEMOUTH_PRESET_LIST = 38,
	CM_AS_UI_FACEEAR_WHISPYHAIR_CHECK = 39,
	CM_AS_UI_FACEEAR_EYECLOSE_CHECK = 40,
	CM_AS_UI_FACEEAR_PRESET_LIST   = 41,
	CM_AS_UI_FACEEAR_EARPARTS_LIST = 42,
	CM_AS_UI_FACEJAW_WHISPYHAIR_CHECK = 43,
	CM_AS_UI_FACEJAW_EYECLOSE_CHECK = 44,
	CM_AS_UI_FACEJAW_PRESET_LIST   = 45,
	CM_AS_UI_FACECHEEK_WHISPYHAIR_CHECK = 46,
	CM_AS_UI_FACECHEEK_EYECLOSE_CHECK = 47,
	CM_AS_UI_FACECHEEK_PRESET_LIST = 48,
	CM_AS_UI_MAKEUPSTYLE_WHISPYHAIR_CHECK = 49,
	CM_AS_UI_MAKEUPSTYLE_EYECLOSE_CHECK = 50,
	CM_AS_UI_MAKEUPSTYLE_PRESET_LIST = 51,
	CM_AS_UI_MAKEUPEYESHADOW_WHISPYHAIR_CHECK = 52,
	CM_AS_UI_MAKEUPEYESHADOW_EYECLOSE_CHECK = 53,
	CM_AS_UI_MAKEUPEYESHADOW_PRESET_LIST = 54,
	CM_AS_UI_MAKEUPEYESHADOW_WHOLE_COLOR_SLIDER = 55,
	CM_AS_UI_MAKEUPEYESHADOW_BASE_COLOR_LIST = 56,
	CM_AS_UI_MAKEUPEYESHADOW_BASE_RANGE_SLIDER = 57,
	CM_AS_UI_MAKEUPEYESHADOW_BASE_DENSITY_SLIDER = 58,
	CM_AS_UI_MAKEUPEYESHADOW_DEYELID_COLOR_LIST = 59,
	CM_AS_UI_MAKEUPEYESHADOW_DEYELID_RANGE_SLIDER = 60,
	CM_AS_UI_MAKEUPEYESHADOW_DEYELID_DENSITY_SLIDER = 61,
	CM_AS_UI_MAKEUPEYESHADOW_UNDER_COLOR_LIST = 62,
	CM_AS_UI_MAKEUPEYESHADOW_UNDER_RANGE_SLIDER = 63,
	CM_AS_UI_MAKEUPEYESHADOW_UNDER_DENSITY_SLIDER = 64,
	CM_AS_UI_MAKEUPEYELINER_WHISPYHAIR_CHECK = 65,
	CM_AS_UI_MAKEUPEYELINER_EYECLOSE_CHECK = 66,
	CM_AS_UI_MAKEUPEYELINER_PRESET_LIST = 67,
	CM_AS_UI_MAKEUPEYELINER_UNDERLINE_RADIO = 68,
	CM_AS_UI_MAKEUPEYELINER_UNDERLINE_DENSITY_SLIDER = 69,
	CM_AS_UI_MAKEUPEYELINER_LINEPOS_SLIDER = 70,
	CM_AS_UI_MAKEUPEYELINER_LINEANGLE_SLIDER = 71,
	CM_AS_UI_MAKEUPEYELASH_WHISPYHAIR_CHECK = 72,
	CM_AS_UI_MAKEUPEYELASH_EYECLOSE_CHECK = 73,
	CM_AS_UI_MAKEUPEYELASH_PRESET_LIST = 74,
	CM_AS_UI_MAKEUPEYELASH_EYELASH_COLOR_LIST = 75,
	CM_AS_UI_MAKEUPEYELASH_DENSITY_SLIDER = 76,
	CM_AS_UI_MAKEUPLENS_WHISPYHAIR_CHECK = 77,
	CM_AS_UI_MAKEUPLENS_EYECLOSE_CHECK = 78,
	CM_AS_UI_MAKEUPLENS_MATCHSIZELEFTRIGHT_CHECK = 79,
	CM_AS_UI_MAKEUPLENS_LEFTLENSPRESET_LIST = 80,
	CM_AS_UI_MAKEUPLENS_LEFTLESNSCOLOR_LIST = 81,
	CM_AS_UI_MAKEUPLENS_RIGHTLENSPRESET_LIST = 82,
	CM_AS_UI_MAKEUPLENS_RIGHTLENSCOLOR_LIST = 83,
	CM_AS_UI_MAKEUPLIPSTIC_WHISPYHAIR_CHECK = 84,
	CM_AS_UI_MAKEUPLIPSTIC_EYECLOSE_CHECK = 85,
	CM_AS_UI_MAKEUPLIPSTIC_COLOR_LIST = 86,
	CM_AS_UI_MAKEUPLIPSTIC_DENSITY_SLIDER = 87,
	CM_AS_UI_MAKEUPLIPSTIC_RANGE_SLIDER = 88,
	CM_AS_UI_MAKEUPLIPGLOSS_WHISPYHAIR_CHECK = 89,
	CM_AS_UI_MAKEUPLIPGLOSS_EYECLOSE_CHECK = 90,
	CM_AS_UI_MAKEUPLIPGLOSS_DENSITY_SLIDER = 91,
	CM_AS_UI_MAKEUPLIPGLOSS_RANGE_SLIDER = 92,
	CM_AS_UI_MAKEUPLIPBLUSHER_WHISPYHAIR_CHECK = 93,
	CM_AS_UI_MAKEUPLIPBLUSHER_EYECLOSE_CHECK = 94,
	CM_AS_UI_MAKEUPLIPBLUSHER_COLOR_LIST = 95,
	CM_AS_UI_MAKEUPLIPBLUSHER_DENSITY_SLIDER = 96,
	CM_AS_UI_MAKEUPLIPBLUSHER_RANGE_SLIDER = 97,
	CM_AS_UI_MAKEUPHIGHLIGHTER_WHISPYHAIR_CHECK = 98,
	CM_AS_UI_MAKEUPHIGHLIGHTER_EYECLOSE_CHECK = 99,
	CM_AS_UI_MAKEUPHIGHLIGHTER_DENSITY_SLIDER = 100,
	CM_AS_UI_MAKEUPMOLE_WHISPYHAIR_CHECK = 101,
	CM_AS_UI_MAKEUPMOLE_EYECLOSE_CHECK = 102,
	CM_AS_UI_MAKEUPMOLE_DENSITY_SLIDER = 103,
	CM_AS_UI_MAKEUPMOLE_RANGE_SLIDER = 104,
	CM_AS_UI_DECOFACETATTOO_WHISPYHAIR_CHECK = 105,
	CM_AS_UI_DECOFACETATTOO_EYECLOSE_CHECK = 106,
	CM_AS_UI_DECOFACETATTOO_PRESET_LIST = 107,
	CM_AS_UI_DECOFACETATTOO_COLOR_LIST = 108,
	CM_AS_UI_DECOFACETATTOO_DENSITY_SLIDER = 109,
	CM_AS_UI_DECOFACETATTOO_MULTI_SLIDER = 110,
	CM_AS_UI_DECOBODYTATTOO_PRESET_LIST = 111,
	CM_AS_UI_DECOBODYTATTOO_COLOR_LIST = 112,
	CM_AS_UI_DECOBODYTATTOO_DENSITY_SLIDER = 113,
	CM_AS_UI_DECOBODYTATTOO_MULTI_SLIDER = 114,
	CM_AS_UI_DECOLETHERPATTERN_PRESET_LIST = 115,
	CM_AS_UI_DECOLETHERPATTERN_COLOR_LIST = 116,
	CM_AS_UI_DECOLETHERPATTERN_DENSITY_SLIDER = 117,
	CM_AS_UI_DECOSTAMP_WHISPYHAIR_CHECK = 118,
	CM_AS_UI_DECOSTAMP_EYECLOSE_CHECK = 119,
	CM_AS_UI_DECOSTAMP_PRESET_LIST = 120,
	CM_AS_UI_DECOSTAMP_COLOR_LIST  = 121,
	CM_AS_UI_DECOSTAMP_XPOS_CROSS  = 122,
	CM_AS_UI_DECOSTAMP_YPOS_CROSS  = 123,
	CM_AS_UI_DECOSTAMP_SIZE_SLIDER = 124,
	CM_AS_UI_DECOSTAMP_ROTATION_SLIDER = 125,
	CM_AS_UI_DECOSTAMP_DENSITY_SLIDER = 126,
	CM_AS_UI_DECOFRECKLE_WHISPYHAIR_CHECK = 127,
	CM_AS_UI_DECOFRECKLE_EYECLOSE_CHECK = 128,
	CM_AS_UI_DECOFRECKLE_COLOR_LIST = 129,
	CM_AS_UI_DECOFRECKLE_DENSITY_SLIDER = 130,
	CM_AS_UI_DECOFRECKLE_RANGE_SLDIER = 131,
	CM_AS_UI_DECOBEARD_WHISPYHAIR_CHECK = 132,
	CM_AS_UI_DECOBEARD_EYECLOSE_CHECK = 133,
	CM_AS_UI_DECOBEARD_PRESET_LIST = 134,
	CM_AS_UI_DECOBEARD_MATCHCOLOR_CHECK = 135,
	CM_AS_UI_DECOBEARD_COLOR_LIST  = 136,
	CM_AS_UI_DECOSCAR_WHISPYHAIR_CHECK = 137,
	CM_AS_UI_DECOSCAR_EYECLOSE_CHECK = 138,
	CM_AS_UI_DECOSCAR_PRESET_LIST  = 139,
	CM_AS_UI_DECOSCAR_XPOS_CROSS   = 140,
	CM_AS_UI_DECOSCAR_YPOS_CROSS   = 141,
	CM_AS_UI_DECOSCAR_SIZE_SLIDER  = 142,
	CM_AS_UI_DECOSCAR_ROTATION_SLIDER = 143,
	CM_AS_UI_DECOSCAR_DENSITY_SLIDER = 144,
	CM_AS_UI_DECOWRINKLE_WHISPYHAIR_CHECK = 145,
	CM_AS_UI_DECOWRINKLE_EYECLOSE_CHECK = 146,
	CM_AS_UI_DECOWRINKLE_FOREHEAD_SLIDER = 147,
	CM_AS_UI_DECOWRINKLE_EYE_SLIDER = 148,
	CM_AS_UI_DECOWRINKLE_CHEEK_SLIDER = 149,
	CM_AS_UI_DECOTAIL_PRESET_LIST  = 150,
	CM_AS_UI_SLIDERSFACE_WHISPYHAIR_CHECK = 151,
	CM_AS_UI_SLIDERSFACE_EYECLOSE_CHECK = 152,
	CM_AS_UI_SLIDERSBODY_WHISPYHAIR_CHECK = 153,
	CM_AS_UI_SLIDERSBODY_EYECLOSE_CHECK = 154,
	CM_AS_UI_SLIDERSBODY_HEIGHT_SLIDER = 155,
	CM_AS_UI_SLIDERSBODY_MUSCLEMASS_SLIDER = 156,
	CM_AS_UI_SLIDERSBODY_BODYCIRCUMFERENCE_SLIDER = 157,
	CM_AS_UI_SLIDERSBODY_HEADSIZE_SLIDER = 158,
	CM_AS_UI_SLIDERSBODY_NECKCIRCUMFERENCE_SLIDER = 159,
	CM_AS_UI_SLIDERSBODY_NECKLENGTH_SLIDER = 160,
	CM_AS_UI_SLIDERSBODY_SHOULDERVERTICAL_SLIDER = 161,
	CM_AS_UI_SLIDERSBODY_SHOULDERWIDTH_SLIDER = 162,
	CM_AS_UI_SLIDERSBODY_UPPERBODYCIRCUMFERENCE_SLIDER = 163,
	CM_AS_UI_SLIDERSBODY_ARMTHICKNESS_SLIDER = 164,
	CM_AS_UI_SLIDERSBODY_ARMLENGTH_SLIDER = 165,
	CM_AS_UI_SLIDERSBODY_HANDSIZE_SLIDER = 166,
	CM_AS_UI_SLIDERSBODY_BREASTVERTICAL_SLIDER = 167,
	CM_AS_UI_SLIDERSBODY_BREASTHORIZENTAL_SLIDER = 168,
	CM_AS_UI_SLIDERSBODY_BREASTSIZE_SLIDER = 169,
	CM_AS_UI_SLIDERSBODY_WAISTCIRCUMFERENCE_SLIDER = 170,
	CM_AS_UI_SLIDERSBODY_WAISTLENGTH_SLIDER = 171,
	CM_AS_UI_SLIDERSBODY_ABDOMENPROEJCTTION_SLIDER = 172,
	CM_AS_UI_SLIDERSBODY_PELVISWIDTH_SLIDER = 173,
	CM_AS_UI_SLIDERSBODY_HIPVERTIVALPOS_SLIDER = 174,
	CM_AS_UI_SLIDERSBODY_HIPHORIZENTALPOS_SLIDER = 175,
	CM_AS_UI_SLIDERSBODY_HIPSIZE_SLIDER = 176,
	CM_AS_UI_SLIDERSBODY_THIGHLENGH_SLIDER = 177,
	CM_AS_UI_SLIDERSBODY_THIGHCIRCUMFERENCE_SLIDER = 178,
	CM_AS_UI_SLIDERSBODY_CALFLENGTH_SLIDER = 179,
	CM_AS_UI_SLIDERSBODY_CALFCIRCUMFERENCE_SLIDER = 180,
	CM_AS_UI_SLIDERSBODY_FOOTSIZE_SLIDER = 181,
	CM_AS_UI_SLIDERSFACE_EYEBROWPROEJCTION_SLIDER = 182,
	CM_AS_UI_SLIDERSFACE_EYEBROWVERTICAL_SLIDER = 183,
	CM_AS_UI_SLIDERSFACE_EYEBROWEYEVERTICAL_SLIDER = 184,
	CM_AS_UI_SLIDERSFACE_EYEVERTICALPOS_SLIDER = 185,
	CM_AS_UI_SLIDERSFACE_EYESIZE_SLIDER = 186,
	CM_AS_UI_SLIDERSFACE_EYEHORIZONTALLENGTH_SLIDER = 187,
	CM_AS_UI_SLIDERSFACE_EYEVERTICALLENGTH_SLIDER = 188,
	CM_AS_UI_SLIDERSFACE_EYETAILVERTICALPOS_SLIDER = 189,
	CM_AS_UI_SLIDERSFACE_EYEROTATION_SLIDER = 190,
	CM_AS_UI_SLIDERSFACE_EYETWEENLENGTH_SLIDER = 191,
	CM_AS_UI_SLIDERSFACE_EYEPROEJCTION_SLIDER = 192,
	CM_AS_UI_SLIDERSFACE_NOSEVERTICALPOS_SLIDER = 193,
	CM_AS_UI_SLIDERSFACE_NOSESIZE_SLIDER = 194,
	CM_AS_UI_SLIDERSFACE_NOSEPROJECTION_SLIDER = 195,
	CM_AS_UI_SLIDERSFACE_NOSETIPSHAPE_SLIDER = 196,
	CM_AS_UI_SLIDERSFACE_NOSETIPWIDTH_SLIDER = 197,
	CM_AS_UI_SLIDERSFACE_NOSEBRIDGEWIDTH_SLIDER = 198,
	CM_AS_UI_SLIDERSFACE_NOSEBRIDGEPROGJECTION_SLIDER = 199,
	CM_AS_UI_SLIDERSFACE_NOSEBALLVERTICALLOCATION_SLIDER = 200,
	CM_AS_UI_SLIDERSFACE_NOSEBALLSIZE_SLIDER = 201,
	CM_AS_UI_SLIDERSFACE_MOUTHVERTICALPOS_SLIDER = 202,
	CM_AS_UI_SLIDERSFACE_MOUTHWIDTH_SLIDER = 203,
	CM_AS_UI_SLIDERSFACE_MOUTHPROJECTION_SLIDER = 204,
	CM_AS_UI_SLIDERSFACE_UPPERLIPSTHICKESS_SLIDER = 205,
	CM_AS_UI_SLIDERSFACE_UPPERLIPSWIDTH_SLIDER = 206,
	CM_AS_UI_SLIDERSFACE_UPPERLIPSPROJECTION_SLIDER = 207,
	CM_AS_UI_SLIDERSFACE_LOWERLIPSTHICKNESS_SLIDER = 208,
	CM_AS_UI_SLIDERSFACE_LOWERLIPSWIDTH_SLIDER = 209,
	CM_AS_UI_SLIDERSFACE_LOWERLIPSPROJECTION_SLIDER = 210,
	CM_AS_UI_SLIDERSFACE_MOUTHTAILVERTICALPOS_SLIDER = 211,
	CM_AS_UI_SLIDERSFACE_EARSIZE_SLIDER = 212,
	CM_AS_UI_SLIDERSFACE_EARVERTICALLENGTH_SLIDER = 213,
	CM_AS_UI_SLIDERSFACE_EARHORIZONTALLENGTH_SLIDER = 214,
	CM_AS_UI_SLIDERSFACE_EARWHEELHORIZONTALPOS_SLIDER = 215,
	CM_AS_UI_SLIDERSFACE_UPPEREARWHEELPOS_SLIDER = 216,
	CM_AS_UI_SLIDERSFACE_CHEEKBONEVERTICALPOS_SLIDER = 217,
	CM_AS_UI_SLIDERSFACE_CHEEKBONEHORIZONTALPOS_SLIDER = 218,
	CM_AS_UI_SLIDERSFACE_CHEEKBONEPROJECTION_SLIDER = 219,
	CM_AS_UI_SLIDERSFACE_CHEEK_SLIDER = 220,
	CM_AS_UI_SLIDERSFACE_JAWTIPSIZE_SLIDER = 221,
	CM_AS_UI_SLIDERSFACE_JAWTIPPROJECTION_SLIDER = 222,
	CM_AS_UI_SLIDERSFACE_JAWLENGTH_SLIDER = 223,
	CM_AS_UI_SLIDERSFACE_JAWANGLE_SLIDER = 224,
	CM_AS_UI_SLIDERSFACE_JAWSIZE_SLIDER = 225,
	CM_AS_UI_SLIDERSFACE_JAWPROEJCTION_SLIDER = 226,
	CM_AS_UI_SLIDERSFACE_JAWVOLUME_SLIDER = 227,
	CM_AS_UI_DETAILMODE_WHIPYHAIR_CHK = 228,
	CM_AS_UI_DETAILMODE_DROPDOWN   = 229,
	CM_AS_UI_DETAILMODE_SLIDER     = 230,
	CM_AS_UI_DETAILMODE_FACE_EYEBROW = 231,
	CM_AS_UI_DETAILMODE_FACE_EYE   = 232,
	CM_AS_UI_DETAILMODE_FACE_NOSE  = 233,
	CM_AS_UI_DETAILMODE_FACE_MOUTH = 234,
	CM_AS_UI_DETAILMODE_FACE_EAR   = 235,
	CM_AS_UI_SLIDERSBODY_KNEECIRCUMFERENCE_SLIDER = 236,
	CM_AS_UI_MAX                   = 237
};


// Enum BLGame.ABLUIDef.CustomizeActionScriptMenuEnum
enum class ECustomizeActionScriptMenuEnum : uint8_t
{
	CM_AS_Menu_UNDEFINED           = 0,
	CM_AS_MENU_ALL                 = 1,
	CM_AS_MENU_HEAD                = 2,
	CM_AS_MENU_FACE                = 3,
	CM_AS_MENU_MAKEUP              = 4,
	CM_AS_MENU_DECO                = 5,
	CM_AS_MENU_SLIDERS             = 6,
	CM_AS_MENU_ANIMAL              = 7,
	CM_AS_MENU_HUMAN               = 8,
	CM_AS_MENU_ALL_STYLE           = 9,
	CM_AS_MENU_ALL_BODY            = 10,
	CM_AS_MENU_ALL_SKIN            = 11,
	CM_AS_MENU_ALL_LETHERCOLOR     = 12,
	CM_AS_MENU_HAIR_STYLE          = 13,
	CM_AS_MENU_HAIR_STYLECHANGE    = 14,
	CM_AS_MENU_FACE_STYLE          = 15,
	CM_AS_MENU_FACE_EYEBROW        = 16,
	CM_AS_MENU_FACE_EYE            = 17,
	CM_AS_MENU_FACE_NOSE           = 18,
	CM_AS_MENU_FACE_MOUTH          = 19,
	CM_AS_MENU_FACE_EAR            = 20,
	CM_AS_MENU_FACE_JAW            = 21,
	CM_AS_MENU_FACE_CHEEK          = 22,
	CM_AS_MENU_MAKEUP_STYLE        = 23,
	CM_AS_MENU_MAKEUP_EYESHADOW    = 24,
	CM_AS_MENU_MAKEUP_EYELINER     = 25,
	CM_AS_MENU_MAKEUP_EYELASH      = 26,
	CM_AS_MENU_MAKEUP_LENS         = 27,
	CM_AS_MENU_MAKEUP_LIPSTIC      = 28,
	CM_AS_MENU_MAKEUP_LIPGLOSS     = 29,
	CM_AS_MENU_MAKEUP_BLUSHER      = 30,
	CM_AS_MENU_MAKEUP_HIGHLIGHTER  = 31,
	CM_AS_MENU_MAKEUP_MOLE         = 32,
	CM_AS_MENU_DECO_FACETATTOO     = 33,
	CM_AS_MENU_DECO_BODYTATTOO     = 34,
	CM_AS_MENU_DECO_LEATHERPATTERN = 35,
	CM_AS_MENU_DECO_STAMP          = 36,
	CM_AS_MENU_DECO_FRECKLE        = 37,
	CM_AS_MENU_DECO_BEARD          = 38,
	CM_AS_MENU_DECO_SCAR           = 39,
	CM_AS_MENU_DECO_WRINKLE        = 40,
	CM_AS_MENU_DECO_TAIL           = 41,
	CM_AS_MENU_SLIDERS_BODY        = 42,
	CM_AS_MENU_SLIDERS_FACE        = 43,
	CM_AS_MAX                      = 44
};


// Enum BLGame.ABLUIDef.EGFxCursorType
enum class EGFxCursorType : uint8_t
{
	EGFxCursorType_Normal          = 0,
	EGFxCursorType_Attack          = 1,
	EGFxCursorType_Talk            = 2,
	EGFxCursorType_Looting         = 3,
	EGFxCursorType_MAX             = 4
};


// Enum BLGame.ABLUIDef.ECoinType
enum class ECoinType : uint8_t
{
	ECoinType_NONE                 = 0,
	ECoinType_GOLD                 = 1,
	ECoinType_BP                   = 2,
	ECoinType_DP                   = 3,
	ECoinType_CP                   = 4,
	ECoinType_RP                   = 5,
	ECoinType_CINIS                = 6,
	ECoinType_LUMENA               = 7,
	ECoinType_CT                   = 8,
	ECoinType_MAX                  = 9
};


// Enum BLGame.ABLUIDef.EChatMessageType
enum class EChatMessageType : uint8_t
{
	EChatMessageType_Normal        = 0,
	EChatMessageType_Party         = 1,
	EChatMessageType_Whisper       = 2,
	EChatMessageType_Worldzone     = 3,
	EChatMessageType_Guild         = 4,
	EChatMessageType_GuildOfficer  = 5,
	EChatMessageType_Realm         = 6,
	EChatMessageType_GuildNotice   = 7,
	EChatMessageType_System        = 8,
	EChatMessageType_GM            = 9,
	EChatMessageType_SystemDebug   = 10,
	EChatMessageType_Raid          = 11,
	EChatMessageType_RaidAlarm     = 12,
	EChatMessageType_System_Battle = 13,
	EChatMessageType_System_Quest  = 14,
	EChatMessageType_System_ItemUse = 15,
	EChatMessageType_System_ItemGet = 16,
	EChatMessageType_System_Equipment = 17,
	EChatMessageType_Emissary      = 18,
	EChatMessageType_Help          = 19,
	EChatMessageType_Max           = 20
};


// Enum BLGame.ABLUIDef.EBattleMessageTargetType
enum class EBattleMessageTargetType : uint8_t
{
	EBattleMessageTargetType_Friendly = 0,
	EBattleMessageTargetType_Hostile = 1,
	EBattleMessageTargetType_MAX   = 2
};


// Enum BLGame.ABLUIDef.EBattleMessageType
enum class EBattleMessageType : uint8_t
{
	EBattleMessageType_Miss        = 0,
	EBattleMessageType_Dodge       = 1,
	EBattleMessageType_Parry       = 2,
	EBattleMessageType_Block       = 3,
	EBattleMessageType_Resist      = 4,
	EBattleMessageType_Critical_Hit = 5,
	EBattleMessageType_Ordinary_Hit = 6,
	EBattleMessageType_Exp         = 7,
	EBattleMessageType_Critical_DOT_Hit = 8,
	EBattleMessageType_Ordinary_DOT_Hit = 9,
	EBattleMessageType_Immune      = 10,
	EBattleMessageType_Absorb      = 11,
	EBattleMessageType_Reflect     = 12,
	EBattleMessageType_RCResist    = 13,
	EBattleMessageType_Miss_DOT    = 14,
	EBattleMessageType_Resist_DOT  = 15,
	EBattleMessageType_Hit_Energy  = 16,
	EBattleMessageType_CP          = 17,
	EBattleMessageType_BP          = 18,
	EBattleMessageType_DP          = 19,
	EBattleMessageType_SMITH       = 20,
	EBattleMessageType_HANDIWORK   = 21,
	EBattleMessageType_SMELT       = 22,
	EBattleMessageType_COOK        = 23,
	EBattleMessageType_ALCHEMY     = 24,
	EBattleMessageType_MINING      = 25,
	EBattleMessageType_PLANTS      = 26,
	EBattleMessageType_MAX         = 27
};


// Enum BLGame.ABLUIDef.EUISystemSettingMode
enum class EUISystemSettingMode : uint8_t
{
	EUISystemSettingMode_NONE      = 0,
	EUISystemSettingMode_LOBBY     = 1,
	EUISystemSettingMode_GAME      = 2,
	EUISystemSettingMode_MAX       = 3
};


// Enum BLGame.ABLUIDef.EUIType
enum class EUIType : uint8_t
{
	EUIType_HUD                    = 0,
	EUIType_NO_VISIBLE_HUD         = 1,
	EUIType_WORLDMAP               = 2,
	EUIType_TALK                   = 3,
	EUIType_WINDOW                 = 4,
	EUIType_WINDOW2                = 5,
	EUIType_POPUP                  = 6,
	EUIType_DIALOG                 = 7,
	EUIType_SYSTEYM_MENU           = 8,
	EUIType_TOOLTIP                = 9,
	EUIType_ETC                    = 10,
	EUIType_MAX                    = 11
};


// Enum BLGame.ABLUIDef.EUIOpenerType
enum class EUIOpenerType : uint8_t
{
	EUIOpener_NONE                 = 0,
	EUIOpener_ANIMA                = 1,
	EUIOpener_CRAFT                = 2,
	EUIOpener_CUSTOMER_CENTER      = 3,
	EUIOpener_DELIBERATION         = 4,
	EUIOpener_FLASH_SHOP           = 5,
	EUIOpener_GUILD                = 6,
	EUIOpener_EXIT                 = 7,
	EUIOpener_EQUIP                = 8,
	EUIOpener_EQUIP_CUSTOM         = 9,
	EUIOpener_EXCHANGE             = 10,
	EUIOpener_FELLOW               = 11,
	EUIOpener_FRIEND               = 12,
	EUIOpener_GOODSBOX             = 13,
	EUIOpener_INTERFACE_SETTINGS   = 14,
	EUIOpener_INVENTORY            = 15,
	EUIOpener_JOURNAL              = 16,
	EUIOpener_JOURNAL_GUIDE        = 17,
	EUIOpener_JOURNAL_MONSTERBOOK  = 18,
	EUIOpener_LOBBY                = 19,
	EUIOpener_LUMENA_SHOP          = 20,
	EUIOpener_MAIL_BOX             = 21,
	EUIOpener_MISSION              = 22,
	EUIOpener_MONSTERBOOK          = 23,
	EUIOpener_MOUNT                = 24,
	EUIOpener_NOTICE               = 25,
	EUIOpener_OPENER               = 26,
	EUIOpener_ORDER                = 27,
	EUIOpener_PET                  = 28,
	EUIOpener_PARTYMATCHING        = 29,
	EUIOpener_RUNE                 = 30,
	EUIOpener_SKILL_DECK           = 31,
	EUIOpener_SLATE                = 32,
	EUIOpener_SYSTEM_SETTINGS      = 33,
	EUIOpener_TOKEN_EXCHANGE       = 34,
	EUIOpener_WAR_CITADEL_OWNERSHIP = 35,
	EUIOpener_WAR                  = 36,
	EUIOpener_WAR_CASTRAGRANDIS    = 37,
	EUIOpener_WAR_COLOSSEUM        = 38,
	EUIOpener_WEB_SHOP             = 39,
	EUIOpener_WEB_SHOP_JPN         = 40,
	EUIOpener_WORLDMAP             = 41,
	EUIOpener_HELP_WINDOW          = 42,
	EUIOpener_LUMENA_SENDING       = 43,
	EUIOpener_WEB_EVENT_JPN        = 44,
	EUIOpener_RANKING              = 45,
	EUIOpener_WEB_SHOP_ST          = 46,
	EUIOpener_MAX                  = 47
};


// Enum BLGame.ABLUIDef.EUIName
enum class EUIName : uint8_t
{
	EUIName_NONE                   = 0,
	EUIName_OPENING                = 1,
	EUIName_LOGIN                  = 2,
	EUIName_CHARACTER_SELECT_LIST  = 3,
	EUIName_SERVER_LIST            = 4,
	EUIName_CHARACTER_SELECT_CONTROL = 5,
	EUIName_CREATE_CHARACTER       = 6,
	EUIName_NAME_TAG               = 7,
	EUIName_BATTLE_MESSAGE         = 8,
	EUIName_WORLDMAP_ZONENAME      = 9,
	EUIName_WORLDMAP               = 10,
	EUIName_EXP_BAR                = 11,
	EUIName_MINIMAP                = 12,
	EUIName_PC_BAR                 = 13,
	EUIName_TARGET_BAR             = 14,
	EUIName_PARTY                  = 15,
	EUIName_CHAT                   = 16,
	EUIName_ACTION_BAR             = 17,
	EUIName_ABNORMAL_STATUS        = 18,
	EUIName_UI_OPENER              = 19,
	EUIName_QUEST_ALERT            = 20,
	EUIName_TALK_DECORATION        = 21,
	EUIName_TALK                   = 22,
	EUIName_SUBTITLE               = 23,
	EUIName_SHOP                   = 24,
	EUIName_EQUIP                  = 25,
	EUIName_INVENTORY              = 26,
	EUIName_SKILL_DECK             = 27,
	EUIName_JOURNAL                = 28,
	EUIName_LOOTING                = 29,
	EUIName_LOOTING_DICE           = 30,
	EUIName_SYSTEM_SETTINGS        = 31,
	EUIName_INTERFACE_SETTINGS     = 32,
	EUIName_CASTING_BAR            = 33,
	EUIName_NOTICE_BOARD           = 34,
	EUIName_REVIVAL_DIALOG         = 35,
	EUIName_DIALOG                 = 36,
	EUIName_POPUP                  = 37,
	EUIName_TOOLTIP                = 38,
	EUIName_PROPTOOLTIP            = 39,
	EUIName_SYSTEM_MENU            = 40,
	EUIName_LETTER_INFO            = 41,
	EUIName_PRIVATE_TRADE          = 42,
	EUIName_DELIBERATION           = 43,
	EUIName_GUILD_CREATION         = 44,
	EUIName_GUILD_CREATION_WAITING = 45,
	EUIName_GUILD                  = 46,
	EUIName_GUILD_DIALOG           = 47,
	EUIName_GUILD_AUTHORITY        = 48,
	EUIName_MAIL_BOX               = 49,
	EUIName_MAIL_WRITE             = 50,
	EUIName_WAR_CONQUEST           = 51,
	EUIName_WAR_CONQUEST_SCOREBOARD = 52,
	EUIName_WAR_CITADEL_OWNERSHIP  = 53,
	EUIName_WAR_CITADEL_OWNERSHIP_BID_DIALOG = 54,
	EUIName_WAR_CITADEL_OWNERSHIP_BID_CONFIRM = 55,
	EUIName_WAR_REALM_OWNERSHIP_REGISTER = 56,
	EUIName_WAR_REALM_OWNERSHIP_PROGRESS = 57,
	EUIName_WAR_REALM_OWNERSHIP_RESULT = 58,
	EUIName_AIM_TARGETING          = 59,
	EUIName_MINIMAP_EXTENSION      = 60,
	EUIName_TOKEN_EXCHANGE         = 61,
	EUIName_TIMER                  = 62,
	EUIName_DIALOG_PURCHASE        = 63,
	EUIName_EQUIP_CUSTOM           = 64,
	EUIName_CRAFT                  = 65,
	EUIName_WARP_LOADING           = 66,
	EUIName_MISSION                = 67,
	EUIName_COLLECTIONBOOK         = 68,
	EUIName_TAMING                 = 69,
	EUIName_LUMENA_SHOP            = 70,
	EUIName_PARTYMATCHING          = 71,
	EUIName_PARTYMATCHINGROLE      = 72,
	EUIName_FRIEND                 = 73,
	EUIName_SECONDPASSWORD         = 74,
	EUIName_FLASH_SHOP             = 75,
	EUIName_JOIN_COLOSSEUM         = 76,
	EUIName_CHAT_OPTION            = 77,
	EUIName_WAREHOUSE              = 78,
	EUIName_TOOLTIP_ITEM           = 79,
	EUIName_RAID_FRAME             = 80,
	EUIName_RUNE_CUSTOM            = 81,
	EUIName_ORDER                  = 82,
	EUIName_GUILD_MARK             = 83,
	EUIName_CUSTOMIZING_FILE_MANAGER = 84,
	EUIName_RECEIVE_REWARD         = 85,
	EUIName_TUTORIAL               = 86,
	EUIName_ANIMA                  = 87,
	EUIName_OPENER_AVAILABLE       = 88,
	EUIName_DURABILITY             = 89,
	EUIName_RECOVER_MAX_DURABILITY = 90,
	EUIName_EQUIP_UPGRADE          = 91,
	EUIName_DISASSEMBLE            = 92,
	EUIName_CRAFT_RECIPE           = 93,
	EUIName_CRAFT_CHOICE           = 94,
	EUIName_BEGINNERS_GUIDE        = 95,
	EUIName_EQUIP_EVOLUTION        = 96,
	EUIName_EQUIP_CONVERT_RESULT   = 97,
	EUIName_DIALOG_COLOR           = 98,
	EUIName_SUCCEED                = 99,
	EUIName_WEB_PAGE               = 100,
	EUIName_WAR_CONQUESTLIST       = 101,
	EUIName_HUD_ICONS_LT           = 102,
	EUIName_CHALLENGE_TOWER        = 103,
	EUIName_RANKING                = 104,
	EUIName_CONTENTSINFO           = 105,
	EUIName_PARTYEFFECT            = 106,
	EUIName_DIALOG_GEM             = 107,
	EUIName_QTEACTION_BAR          = 108,
	EUIName_CREDIT                 = 109,
	EUIName_MAX                    = 110
};


// Enum BLGame.ABLSDLTypes.EMailType
enum class EMailType : uint8_t
{
	EMailType_normal               = 0,
	EMailType_system               = 1,
	EMailType_gm                   = 2,
	EMailType_MAX                  = 3
};


// Enum BLGame.ABLSDLTypes.EMailStateType
enum class EMailStateType : uint8_t
{
	EMailStateType_newMail         = 0,
	EMailStateType_readMail        = 1,
	EMailStateType_withdrawMail    = 2,
	EMailStateType_deleteMail      = 3,
	EMailStateType_MAX             = 4
};


// Enum BLGame.ABLSDLTypes.EMailDeleteType
enum class EMailDeleteType : uint8_t
{
	EMailDeleteType_self           = 0,
	EMailDeleteType_expire         = 1,
	EMailDeleteType_returnMail     = 2,
	EMailDeleteType_gm             = 3,
	EMailDeleteType_auto           = 4,
	EMailDeleteType_MAX            = 5
};


// Enum BLGame.ABLSDLTypes.EAuctionSortColumnType
enum class EAuctionSortColumnType : uint8_t
{
	EAuctionSortColumnType_level   = 0,
	EAuctionSortColumnType_grade   = 1,
	EAuctionSortColumnType_price   = 2,
	EAuctionSortColumnType_MAX     = 3
};


// Enum BLGame.ABLSDLTypes.ETutorialStateType
enum class ETutorialStateType : uint8_t
{
	ETutorialStateType_NotDone     = 0,
	ETutorialStateType_InProgress  = 1,
	ETutorialStateType_Completed   = 2,
	ETutorialStateType_CompletedBySkip = 3,
	ETutorialStateType_MAX         = 4
};


// Enum BLGame.ABLSDLTypes.EFriendErrorType
enum class EFriendErrorType : uint8_t
{
	EFriendErrorType_Success       = 0,
	EFriendErrorType_NotFound      = 1,
	EFriendErrorType_OtherRealm    = 2,
	EFriendErrorType_GM            = 3,
	EFriendErrorType_InCompleteTutorial = 4,
	EFriendErrorType_NotMe         = 5,
	EFriendErrorType_ExistList     = 6,
	EFriendErrorType_MaxCount      = 7,
	EFriendErrorType_IgnorePlayer  = 8,
	EFriendErrorType_ETC           = 9,
	EFriendErrorType_MAX           = 10
};


// Enum BLGame.ABLSDLTypes.EDisconnectReason
enum class EDisconnectReason : uint8_t
{
	EDisconnectReason_Normal       = 0,
	EDisconnectReason_Abuse        = 1,
	EDisconnectReason_MAX          = 2
};


// Enum BLGame.ABLSDLTypes.ELoginFailedReason
enum class ELoginFailedReason : uint8_t
{
	ELoginFailedReason_Success     = 0,
	ELoginFailedReason_NoExistID   = 1,
	ELoginFailedReason_WrongPassword = 2,
	ELoginFailedReason_AlreadyLogined = 3,
	ELoginFailedReason_DBFailed    = 4,
	ELoginFailedReason_ServerFull  = 5,
	ELoginFailedReason_KickOut     = 6,
	ELoginFailedReason_MAX         = 7
};


// Enum BLGame.ABLSDLTypes.ESelectPlayerErrorCode
enum class ESelectPlayerErrorCode : uint8_t
{
	ESelectPlayerErrorCode_Success = 0,
	ESelectPlayerErrorCode_InternalError = 1,
	ESelectPlayerErrorCode_PreCharacterError = 2,
	ESelectPlayerErrorCode_MustChangePlayerNameError = 3,
	ESelectPlayerErrorCode_MAX     = 4
};


// Enum BLGame.ABLSDLTypes.ECreateRemovePlayerErrorCode
enum class ECreateRemovePlayerErrorCode : uint8_t
{
	ECreateRemovePlayerErrorCode_Success = 0,
	ECreateRemovePlayerErrorCode_NotReady = 1,
	ECreateRemovePlayerErrorCode_WrongArgument = 2,
	ECreateRemovePlayerErrorCode_WrongStatus = 3,
	ECreateRemovePlayerErrorCode_NotEnoughSlot = 4,
	ECreateRemovePlayerErrorCode_DuplicatePlayerID = 5,
	ECreateRemovePlayerErrorCode_TransactionFailed = 6,
	ECreateRemovePlayerErrorCode_ForbidPlayerID = 7,
	ECreateRemovePlayerErrorCode_Etc = 8,
	ECreateRemovePlayerErrorCode_InvalidRealmType = 9,
	ECreateRemovePlayerErrorCode_GuildLeader = 10,
	ECreateRemovePlayerErrorCode_MAX = 11
};


// Enum BLGame.ABLSDLTypes.EActionBarErrorCode
enum class EActionBarErrorCode : uint8_t
{
	EActionBarErrorCode_Success    = 0,
	EActionBarErrorCode_WrongIndex = 1,
	EActionBarErrorCode_TransactionFailed = 2,
	EActionBarErrorCode_Busy       = 3,
	EActionBarErrorCode_MAX        = 4
};


// Enum BLGame.ABLSDLTypes.EParamStatusUpdateType
enum class EParamStatusUpdateType : uint8_t
{
	EParamStatusUpdateType_HP      = 0,
	EParamStatusUpdateType_MaxHP   = 1,
	EParamStatusUpdateType_MP      = 2,
	EParamStatusUpdateType_MaxMP   = 3,
	EParamStatusUpdateType_Exp     = 4,
	EParamStatusUpdateType_SPExp   = 5,
	EParamStatusUpdateType_IsSheathe = 6,
	EParamStatusUpdateType_StateSituation = 7,
	EParamStatusUpdateType_StatePose = 8,
	EParamStatusUpdateType_TamingExp = 9,
	EParamStatusUpdateType_MAX     = 10
};


// Enum BLGame.ABLSDLTypes.EContentTokenUpdateType
enum class EContentTokenUpdateType : uint8_t
{
	EContentTokenUpdateType_PVE    = 0,
	EContentTokenUpdateType_Gather = 1,
	EContentTokenUpdateType_MonsterBook = 2,
	EContentTokenUpdateType_Quest  = 3,
	EContentTokenUpdateType_Exchange = 4,
	EContentTokenUpdateType_Mission = 5,
	EContentTokenUpdateType_Item   = 6,
	EContentTokenUpdateType_Cheat  = 7,
	EContentTokenUpdateType_PVP    = 8,
	EContentTokenUpdateType_Looting = 9,
	EContentTokenUpdateType_Shop   = 10,
	EContentTokenUpdateType_Auction = 11,
	EContentTokenUpdateType_SpecialWar = 12,
	EContentTokenUpdateType_CO     = 13,
	EContentTokenUpdateType_RO     = 14,
	EContentTokenUpdateType_Craft  = 15,
	EContentTokenUpdateType_NPCCraft = 16,
	EContentTokenUpdateType_Revival = 17,
	EContentTokenUpdateType_InventoryExpansion = 18,
	EContentTokenUpdateType_EquipItemCustom = 19,
	EContentTokenUpdateType_LegendOpt = 20,
	EContentTokenUpdateType_ChargeActingPoint = 21,
	EContentTokenUpdateType_PaidPartyCall = 22,
	EContentTokenUpdateType_ResetReturnTime = 23,
	EContentTokenUpdateType_Colosseum = 24,
	EContentTokenUpdateType_LumenaShop = 25,
	EContentTokenUpdateType_GiftBox = 26,
	EContentTokenUpdateType_AddLooting = 27,
	EContentTokenUpdateType_FlashShop = 28,
	EContentTokenUpdateType_LimitedSale = 29,
	EContentTokenUpdateType_SkillShop = 30,
	EContentTokenUpdateType_MPFShop = 31,
	EContentTokenUpdateType_TokenShop = 32,
	EContentTokenUpdateType_MiscShop = 33,
	EContentTokenUpdateType_DisjointPotential = 34,
	EContentTokenUpdateType_PartyMatchingDungeonTeleport = 35,
	EContentTokenUpdateType_UnequipRune = 36,
	EContentTokenUpdateType_RuneShop = 37,
	EContentTokenUpdateType_CostumeShop = 38,
	EContentTokenUpdateType_ItemDesynthesis = 39,
	EContentTokenUpdateType_BuyV2CraftRecipe = 40,
	EContentTokenUpdateType_AccountShareLumena = 41,
	EContentTokenUpdateType_OccupationWar = 42,
	EContentTokenUpdateType_ChallengeTower = 43,
	EContentTokenUpdateType_LevelUp = 44,
	EContentTokenUpdateType_GemPieceExchange = 45,
	EContentTokenUpdateType_ChallengeTowerRefund = 46,
	EContentTokenUpdateType_MAX    = 47
};


// Enum BLGame.ABLSDLTypes.EMoveToAckReason
enum class EMoveToAckReason : uint8_t
{
	EMoveToAckReason_Arrived       = 0,
	EMoveToAckReason_PlayerInput   = 1,
	EMoveToAckReason_Blocked       = 2,
	EMoveToAckReason_Canceled      = 3,
	EMoveToAckReason_MAX           = 4
};


// Enum BLGame.ABLSDLTypes.EGeometryType
enum class EGeometryType : uint8_t
{
	EGeometryType_Line             = 0,
	EGeometryType_Arrow            = 1,
	EGeometryType_Box              = 2,
	EGeometryType_Sphere           = 3,
	EGeometryType_Circular_Cylinder = 4,
	EGeometryType_Sector_Cylinder  = 5,
	EGeometryType_Circular_Arc_Cylinder = 6,
	EGeometryType_DetailBox        = 7,
	EGeometryType_MAX              = 8
};


// Enum BLGame.ABLSDLTypes.EItemRemoveErrorCode
enum class EItemRemoveErrorCode : uint8_t
{
	EItemRemoveErrorCode_Success   = 0,
	EItemRemoveErrorCode_Busy      = 1,
	EItemRemoveErrorCode_BadCondition = 2,
	EItemRemoveErrorCode_InTrading = 3,
	EItemRemoveErrorCode_NotDestroy = 4,
	EItemRemoveErrorCode_MAX       = 5
};


// Enum BLGame.ABLSDLTypes.EInventoryExpansionType
enum class EInventoryExpansionType : uint8_t
{
	EInventoryExpansionType_Week   = 0,
	EInventoryExpansionType_Month  = 1,
	EInventoryExpansionType_Permanent = 2,
	EInventoryExpansionType_MAX    = 3
};


// Enum BLGame.ABLSDLTypes.EInventoryExpansionErrorCode
enum class EInventoryExpansionErrorCode : uint8_t
{
	EInventoryExpansionErrorCode_Success = 0,
	EInventoryExpansionErrorCode_BadCondition = 1,
	EInventoryExpansionErrorCode_IsPackageOpen = 2,
	EInventoryExpansionErrorCode_NotEnoughLumena = 3,
	EInventoryExpansionErrorCode_AlreadyOpen = 4,
	EInventoryExpansionErrorCode_Busy = 5,
	EInventoryExpansionErrorCode_Tutorial = 6,
	EInventoryExpansionErrorCode_ExpansionFull = 7,
	EInventoryExpansionErrorCode_MAX = 8
};


// Enum BLGame.ABLSDLTypes.EItemUseErrorCode
enum class EItemUseErrorCode : uint8_t
{
	EItemUseErrorCode_Success      = 0,
	EItemUseErrorCode_ItemNotExist = 1,
	EItemUseErrorCode_BadSlot      = 2,
	EItemUseErrorCode_Busy         = 3,
	EItemUseErrorCode_BadCondition = 4,
	EItemUseErrorCode_FailTarget   = 5,
	EItemUseErrorCode_NotEnoughLevel = 6,
	EItemUseErrorCode_TooHighLevel = 7,
	EItemUseErrorCode_NotSupportClass = 8,
	EItemUseErrorCode_NotSupportRace = 9,
	EItemUseErrorCode_SkillFail    = 10,
	EItemUseErrorCode_InventoryFull = 11,
	EItemUseErrorCode_QuestAlreadyHave = 12,
	EItemUseErrorCode_TooManyOnGoingQuestCount = 13,
	EItemUseErrorCode_QuestNotEnoughInventorySlot = 14,
	EItemUseErrorCode_CrowdControl = 15,
	EItemUseErrorCode_AlreadyAcquiredSkill = 16,
	EItemUseErrorCode_FullOfSkillDeck = 17,
	EItemUseErrorCode_CantSummonProp = 18,
	EItemUseErrorCode_NotFoundEquipItem = 19,
	EItemUseErrorCode_NotFoundInventoryItem = 20,
	EItemUseErrorCode_FailTerritory = 21,
	EItemUseErrorCode_FarDistance  = 22,
	EItemUseErrorCode_ItemInTrading = 23,
	EItemUseErrorCode_OnlyQuestSuccess = 24,
	EItemUseErrorCode_OnlyLetterSuccess = 25,
	EItemUseErrorCode_ItemInSendingMail = 26,
	EItemUseErrorCode_FailMount    = 27,
	EItemUseErrorCode_NotEnoughLevelMount = 28,
	EItemUseErrorCode_NotEnoughLevelEquip = 29,
	EItemUseErrorCode_InvalidWorld = 30,
	EItemUseErrorCode_Cooltime     = 31,
	EItemUseErrorCode_ItemInCustom = 32,
	EItemUseErrorCode_NotEnoughActingPoint = 33,
	EItemUseErrorCode_HaveNotDeathPenalty = 34,
	EItemUseErrorCode_HaveExpireSlot = 35,
	EItemUseErrorCode_NotEnoughLockSlot = 36,
	EItemUseErrorCode_HaveNotGuild = 37,
	EItemUseErrorCode_PlayerUseLimitZero = 38,
	EItemUseErrorCode_ItemDecCountOver = 39,
	EItemUseErrorCode_HaveNotGuildAtSpawnCustomRevival = 40,
	EItemUseErrorCode_HaveNotPartyAtSpawnCustomRevival = 41,
	EItemUseErrorCode_InvalidCellVectorAtSpawnCustomRevival = 42,
	EItemUseErrorCode_AlreadySpawnedAtSpawnCustomRevival = 43,
	EItemUseErrorCode_PcMaxLevel   = 44,
	EItemUseErrorCode_CraftAleadyHave = 45,
	EItemUseErrorCode_NotEnoughLevelCraft = 46,
	EItemUseErrorCode_NotSupportMainCraftType = 47,
	EItemUseErrorCode_NotSupportSubCraftType = 48,
	EItemUseErrorCode_NotPeace     = 49,
	EItemUseErrorCode_NotBattle    = 50,
	EItemUseErrorCode_InvalidCellVectorAtSpawnCraftProp = 51,
	EItemUseErrorCode_AlreadySpawnedCraftProp = 52,
	EItemUseErrorCode_NoGuildForGetRP = 53,
	EItemUseErrorCode_NotExistExtractionData = 54,
	EItemUseErrorCode_Taming       = 55,
	EItemUseErrorCode_InventoryExpansionFull = 56,
	EItemUseErrorCode_InventoryExpansionNotInTutorial = 57,
	EItemUseErrorCode_CharacterSlotExpansionFull = 58,
	EItemUseErrorCode_InOccupationWar = 59,
	EItemUseErrorCode_ChallengeTowerDistance = 60,
	EItemUseErrorCode_ChallengeTowerValidTerritory = 61,
	EItemUseErrorCode_MaxStanceGem = 62,
	EItemUseErrorCode_MaxNonStanceGem = 63,
	EItemUseErrorCode_MaxParameterGem = 64,
	EItemUseErrorCode_MaxGemPiece  = 65,
	EItemUseErrorCode_MAX          = 66
};


// Enum BLGame.ABLSDLTypes.EItemEquipErrorCode
enum class EItemEquipErrorCode : uint8_t
{
	EItemEquipErrorCode_Success    = 0,
	EItemEquipErrorCode_AlreadyEquiped = 1,
	EItemEquipErrorCode_ItemNotExist = 2,
	EItemEquipErrorCode_BadSlot    = 3,
	EItemEquipErrorCode_NoPlaceToTakeoff = 4,
	EItemEquipErrorCode_Busy       = 5,
	EItemEquipErrorCode_NotAlive   = 6,
	EItemEquipErrorCode_BadCondition = 7,
	EItemEquipErrorCode_InCombat   = 8,
	EItemEquipErrorCode_NotEnoughLevel = 9,
	EItemEquipErrorCode_TooHighLevel = 10,
	EItemEquipErrorCode_NotSupportClass = 11,
	EItemEquipErrorCode_NotSupportRace = 12,
	EItemEquipErrorCode_Durability = 13,
	EItemEquipErrorCode_MAX        = 14
};


// Enum BLGame.ABLSDLTypes.EItemAddErrorCode
enum class EItemAddErrorCode : uint8_t
{
	EItemAddErrorCode_Success      = 0,
	EItemAddErrorCode_InventoryFull = 1,
	EItemAddErrorCode_MaxHolding   = 2,
	EItemAddErrorCode_BadCondition = 3,
	EItemAddErrorCode_MAX          = 4
};


// Enum BLGame.ABLSDLTypes.EItemExchangeErrorCode
enum class EItemExchangeErrorCode : uint8_t
{
	EItemExchangeErrorCode_Success = 0,
	EItemExchangeErrorCode_MaxHolding = 1,
	EItemExchangeErrorCode_BadCondition = 2,
	EItemExchangeErrorCode_Bonding = 3,
	EItemExchangeErrorCode_CantExchangeSlot = 4,
	EItemExchangeErrorCode_Busy    = 5,
	EItemExchangeErrorCode_MAX     = 6
};


// Enum BLGame.ABLSDLTypes.EChatChannel
enum class EChatChannel : uint8_t
{
	EChatChannel_Normal            = 0,
	EChatChannel_Party             = 1,
	EChatChannel_Whisper           = 2,
	EChatChannel_WorldZone         = 3,
	EChatChannel_Guild             = 4,
	EChatChannel_GuildOfficer      = 5,
	EChatChannel_Realm             = 6,
	EChatChannel_Raid              = 7,
	EChatChannel_RaidAlarm         = 8,
	EChatChannel_Emissary          = 9,
	EChatChannel_Help              = 10,
	EChatChannel_MAX               = 11
};


// Enum BLGame.ABLSDLTypes.EPlayerPartnerType
enum class EPlayerPartnerType : uint8_t
{
	EPlayerPartnerType_Normal      = 0,
	EPlayerPartnerType_Emissary    = 1,
	EPlayerPartnerType_Max         = 2
};


// Enum BLGame.ABLSDLTypes.ESystemMessageChannel
enum class ESystemMessageChannel : uint8_t
{
	ESystemMessageChannel_Notice   = 0,
	ESystemMessageChannel_ActionLog = 1,
	ESystemMessageChannel_DebugLog = 2,
	ESystemMessageChannel_AILog    = 3,
	ESystemMessageChannel_MAX      = 4
};


// Enum BLGame.ABLSDLTypes.ETeleportErrorCode
enum class ETeleportErrorCode : uint8_t
{
	ETeleportErrorCode_Success     = 0,
	ETeleportErrorCode_NotInWorld  = 1,
	ETeleportErrorCode_LocationError = 2,
	ETeleportErrorCode_MAX         = 3
};


// Enum BLGame.ABLSDLTypes.EGMCommandErrorCode
enum class EGMCommandErrorCode : uint8_t
{
	EGMCommandErrorCode_Success    = 0,
	EGMCommandErrorCode_NotGM      = 1,
	EGMCommandErrorCode_LowGMLevel = 2,
	EGMCommandErrorCode_NotGMCommand = 3,
	EGMCommandErrorCode_ParsingError = 4,
	EGMCommandErrorCode_Running    = 5,
	EGMCommandErrorCode_MAX        = 6
};


// Enum BLGame.ABLSDLTypes.EPartyErrorCode
enum class EPartyErrorCode : uint8_t
{
	EPartyErrorCode_Success        = 0,
	EPartyErrorCode_InvalidInvitor = 1,
	EPartyErrorCode_InvalidTarget  = 2,
	EPartyErrorCode_InviteSelf     = 3,
	EPartyErrorCode_ExpiredInvitation = 4,
	EPartyErrorCode_AlreadyPartyMember = 5,
	EPartyErrorCode_NotPartyLeader = 6,
	EPartyErrorCode_NotPartyMember = 7,
	EPartyErrorCode_FullParty      = 8,
	EPartyErrorCode_InvalidRequestor = 9,
	EPartyErrorCode_KickSelf       = 10,
	EPartyErrorCode_Move_InvalidIndex = 11,
	EPartyErrorCode_OperationError = 12,
	EPartyErrorCode_InviteeImpossibleState = 13,
	EPartyErrorCode_NotFriendly    = 14,
	EPartyErrorCode_InviteeTutorial = 15,
	EPartyErrorCode_InvitorTutorial = 16,
	EPartyErrorCode_InviteeInOtherDungeon = 17,
	EPartyErrorCode_InviterInOtherDungeon = 18,
	EPartyErrorCode_BanMemberUpdate = 19,
	EPartyErrorCode_InvalidPartyType = 20,
	EPartyErrorCode_AlivePartyDungeon = 21,
	EPartyErrorCode_IgnorePlayer   = 22,
	EPartyErrorCode_IgnorePlayerFromInvitee = 23,
	EPartyErrorCode_RaidParty      = 24,
	EPartyErrorCode_WarMatchingRegisted = 25,
	EPartyErrorCode_InvalidPartyIndex = 26,
	EPartyErrorCode_InvalidPartyEffectCombatInfo = 27,
	EPartyErrorCode_PartyEffectCombatCondition = 28,
	EPartyErrorCode_InvalidPartyEffectLivingInfo = 29,
	EPartyErrorCode_PartyEffectLivingCondition = 30,
	EPartyErrorCode_CombatPartyMember = 31,
	EPartyErrorCode_InviteRefuse   = 32,
	EPartyErrorCode_MAX            = 33
};


// Enum BLGame.ABLSDLTypes.EPartyDistributeMethod
enum class EPartyDistributeMethod : uint8_t
{
	EPartyDistributeMethod_FirstPicker = 0,
	EPartyDistributeMethod_Sequencial = 1,
	EPartyDistributeMethod_SetDistributor = 2,
	EPartyDistributeMethod_MAX     = 3
};


// Enum BLGame.ABLSDLTypes.ECommandExecuteErrorCode
enum class ECommandExecuteErrorCode : uint8_t
{
	ECommandExecuteErrorCode_Success = 0,
	ECommandExecuteErrorCode_ParsingError = 1,
	ECommandExecuteErrorCode_NotFoundCommand = 2,
	ECommandExecuteErrorCode_OperationFailed = 3,
	ECommandExecuteErrorCode_MAX   = 4
};


// Enum BLGame.ABLSDLTypes.EMoveState
enum class EMoveState : uint8_t
{
	EMoveState_Stopped             = 0,
	EMoveState_Moving              = 1,
	EMoveState_MAX                 = 2
};


// Enum BLGame.ABLSDLTypes.EPawnPhysics
enum class EPawnPhysics : uint8_t
{
	EPawnPhysics_None              = 0,
	EPawnPhysics_Walking           = 1,
	EPawnPhysics_Falling           = 2,
	EPawnPhysics_Swimming          = 3,
	EPawnPhysics_Flying            = 4,
	EPawnPhysics_MAX               = 5
};


// Enum BLGame.ABLSDLTypes.EMoveSpeedType
enum class EMoveSpeedType : uint8_t
{
	EMoveSpeedType_None            = 0,
	EMoveSpeedType_Walk            = 1,
	EMoveSpeedType_Run             = 2,
	EMoveSpeedType_FullRun         = 3,
	EMoveSpeedType_MAX             = 4
};


// Enum BLGame.ABLSDLTypes.EQuestErrorCode
enum class EQuestErrorCode : uint8_t
{
	EQuestErrorCode_Success        = 0,
	EQuestErrorCode_NotFound       = 1,
	EQuestErrorCode_InternalError  = 2,
	EQuestErrorCode_AlreadyHave    = 3,
	EQuestErrorCode_AlreadyComplete = 4,
	EQuestErrorCode_AlreadyResolved = 5,
	EQuestErrorCode_NotTalkWithNPC = 6,
	EQuestErrorCode_NotEnoughOnly1Level = 7,
	EQuestErrorCode_NotEnoughOnly2Level = 8,
	EQuestErrorCode_NotEnoughLevel = 9,
	EQuestErrorCode_ExcessMaxLevel = 10,
	EQuestErrorCode_NotEnoughInventorySlot = 11,
	EQuestErrorCode_NotSupportRace = 12,
	EQuestErrorCode_NotSupportClass = 13,
	EQuestErrorCode_TooManyOnGoingQuestCount = 14,
	EQuestErrorCode_NotExsistNPC   = 15,
	EQuestErrorCode_NoRemainRepeatCount = 16,
	EQuestErrorCode_NoRemainTotalRepeatCount = 17,
	EQuestErrorCode_CanNotReward   = 18,
	EQuestErrorCode_NotHave        = 19,
	EQuestErrorCode_NotFail        = 20,
	EQuestErrorCode_Fail           = 21,
	EQuestErrorCode_NotComplete    = 22,
	EQuestErrorCode_NotResolved    = 23,
	EQuestErrorCode_NotChooseSelectiveReward = 24,
	EQuestErrorCode_AbandonImpossible = 25,
	EQuestErrorCode_CantAcquireSkill = 26,
	EQuestErrorCode_NotEnoughMoney = 27,
	EQuestErrorCode_NotAlive       = 28,
	EQuestErrorCode_AlreadyHaveRoyal = 29,
	EQuestErrorCode_MAX            = 30
};


// Enum BLGame.ABLSDLTypes.EQuestStatus
enum class EQuestStatus : uint8_t
{
	EQuestStatus_Acceptable        = 0,
	EQuestStatus_NotEnough1Lv      = 1,
	EQuestStatus_ReceivableReward  = 2,
	EQuestStatus_OnGoing           = 3,
	EQuestStatus_Failed            = 4,
	EQuestStatus_MAX               = 5
};


// Enum BLGame.ABLSDLTypes.EQuestObjectiveStatus
enum class EQuestObjectiveStatus : uint8_t
{
	EQuestObjectiveStatus_NotyetStart = 0,
	EQuestObjectiveStatus_Start    = 1,
	EQuestObjectiveStatus_Stopped  = 2,
	EQuestObjectiveStatus_Complete = 3,
	EQuestObjectiveStatus_MAX      = 4
};


// Enum BLGame.ABLSDLTypes.EOrderErrorCode
enum class EOrderErrorCode : uint8_t
{
	EOrderErrorCode_Success        = 0,
	EOrderErrorCode_InternalError  = 1,
	EOrderErrorCode_NotFoundOrder  = 2,
	EOrderErrorCode_NotCompleteOrder = 3,
	EOrderErrorCode_NotEnoughInventorySlot = 4,
	EOrderErrorCode_NotCompleteDailyOrder = 5,
	EOrderErrorCode_NotFoundAcceptInfo = 6,
	EOrderErrorCode_NotCompleteWeeklyOrder = 7,
	EOrderErrorCode_NotFoundItem   = 8,
	EOrderErrorCode_MAX            = 9
};


// Enum BLGame.ABLSDLTypes.EOrderObjectiveStateType
enum class EOrderObjectiveStateType : uint8_t
{
	EOrderObjectiveStateType_None  = 0,
	EOrderObjectiveStateType_Progress = 1,
	EOrderObjectiveStateType_Complete = 2,
	EOrderObjectiveStateType_MAX   = 3
};


// Enum BLGame.ABLSDLTypes.EOrderStateType
enum class EOrderStateType : uint8_t
{
	EOrderStateType_None           = 0,
	EOrderStateType_Progress       = 1,
	EOrderStateType_Complete       = 2,
	EOrderStateType_RewardComplete = 3,
	EOrderStateType_MAX            = 4
};


// Enum BLGame.ABLSDLTypes.EOrderPriorityType
enum class EOrderPriorityType : uint8_t
{
	EOrderPriorityType_Require     = 0,
	EOrderPriorityType_Additional  = 1,
	EOrderPriorityType_MAX         = 2
};


// Enum BLGame.ABLSDLTypes.ETutorialOrderStateType
enum class ETutorialOrderStateType : uint8_t
{
	ETutorialOrderStateType_None   = 0,
	ETutorialOrderStateType_Notyet = 1,
	ETutorialOrderStateType_CanReceive = 2,
	ETutorialOrderStateType_Progress = 3,
	ETutorialOrderStateType_Complete = 4,
	ETutorialOrderStateType_RewardComplete = 5,
	ETutorialOrderStateType_MAX    = 6
};


// Enum BLGame.ABLSDLTypes.ESummoneeResult
enum class ESummoneeResult : uint8_t
{
	ESummoneeResult_Succeeded      = 0,
	ESummoneeResult_Failed_Pending = 1,
	ESummoneeResult_Failed_NotExist = 2,
	ESummoneeResult_Failed_FriendlyTarget = 3,
	ESummoneeResult_Failed_TargetNotExist = 4,
	ESummoneeResult_Failed_InvalidArgument = 5,
	ESummoneeResult_Failed_InvalidPosition = 6,
	ESummoneeResult_Failed_InvalidSkill = 7,
	ESummoneeResult_MAX            = 8
};


// Enum BLGame.ABLSDLTypes.ESummoneeStance
enum class ESummoneeStance : uint8_t
{
	ESummoneeStance_Aggressive     = 0,
	ESummoneeStance_Defensive      = 1,
	ESummoneeStance_Passive        = 2,
	ESummoneeStance_MAX            = 3
};


// Enum BLGame.ABLSDLTypes.EPCNonVehicleMountErrorCode
enum class EPCNonVehicleMountErrorCode : uint8_t
{
	EPCNonVehicleMountErrorCode_Success = 0,
	EPCNonVehicleMountErrorCode_AlreadyMount = 1,
	EPCNonVehicleMountErrorCode_OnCombat = 2,
	EPCNonVehicleMountErrorCode_Waypoint = 3,
	EPCNonVehicleMountErrorCode_CantMountLocation = 4,
	EPCNonVehicleMountErrorCode_UnderWater = 5,
	EPCNonVehicleMountErrorCode_InvalidMountType = 6,
	EPCNonVehicleMountErrorCode_CantMountNow = 7,
	EPCNonVehicleMountErrorCode_OnDie = 8,
	EPCNonVehicleMountErrorCode_RequireLevel = 9,
	EPCNonVehicleMountErrorCode_InUseSkill = 10,
	EPCNonVehicleMountErrorCode_UableConquerer = 11,
	EPCNonVehicleMountErrorCode_FailRank = 12,
	EPCNonVehicleMountErrorCode_MAX = 13
};


// Enum BLGame.ABLSDLTypes.EPCNonVehicleUnmountErrorCode
enum class EPCNonVehicleUnmountErrorCode : uint8_t
{
	EPCNonVehicleUnmountErrorCode_Success = 0,
	EPCNonVehicleUnmountErrorCode_NotMount = 1,
	EPCNonVehicleUnmountErrorCode_CantPlaceOnGround = 2,
	EPCNonVehicleUnmountErrorCode_InMountActiveSkill = 3,
	EPCNonVehicleUnmountErrorCode_MAX = 4
};


// Enum BLGame.ABLSDLTypes.EPCTakeoffErrorCode
enum class EPCTakeoffErrorCode : uint8_t
{
	EPCTakeoffErrorCode_Success    = 0,
	EPCTakeoffErrorCode_CantFlyLocation = 1,
	EPCTakeoffErrorCode_NotMount   = 2,
	EPCTakeoffErrorCode_AlreadyFly = 3,
	EPCTakeoffErrorCode_CantFlyMountType = 4,
	EPCTakeoffErrorCode_MAX        = 5
};


// Enum BLGame.ABLSDLTypes.EPCTakedownErrorCode
enum class EPCTakedownErrorCode : uint8_t
{
	EPCTakedownErrorCode_Success   = 0,
	EPCTakedownErrorCode_NotMount  = 1,
	EPCTakedownErrorCode_NotFly    = 2,
	EPCTakedownErrorCode_MAX       = 3
};


// Enum BLGame.ABLSDLTypes.EDropItemBagType
enum class EDropItemBagType : uint8_t
{
	EDropItemBagType_None          = 0,
	EDropItemBagType_Poor_DropItemBag = 1,
	EDropItemBagType_Common_DropItemBag = 2,
	EDropItemBagType_Uncommon_DropItemBag = 3,
	EDropItemBagType_Rare_DropItemBag = 4,
	EDropItemBagType_Epic_DropItemBag = 5,
	EDropItemBagType_Legendary_DropItemBag = 6,
	EDropItemBagType_MAX           = 7
};


// Enum BLGame.ABLSDLTypes.EDropItemType
enum class EDropItemType : uint8_t
{
	EDropItemType_Share            = 0,
	EDropItemType_Personal         = 1,
	EDropItemType_AddLooting       = 2,
	EDropItemType_MAX              = 3
};


// Enum BLGame.ABLSDLTypes.ESkillErrorCode
enum class ESkillErrorCode : uint8_t
{
	ESkillErrorCode_Internal       = 0,
	ESkillErrorCode_ActorAvailable = 1,
	ESkillErrorCode_ActorActive    = 2,
	ESkillErrorCode_ActorAlive     = 3,
	ESkillErrorCode_ActorInPhysState = 4,
	ESkillErrorCode_ActorCost      = 5,
	ESkillErrorCode_XBFLCondition  = 6,
	ESkillErrorCode_ActorCoolDown  = 7,
	ESkillErrorCode_TargetAvailable = 8,
	ESkillErrorCode_TargetActive   = 9,
	ESkillErrorCode_TargetAlive    = 10,
	ESkillErrorCode_RelationShip   = 11,
	ESkillErrorCode_DistanceLowerLimit = 12,
	ESkillErrorCode_DistanceUpperLimit = 13,
	ESkillErrorCode_AngleRange     = 14,
	ESkillErrorCode_CanSee         = 15,
	ESkillErrorCode_MAX            = 16
};


// Enum BLGame.ABLSDLTypes.EEnterDungeonPartyType
enum class EEnterDungeonPartyType : uint8_t
{
	EEnterDungeonPartyType_All     = 0,
	EEnterDungeonPartyType_Solo    = 1,
	EEnterDungeonPartyType_Party   = 2,
	EEnterDungeonPartyType_SoloOrParty = 3,
	EEnterDungeonPartyType_Raid    = 4,
	EEnterDungeonPartyType_RaidOrParty = 5,
	EEnterDungeonPartyType_MAX     = 6
};


// Enum BLGame.ABLSDLTypes.ETalkEndType
enum class ETalkEndType : uint8_t
{
	ETalkEndType_normal            = 0,
	ETalkEndType_npc_combat        = 1,
	ETalkEndType_pc_combat         = 2,
	ETalkEndType_MAX               = 3
};


// Enum BLGame.ABLSDLTypes.EMonsterBookRewardErrorCode
enum class EMonsterBookRewardErrorCode : uint8_t
{
	EMonsterBookRewardErrorCode_Success = 0,
	EMonsterBookRewardErrorCode_NotFound = 1,
	EMonsterBookRewardErrorCode_InternalError = 2,
	EMonsterBookRewardErrorCode_NotEnoughInventorySlot = 3,
	EMonsterBookRewardErrorCode_NotSupportRace = 4,
	EMonsterBookRewardErrorCode_NotSupportClass = 5,
	EMonsterBookRewardErrorCode_MAX = 6
};


// Enum BLGame.ABLSDLTypes.EItemTradeAddItemErrorCode
enum class EItemTradeAddItemErrorCode : uint8_t
{
	EItemTradeAddItemErrorCode_Success = 0,
	EItemTradeAddItemErrorCode_Die = 1,
	EItemTradeAddItemErrorCode_NotInTrade = 2,
	EItemTradeAddItemErrorCode_InvalidItem = 3,
	EItemTradeAddItemErrorCode_AlreadyInTrading = 4,
	EItemTradeAddItemErrorCode_SlotFull = 5,
	EItemTradeAddItemErrorCode_FailTakeoff = 6,
	EItemTradeAddItemErrorCode_Bonding = 7,
	EItemTradeAddItemErrorCode_NonTradeItem = 8,
	EItemTradeAddItemErrorCode_BusyItem = 9,
	EItemTradeAddItemErrorCode_NotOpenSlot = 10,
	EItemTradeAddItemErrorCode_CantTradeTarget = 11,
	EItemTradeAddItemErrorCode_MAX = 12
};


// Enum BLGame.ABLSDLTypes.EItemTradeErrorCode
enum class EItemTradeErrorCode : uint8_t
{
	EItemTradeErrorCode_Success    = 0,
	EItemTradeErrorCode_NotFriendly = 1,
	EItemTradeErrorCode_Die        = 2,
	EItemTradeErrorCode_TargetDie  = 3,
	EItemTradeErrorCode_Talk       = 4,
	EItemTradeErrorCode_TargetTalk = 5,
	EItemTradeErrorCode_Shopping   = 6,
	EItemTradeErrorCode_TargetShopping = 7,
	EItemTradeErrorCode_TooFar     = 8,
	EItemTradeErrorCode_Cancel     = 9,
	EItemTradeErrorCode_NotEnoughGold = 10,
	EItemTradeErrorCode_NotEnoughInvenSlot = 11,
	EItemTradeErrorCode_Trading    = 12,
	EItemTradeErrorCode_TradingSameTarget = 13,
	EItemTradeErrorCode_TargetTrading = 14,
	EItemTradeErrorCode_TargetReject = 15,
	EItemTradeErrorCode_MaxHolding = 16,
	EItemTradeErrorCode_TargetInvalid = 17,
	EItemTradeErrorCode_Bonding    = 18,
	EItemTradeErrorCode_RestrictTradeRequester = 19,
	EItemTradeErrorCode_RestrictTradeTarget = 20,
	EItemTradeErrorCode_IgnorePlayer = 21,
	EItemTradeErrorCode_Taming     = 22,
	EItemTradeErrorCode_MAX        = 23
};


// Enum BLGame.ABLSDLTypes.ERiotAppliedType
enum class ERiotAppliedType : uint8_t
{
	ERiotAppliedType_None          = 0,
	ERiotAppliedType_Applied       = 1,
	ERiotAppliedType_NotAppliedByResistChance = 2,
	ERiotAppliedType_NotAppliedByRate = 3,
	ERiotAppliedType_MAX           = 4
};


// Enum BLGame.ABLSDLTypes.EMailErrorCode
enum class EMailErrorCode : uint8_t
{
	EMailErrorCode_Success         = 0,
	EMailErrorCode_NotFoundMail    = 1,
	EMailErrorCode_CanNotSendSelf  = 2,
	EMailErrorCode_InvalidPlayerName = 3,
	EMailErrorCode_InvalidTitleLength = 4,
	EMailErrorCode_InvalidContentLength = 5,
	EMailErrorCode_NotEnoughMoney  = 6,
	EMailErrorCode_FullOfMoney     = 7,
	EMailErrorCode_NotHaveItem     = 8,
	EMailErrorCode_BondingItem     = 9,
	EMailErrorCode_BusyItem        = 10,
	EMailErrorCode_BadCondition    = 11,
	EMailErrorCode_NotFoundReceiver = 12,
	EMailErrorCode_NotEnoughReceiverMailCount = 13,
	EMailErrorCode_NotEnoughKeepMailCount = 14,
	EMailErrorCode_AlreadyReadMail = 15,
	EMailErrorCode_AlreadyKeepMail = 16,
	EMailErrorCode_AlreadyWithDrawMail = 17,
	EMailErrorCode_AlreadyDeleteMail = 18,
	EMailErrorCode_NotEnoughInventorySlot = 19,
	EMailErrorCode_OverMaxHoldingItemCount = 20,
	EMailErrorCode_AlreadyPreparedSendMail = 21,
	EMailErrorCode_NeedToPreparedSendMail = 22,
	EMailErrorCode_NotEnoughAttachItemSlot = 23,
	EMailErrorCode_BlockSendMailBySpam = 24,
	EMailErrorCode_BlockSendMailByGM = 25,
	EMailErrorCode_RecoverBlockSendMailByGM = 26,
	EMailErrorCode_PendingForTakeOffItem = 27,
	EMailErrorCode_FailTakeoff     = 28,
	EMailErrorCode_BusyNow         = 29,
	EMailErrorCode_NotFoundGuild   = 30,
	EMailErrorCode_CantSendItemToGroup = 31,
	EMailErrorCode_AutoDeleteMail  = 32,
	EMailErrorCode_Restrict        = 33,
	EMailErrorCode_RestrictAttachItem = 34,
	EMailErrorCode_RestrictAttachGold = 35,
	EMailErrorCode_SenderInTutorial = 36,
	EMailErrorCode_ReceiverInTutorial = 37,
	EMailErrorCode_MAX             = 38
};


// Enum BLGame.ABLSDLTypes.EMailPageType
enum class EMailPageType : uint8_t
{
	EMailPageType_Normal           = 0,
	EMailPageType_Keep             = 1,
	EMailPageType_Send             = 2,
	EMailPageType_Max              = 3
};


// Enum BLGame.ABLSDLTypes.EMailReceiverType
enum class EMailReceiverType : uint8_t
{
	EMailReceiverType_Player       = 0,
	EMailReceiverType_Guild        = 1,
	EMailReceiverType_Friends      = 2,
	EMailReceiverType_Max          = 3
};


// Enum BLGame.ABLSDLTypes.EBlockMailType
enum class EBlockMailType : uint8_t
{
	EBlockMailType_None            = 0,
	EBlockMailType_Spam            = 1,
	EBlockMailType_GM              = 2,
	EBlockMailType_MAX             = 3
};


// Enum BLGame.ABLSDLTypes.EAuctionErrorCode
enum class EAuctionErrorCode : uint8_t
{
	EAuctionErrorCode_Success      = 0,
	EAuctionErrorCode_NotFoundAuction = 1,
	EAuctionErrorCode_NotEnoughMoney = 2,
	EAuctionErrorCode_NotHaveItem  = 3,
	EAuctionErrorCode_BusyItem     = 4,
	EAuctionErrorCode_BondingItem  = 5,
	EAuctionErrorCode_BadCondition = 6,
	EAuctionErrorCode_FullOfAuctionCount = 7,
	EAuctionErrorCode_Restrict     = 8,
	EAuctionErrorCode_MAX          = 9
};


// Enum BLGame.ABLSDLTypes.EAuctionPageType
enum class EAuctionPageType : uint8_t
{
	EAuctionPageType_Auction       = 0,
	EAuctionPageType_My            = 1,
	EAuctionPageType_Max           = 2
};


// Enum BLGame.ABLSDLTypes.EAuctionLeftTimeType
enum class EAuctionLeftTimeType : uint8_t
{
	EAuctionLeftTimeType_HALF_DAY  = 0,
	EAuctionLeftTimeType_ONE_DAY   = 1,
	EAuctionLeftTimeType_TWO_DAYS  = 2,
	EAuctionLeftTimeType_MAX       = 3
};


// Enum BLGame.ABLSDLTypes.EGuildErrorCode
enum class EGuildErrorCode : uint8_t
{
	EGuildErrorCode_Success        = 0,
	EGuildErrorCode_AlreadyJoinGuild = 1,
	EGuildErrorCode_AlreadyJoinGuildOtherMember = 2,
	EGuildErrorCode_NotJoinGuild   = 3,
	EGuildErrorCode_NotEnoughLevel = 4,
	EGuildErrorCode_NotEnoughGold  = 5,
	EGuildErrorCode_NotFoundParty  = 6,
	EGuildErrorCode_NotFoundPlayer = 7,
	EGuildErrorCode_NotEnoughPartyMemberCount = 8,
	EGuildErrorCode_NotEnoughAuthority = 9,
	EGuildErrorCode_NotFoundGuild  = 10,
	EGuildErrorCode_FullOfGuildGradeCount = 11,
	EGuildErrorCode_PrimitiveGuildGrade = 12,
	EGuildErrorCode_AlreadyExistGuildGrade = 13,
	EGuildErrorCode_NotExistGuildGrade = 14,
	EGuildErrorCode_NotModifyGuildGrade = 15,
	EGuildErrorCode_NotEnoughCreateGuildDate = 16,
	EGuildErrorCode_NotEnoughJoinGuildDate = 17,
	EGuildErrorCode_NotROGuild     = 18,
	EGuildErrorCode_NotEnoughRP    = 19,
	EGuildErrorCode_MaxRP          = 20,
	EGuildErrorCode_AlreadyExistGuildName = 21,
	EGuildErrorCode_InvalidGuildName = 22,
	EGuildErrorCode_NotEnoughReusableGuildName = 23,
	EGuildErrorCode_MinLengthGuildName = 24,
	EGuildErrorCode_MaxLengthGuildName = 25,
	EGuildErrorCode_ForbidContainGuildName = 26,
	EGuildErrorCode_CompleteISOGuildName = 27,
	EGuildErrorCode_NotEnoughGuildGradePriority = 28,
	EGuildErrorCode_Fail_Create_Confirm_Another_Guild = 29,
	EGuildErrorCode_Fail_Create_Confirm_Level = 30,
	EGuildErrorCode_Fail_Create_Confirm_Leave = 31,
	EGuildErrorCode_Fail_Create_Confirm_Remove = 32,
	EGuildErrorCode_Fail_Create_Confirm_Disband = 33,
	EGuildErrorCode_Fail_Join_Confirm_Another_Guild = 34,
	EGuildErrorCode_Fail_Join_Confirm_Leave = 35,
	EGuildErrorCode_Fail_Join_Confirm_Remove = 36,
	EGuildErrorCode_Fail_Join_Confirm_Disband = 37,
	EGuildErrorCode_Fail_Join_Confirm_GuildWar_Enemy = 38,
	EGuildErrorCode_Fail_Invite_Authority = 39,
	EGuildErrorCode_Fail_Invite_Offline = 40,
	EGuildErrorCode_Fail_Invite_Create_Guild = 41,
	EGuildErrorCode_Fail_Invite_Another_Guild = 42,
	EGuildErrorCode_Fail_Invite_Hiran = 43,
	EGuildErrorCode_Fail_Invite_Union = 44,
	EGuildErrorCode_Fail_Invite_Leave = 45,
	EGuildErrorCode_Fail_Invite_Remove = 46,
	EGuildErrorCode_Fail_Invite_Disband = 47,
	EGuildErrorCode_Fail_Invite_Guild_Full = 48,
	EGuildErrorCode_Fail_Invite_Repeat = 49,
	EGuildErrorCode_Fail_Invite_Tutorial = 50,
	EGuildErrorCode_Fail_Invite_Cancel_Logout = 51,
	EGuildErrorCode_Fail_Invite_Cancel = 52,
	EGuildErrorCode_Fail_Invite_GuildWar_Enemy = 53,
	EGuildErrorCode_Fail_Remove    = 54,
	EGuildErrorCode_Fail_Remove_Authority = 55,
	EGuildErrorCode_Fail_Position  = 56,
	EGuildErrorCode_Fail_Position_Authority = 57,
	EGuildErrorCode_Fail_Position_Leader = 58,
	EGuildErrorCode_Fail_Position_ViceLeader = 59,
	EGuildErrorCode_Fail_Position_TheLowest = 60,
	EGuildErrorCode_Fail_Delegation_Incorrect = 61,
	EGuildErrorCode_Fail_Delegation_Self = 62,
	EGuildErrorCode_Fail_Delegation_Authority = 63,
	EGuildErrorCode_Fail_Delegation_Offline = 64,
	EGuildErrorCode_Fail_Delegation_Reject = 65,
	EGuildErrorCode_Fail_Delegation_Try_AnotherGuildMember = 66,
	EGuildErrorCode_Fail_Guild_Mark_Invalid_Background_CId = 67,
	EGuildErrorCode_Fail_Guild_Mark_Invalid_Background_Realm = 68,
	EGuildErrorCode_Fail_Guild_Mark_Invalid_Background_Level = 69,
	EGuildErrorCode_Fail_Guild_Mark_Invalid_Symbol_CId = 70,
	EGuildErrorCode_Fail_Guild_Mark_Invalid_Symbol_Color_Index = 71,
	EGuildErrorCode_Fail_Guild_Mark_Invalid_Symbol_Realm = 72,
	EGuildErrorCode_Fail_Guild_Mark_Invalid_Symbol_Level = 73,
	EGuildErrorCode_BadCondition   = 74,
	EGuildErrorCode_MAX            = 75
};


// Enum BLGame.ABLSDLTypes.EGuildPenaltyType
enum class EGuildPenaltyType : uint8_t
{
	EGuildPenaltyType_None         = 0,
	EGuildPenaltyType_Leave        = 1,
	EGuildPenaltyType_Remove       = 2,
	EGuildPenaltyType_Disband      = 3,
	EGuildPenaltyType_MAX          = 4
};


// Enum BLGame.ABLSDLTypes.ESkillDamageType
enum class ESkillDamageType : uint8_t
{
	ESkillDamageType_HP            = 0,
	ESkillDamageType_Energy        = 1,
	ESkillDamageType_MAX           = 2
};

/*
// Enum BLGame.ABLSDLTypes.EActionBarSlotType
enum class EActionBarSlotType : uint8_t
{
	EActionBarSlotType_None        = 0,
	EActionBarSlotType_Skill       = 1,
	EActionBarSlotType_Item        = 2,
	EActionBarSlotType_Mount       = 3,
	EActionBarSlotType_Pet         = 4,
	EActionBarSlotType_MAX         = 5
};
*/

// Enum BLGame.ABLSDLTypes.EMPFActionBarSlotType
enum class EMPFActionBarSlotType : uint8_t
{
	EMPFActionBarSlotType_None     = 0,
	EMPFActionBarSlotType_Mount    = 1,
	EMPFActionBarSlotType_Pet      = 2,
	EMPFActionBarSlotType_Fellow   = 3,
	EMPFActionBarSlotType_MAX      = 4
};


// Enum BLGame.ABLSDLTypes.ESpecialWarStateType
enum class ESpecialWarStateType : uint8_t
{
	ESpecialWarStateType_None      = 0,
	ESpecialWarStateType_Prepare   = 1,
	ESpecialWarStateType_Process   = 2,
	ESpecialWarStateType_Reward    = 3,
	ESpecialWarStateType_MAX       = 4
};


// Enum BLGame.ABLSDLTypes.ESpecialWarJoinType
enum class ESpecialWarJoinType : uint8_t
{
	ESpecialWarJoinType_None       = 0,
	ESpecialWarJoinType_WaitingLine = 1,
	ESpecialWarJoinType_Playing    = 2,
	ESpecialWarJoinType_WaitingRejoin = 3,
	ESpecialWarJoinType_MAX        = 4
};


// Enum BLGame.ABLSDLTypes.ESpecialWarErrorCode
enum class ESpecialWarErrorCode : uint8_t
{
	ESpecialWarErrorCode_Success   = 0,
	ESpecialWarErrorCode_BadCondition = 1,
	ESpecialWarErrorCode_NotFoundSpecialWar = 2,
	ESpecialWarErrorCode_NotEnoughLevel = 3,
	ESpecialWarErrorCode_NotEnoughActingPoint = 4,
	ESpecialWarErrorCode_CanNotReserveThisTime = 5,
	ESpecialWarErrorCode_CanNotOverlappedSpecialWar = 6,
	ESpecialWarErrorCode_AlreadyParticipatedColossum = 7,
	ESpecialWarErrorCode_NotEnoughLumena = 8,
	ESpecialWarErrorCode_AlreadyRegistOccupationWarMatching = 9,
	ESpecialWarErrorCode_AlreadyInInvalidWorldType = 10,
	ESpecialWarErrorCode_MAX       = 11
};


// Enum BLGame.ABLSDLTypes.ECitadelMapStateType
enum class ECitadelMapStateType : uint8_t
{
	ECitadelMapStateType_None      = 0,
	ECitadelMapStateType_Occupy    = 1,
	ECitadelMapStateType_BidMyGuild = 2,
	ECitadelMapStateType_MAX       = 3
};


// Enum BLGame.ABLSDLTypes.ECitadelOwnershipAuctionErrorCode
enum class ECitadelOwnershipAuctionErrorCode : uint8_t
{
	ECitadelOwnershipAuctionErrorCode_None = 0,
	ECitadelOwnershipAuctionErrorCode_NotEnoughCP = 1,
	ECitadelOwnershipAuctionErrorCode_NotEnoughBidCP = 2,
	ECitadelOwnershipAuctionErrorCode_NotAuctionTime = 3,
	ECitadelOwnershipAuctionErrorCode_NotFoundCitadel = 4,
	ECitadelOwnershipAuctionErrorCode_OtherRealm = 5,
	ECitadelOwnershipAuctionErrorCode_HaveNotGuild = 6,
	ECitadelOwnershipAuctionErrorCode_NotGuildLeader = 7,
	ECitadelOwnershipAuctionErrorCode_Other = 8,
	ECitadelOwnershipAuctionErrorCode_MAX = 9
};


// Enum BLGame.ABLSDLTypes.EROStateType
enum class EROStateType : uint8_t
{
	EROStateType_None              = 0,
	EROStateType_Prepare           = 1,
	EROStateType_Process           = 2,
	EROStateType_Reward            = 3,
	EROStateType_MAX               = 4
};


// Enum BLGame.ABLSDLTypes.EROErrorCode
enum class EROErrorCode : uint8_t
{
	EROErrorCode_Success           = 0,
	EROErrorCode_BadCondition      = 1,
	EROErrorCode_NotPrepareTime    = 2,
	EROErrorCode_NotModifyTime     = 3,
	EROErrorCode_NotReserved       = 4,
	EROErrorCode_NotGuildGrade     = 5,
	EROErrorCode_NotCOGuild        = 6,
	EROErrorCode_NotEqualRealm     = 7,
	EROErrorCode_IsROGuild         = 8,
	EROErrorCode_MAX               = 9
};


// Enum BLGame.ABLSDLTypes.ERPProductType
enum class ERPProductType : uint8_t
{
	ERPProductType_NPC             = 0,
	ERPProductType_Trap            = 1,
	ERPProductType_Prop            = 2,
	ERPProductType_MAX             = 3
};


// Enum BLGame.ABLSDLTypes.EContentTokenExchangeErrorCode
enum class EContentTokenExchangeErrorCode : uint8_t
{
	EContentTokenExchangeErrorCode_Success = 0,
	EContentTokenExchangeErrorCode_BadCondition = 1,
	EContentTokenExchangeErrorCode_MaxCount = 2,
	EContentTokenExchangeErrorCode_NotEnoughLumena = 3,
	EContentTokenExchangeErrorCode_MAX = 4
};


// Enum BLGame.ABLSDLTypes.ERestrictRealmReasonType
enum class ERestrictRealmReasonType : uint8_t
{
	ERestrictRealmReasonType_None  = 0,
	ERestrictRealmReasonType_Unbalance_Realm = 1,
	ERestrictRealmReasonType_Already_Selected_Realm = 2,
	ERestrictRealmReasonType_MAX   = 3
};


// Enum BLGame.ABLSDLTypes.EActingPointUpdateType
enum class EActingPointUpdateType : uint8_t
{
	EActingPointUpdateType_Acquire_Item = 0,
	EActingPointUpdateType_Acquire_Regen = 1,
	EActingPointUpdateType_Acquire_Charge = 2,
	EActingPointUpdateType_GMCMD   = 3,
	EActingPointUpdateType_Consume_Skill = 4,
	EActingPointUpdateType_Consume_MonsterBook = 5,
	EActingPointUpdateType_Consume_Dungeon = 6,
	EActingPointUpdateType_Consume_SpecialWar = 7,
	EActingPointUpdateType_Consume_Prop = 8,
	EActingPointUpdateType_Consume_Craft = 9,
	EActingPointUpdateType_Consume_Mission = 10,
	EActingPointUpdateType_Consume_Colosseum = 11,
	EActingPointUpdateType_Acquire_SpecialWar = 12,
	EActingPointUpdateType_MAX     = 13
};


// Enum BLGame.ABLSDLTypes.EPaymentType
enum class EPaymentType : uint8_t
{
	EPaymentType_Currency          = 0,
	EPaymentType_Lumena            = 1,
	EPaymentType_Cinis             = 2,
	EPaymentType_MAX               = 3
};


// Enum BLGame.ABLSDLTypes.EEquipItemCustomErrorCode
enum class EEquipItemCustomErrorCode : uint8_t
{
	EEquipItemCustomErrorCode_Success = 0,
	EEquipItemCustomErrorCode_BadCondition = 1,
	EEquipItemCustomErrorCode_NotCategory = 2,
	EEquipItemCustomErrorCode_HasEquip = 3,
	EEquipItemCustomErrorCode_NotEnoughCurrency = 4,
	EEquipItemCustomErrorCode_NotEnoughLumena = 5,
	EEquipItemCustomErrorCode_NotHaveItem = 6,
	EEquipItemCustomErrorCode_MaxStat = 7,
	EEquipItemCustomErrorCode_NotMaxStat = 8,
	EEquipItemCustomErrorCode_MaxPotentialLevel = 9,
	EEquipItemCustomErrorCode_NotEnoghMaterial = 10,
	EEquipItemCustomErrorCode_UpgeradePotentialResultFail = 11,
	EEquipItemCustomErrorCode_NotEnoughCinis = 12,
	EEquipItemCustomErrorCode_NotDestroy = 13,
	EEquipItemCustomErrorCode_NotExistDisjointInfo = 14,
	EEquipItemCustomErrorCode_MaxUpgradeLevel = 15,
	EEquipItemCustomErrorCode_NotEnoughInventorySlot = 16,
	EEquipItemCustomErrorCode_Flying = 17,
	EEquipItemCustomErrorCode_NotAlive = 18,
	EEquipItemCustomErrorCode_Cinematic = 19,
	EEquipItemCustomErrorCode_ItemTrade = 20,
	EEquipItemCustomErrorCode_CantSynthesize = 21,
	EEquipItemCustomErrorCode_CancelAction = 22,
	EEquipItemCustomErrorCode_NeglectedAction = 23,
	EEquipItemCustomErrorCode_MaintainAction = 24,
	EEquipItemCustomErrorCode_MAX  = 25
};


// Enum BLGame.ABLSDLTypes.EItemUpgradeLevelErrorCode
enum class EItemUpgradeLevelErrorCode : uint8_t
{
	EItemUpgradeLevelErrorCode_Success = 0,
	EItemUpgradeLevelErrorCode_BadCondition = 1,
	EItemUpgradeLevelErrorCode_NotEnoughCurrency = 2,
	EItemUpgradeLevelErrorCode_NotHaveItem = 3,
	EItemUpgradeLevelErrorCode_NotEnoghMaterial = 4,
	EItemUpgradeLevelErrorCode_MaxUpgradeLevel = 5,
	EItemUpgradeLevelErrorCode_NotEnoughInventorySlot = 6,
	EItemUpgradeLevelErrorCode_Flying = 7,
	EItemUpgradeLevelErrorCode_NotAlive = 8,
	EItemUpgradeLevelErrorCode_Cinematic = 9,
	EItemUpgradeLevelErrorCode_ItemTrade = 10,
	EItemUpgradeLevelErrorCode_CantSynthesize = 11,
	EItemUpgradeLevelErrorCode_MAX = 12
};


// Enum BLGame.ABLSDLTypes.EItemDesynthesisErrorCode
enum class EItemDesynthesisErrorCode : uint8_t
{
	EItemDesynthesisErrorCode_Success = 0,
	EItemDesynthesisErrorCode_BadCondition = 1,
	EItemDesynthesisErrorCode_NotAlive = 2,
	EItemDesynthesisErrorCode_Cinematic = 3,
	EItemDesynthesisErrorCode_Flying = 4,
	EItemDesynthesisErrorCode_ItemTrade = 5,
	EItemDesynthesisErrorCode_CantSynthesize = 6,
	EItemDesynthesisErrorCode_NotHaveItem = 7,
	EItemDesynthesisErrorCode_Desynthesizable = 8,
	EItemDesynthesisErrorCode_NotHaveSlot = 9,
	EItemDesynthesisErrorCode_MAX  = 10
};


// Enum BLGame.ABLSDLTypes.EItemEvolutionErrorCode
enum class EItemEvolutionErrorCode : uint8_t
{
	EItemEvolutionErrorCode_Success = 0,
	EItemEvolutionErrorCode_BadCondition = 1,
	EItemEvolutionErrorCode_NotAlive = 2,
	EItemEvolutionErrorCode_Cinematic = 3,
	EItemEvolutionErrorCode_Flying = 4,
	EItemEvolutionErrorCode_ItemTrade = 5,
	EItemEvolutionErrorCode_CantSynthesize = 6,
	EItemEvolutionErrorCode_NotEnoghMaterial = 7,
	EItemEvolutionErrorCode_OverLevel = 8,
	EItemEvolutionErrorCode_NotHaveItem = 9,
	EItemEvolutionErrorCode_Desynthesizable = 10,
	EItemEvolutionErrorCode_MAX    = 11
};


// Enum BLGame.ABLSDLTypes.EItemSucceedErrorCode
enum class EItemSucceedErrorCode : uint8_t
{
	EItemSucceedErrorCode_Success  = 0,
	EItemSucceedErrorCode_BadCondition = 1,
	EItemSucceedErrorCode_NotAlive = 2,
	EItemSucceedErrorCode_Cinematic = 3,
	EItemSucceedErrorCode_Flying   = 4,
	EItemSucceedErrorCode_ItemTrade = 5,
	EItemSucceedErrorCode_CantSynthesize = 6,
	EItemSucceedErrorCode_NotEnoghMaterial = 7,
	EItemSucceedErrorCode_NotHaveItem = 8,
	EItemSucceedErrorCode_MAX      = 9
};


// Enum BLGame.ABLSDLTypes.EMissionStateType
enum class EMissionStateType : uint8_t
{
	EMissionStateType_None         = 0,
	EMissionStateType_Prepare      = 1,
	EMissionStateType_Process      = 2,
	EMissionStateType_Success      = 3,
	EMissionStateType_GreatSuccess = 4,
	EMissionStateType_Fail         = 5,
	EMissionStateType_Complete     = 6,
	EMissionStateType_MAX          = 7
};


// Enum BLGame.ABLSDLTypes.EMissionErrorCode
enum class EMissionErrorCode : uint8_t
{
	EMissionErrorCode_Success      = 0,
	EMissionErrorCode_CanNotProcessOverlappedDB = 1,
	EMissionErrorCode_BusyFellow   = 2,
	EMissionErrorCode_NotEnoughInventorySlot = 3,
	EMissionErrorCode_FellowConditionIsNotRight = 4,
	EMissionErrorCode_InvalidMissionState = 5,
	EMissionErrorCode_NotEnoughFellowSlot = 6,
	EMissionErrorCode_NotFoundFellow = 7,
	EMissionErrorCode_NotEnoughActingPoint = 8,
	EMissionErrorCode_NotEnoughRank = 9,
	EMissionErrorCode_NotEnoughConqueror = 10,
	EMissionErrorCode_NotEnoughFatigue = 11,
	EMissionErrorCode_NotEnoughContractCount = 12,
	EMissionErrorCode_NeedLeaderFellow = 13,
	EMissionErrorCode_NoFellowInSlots = 14,
	EMissionErrorCode_PreMissionSlotEmpty = 15,
	EMissionErrorCode_MAX          = 16
};


// Enum BLGame.ABLSDLTypes.EFosterErrorCode
enum class EFosterErrorCode : uint8_t
{
	EFosterErrorCode_Success       = 0,
	EFosterErrorCode_SameUId       = 1,
	EFosterErrorCode_TargetInBusy  = 2,
	EFosterErrorCode_OfferInBusy   = 3,
	EFosterErrorCode_OfferLowerGrade = 4,
	EFosterErrorCode_TargetIsLegendaryGrade = 5,
	EFosterErrorCode_InvalidOffer  = 6,
	EFosterErrorCode_FosterNotAvailable = 7,
	EFosterErrorCode_FosterIngredientNotAvailable = 8,
	EFosterErrorCode_BadCondition  = 9,
	EFosterErrorCode_Fail          = 10,
	EFosterErrorCode_TargetNotEnoughLevel = 11,
	EFosterErrorCode_NotEnoughGradeUpChance = 12,
	EFosterErrorCode_LockMPF       = 13,
	EFosterErrorCode_TargetAlreadyMaxLevel = 14,
	EFosterErrorCode_WrongParam    = 15,
	EFosterErrorCode_NotPermanentTargetMPF = 16,
	EFosterErrorCode_NotPermanentOfferMPF = 17,
	EFosterErrorCode_IsMount       = 18,
	EFosterErrorCode_IsSummon      = 19,
	EFosterErrorCode_IsInMission   = 20,
	EFosterErrorCode_NotEnoughContentLevel = 21,
	EFosterErrorCode_MAX           = 22
};


// Enum BLGame.ABLSDLTypes.EDungeonPartyMatchingErrorCode
enum class EDungeonPartyMatchingErrorCode : uint8_t
{
	EDungeonPartyMatchingErrorCode_Success = 0,
	EDungeonPartyMatchingErrorCode_NotFound = 1,
	EDungeonPartyMatchingErrorCode_NotPartyType = 2,
	EDungeonPartyMatchingErrorCode_AlreadyRegister = 3,
	EDungeonPartyMatchingErrorCode_JoinParty = 4,
	EDungeonPartyMatchingErrorCode_NotEnoughLevel = 5,
	EDungeonPartyMatchingErrorCode_TooHighLevel = 6,
	EDungeonPartyMatchingErrorCode_NotEnoughRefreshTime = 7,
	EDungeonPartyMatchingErrorCode_Tutorial = 8,
	EDungeonPartyMatchingErrorCode_MAX = 9
};


// Enum BLGame.ABLSDLTypes.EEColosseumResultType
enum class EEColosseumResultType : uint8_t
{
	EEColosseumResultType_Union_Win = 0,
	EEColosseumResultType_Hieron_Win = 1,
	EEColosseumResultType_Draw     = 2,
	EEColosseumResultType_MAX      = 3
};


// Enum BLGame.ABLSDLTypes.EEColosseumMemberState
enum class EEColosseumMemberState : uint8_t
{
	EEColosseumMemberState_Alive   = 0,
	EEColosseumMemberState_Die     = 1,
	EEColosseumMemberState_Leave   = 2,
	EEColosseumMemberState_MAX     = 3
};


// Enum BLGame.ABLSDLTypes.EEColosseumMemberRegisterState
enum class EEColosseumMemberRegisterState : uint8_t
{
	EEColosseumMemberRegisterState_NotYet = 0,
	EEColosseumMemberRegisterState_Registered = 1,
	EEColosseumMemberRegisterState_Canceled = 2,
	EEColosseumMemberRegisterState_MAX = 3
};


// Enum BLGame.ABLSDLTypes.ERestrictTradeType
enum class ERestrictTradeType : uint8_t
{
	ERestrictTradeType_none        = 0,
	ERestrictTradeType_personal_trade = 1,
	ERestrictTradeType_mail        = 2,
	ERestrictTradeType_auction     = 3,
	ERestrictTradeType_warehouse   = 4,
	ERestrictTradeType_MAX         = 5
};


// Enum BLGame.ABLSDLTypes.EPartyMemberSummonError
enum class EPartyMemberSummonError : uint8_t
{
	EPartyMemberSummonError_Success = 0,
	EPartyMemberSummonError_SummonerDeath = 1,
	EPartyMemberSummonError_SummonerFalling = 2,
	EPartyMemberSummonError_SummonerWaypoint = 3,
	EPartyMemberSummonError_SummonerWorldTransfer = 4,
	EPartyMemberSummonError_SummonerLumena = 5,
	EPartyMemberSummonError_SummonerPartyBroken = 6,
	EPartyMemberSummonError_SummonerAlreadySummoning = 7,
	EPartyMemberSummonError_SummoneeDeath = 8,
	EPartyMemberSummonError_SummoneeLogout = 9,
	EPartyMemberSummonError_SummoneeInCombat = 10,
	EPartyMemberSummonError_SummoneeFalling = 11,
	EPartyMemberSummonError_SummoneeWaypoint = 12,
	EPartyMemberSummonError_SummoneeRefusal = 13,
	EPartyMemberSummonError_SummoneePartyBroken = 14,
	EPartyMemberSummonError_SummoneeWorldTransfer = 15,
	EPartyMemberSummonError_SummoneeAlreadySummoning = 16,
	EPartyMemberSummonError_SummonSwitchOff = 17,
	EPartyMemberSummonError_SummonerLocationFail = 18,
	EPartyMemberSummonError_SummoneeLocationFail = 19,
	EPartyMemberSummonError_SummoneeDungeonSolo = 20,
	EPartyMemberSummonError_SummoneeDungeonLimited = 21,
	EPartyMemberSummonError_SummoneeDungeonMinLevel = 22,
	EPartyMemberSummonError_SummoneeDungeonMaxLevel = 23,
	EPartyMemberSummonError_SummoneeDungeonQuestPerform = 24,
	EPartyMemberSummonError_SummoneeDungeonQuestResolved = 25,
	EPartyMemberSummonError_SummoneeDungeonItem = 26,
	EPartyMemberSummonError_SummoneeDungeonCoolTime = 27,
	EPartyMemberSummonError_SummoneeDungeonActingPoint = 28,
	EPartyMemberSummonError_SummoneeDungeonStage = 29,
	EPartyMemberSummonError_SummoneeDungeonEnterLimitCount = 30,
	EPartyMemberSummonError_SummoneeTaming = 31,
	EPartyMemberSummonError_SummoneeDungeonEnterLimitGearScore = 32,
	EPartyMemberSummonError_ETC    = 33,
	EPartyMemberSummonError_MAX    = 34
};


// Enum BLGame.ABLSDLTypes.EPartyType
enum class EPartyType : uint8_t
{
	EPartyType_None                = 0,
	EPartyType_Normal              = 1,
	EPartyType_Raid                = 2,
	EPartyType_Raid01              = 3,
	EPartyType_MAX                 = 4
};


// Enum BLGame.ABLSDLTypes.EExchangeErrorCode
enum class EExchangeErrorCode : uint8_t
{
	EExchangeErrorCode_Success     = 0,
	EExchangeErrorCode_BondingItem = 1,
	EExchangeErrorCode_NotSaleItem = 2,
	EExchangeErrorCode_DurationItem = 3,
	EExchangeErrorCode_EquipItem   = 4,
	EExchangeErrorCode_NotEnoughMoney = 5,
	EExchangeErrorCode_NotHaveItem = 6,
	EExchangeErrorCode_BadCondition = 7,
	EExchangeErrorCode_Restrict    = 8,
	EExchangeErrorCode_Processing  = 9,
	EExchangeErrorCode_FullOfMoney = 10,
	EExchangeErrorCode_NotEnoughInventorySlot = 11,
	EExchangeErrorCode_OverMaxHoldingItemCount = 12,
	EExchangeErrorCode_NotRepairDurabilityItem = 13,
	EExchangeErrorCode_InTutorial  = 14,
	EExchangeErrorCode_MAX         = 15
};


// Enum BLGame.ABLSDLTypes.EPartyMatchingPositionType
enum class EPartyMatchingPositionType : uint8_t
{
	EPartyMatchingPositionType_Tanker = 0,
	EPartyMatchingPositionType_Healer = 1,
	EPartyMatchingPositionType_Dealer = 2,
	EPartyMatchingPositionType_MAX = 3
};


// Enum BLGame.ABLSDLTypes.EPartyMatchingUIStateType
enum class EPartyMatchingUIStateType : uint8_t
{
	EPartyMatchingUIStateType_None = 0,
	EPartyMatchingUIStateType_Registered = 1,
	EPartyMatchingUIStateType_RandomDungeonRegistered = 2,
	EPartyMatchingUIStateType_MAX  = 3
};


// Enum BLGame.ABLSDLTypes.ESocketIndexType
enum class ESocketIndexType : uint8_t
{
	ESocketIndexType_First         = 0,
	ESocketIndexType_Second        = 1,
	ESocketIndexType_Third         = 2,
	ESocketIndexType_Fourth        = 3,
	ESocketIndexType_MAX           = 4
};


// Enum BLGame.ABLSDLTypes.ERuneSystemErrorCode
enum class ERuneSystemErrorCode : uint8_t
{
	ERuneSystemErrorCode_Success   = 0,
	ERuneSystemErrorCode_BadCondition = 1,
	ERuneSystemErrorCode_NotExistSocketSet = 2,
	ERuneSystemErrorCode_NotInventorySlot = 3,
	ERuneSystemErrorCode_NotEquipRuneItem = 4,
	ERuneSystemErrorCode_NotFoundRuneCategory = 5,
	ERuneSystemErrorCode_AlreadyEquipRune = 6,
	ERuneSystemErrorCode_NotEnoughGold = 7,
	ERuneSystemErrorCode_NotEnoughLumena = 8,
	ERuneSystemErrorCode_InventoryFull = 9,
	ERuneSystemErrorCode_OtherLockSlot = 10,
	ERuneSystemErrorCode_MAX       = 11
};


// Enum BLGame.ABLSDLTypes.ERecipeErrorCode
enum class ERecipeErrorCode : uint8_t
{
	ERecipeErrorCode_Success       = 0,
	ERecipeErrorCode_BadCondition  = 1,
	ERecipeErrorCode_InvalidSlotIndex = 2,
	ERecipeErrorCode_NotInventoryItem = 3,
	ERecipeErrorCode_CancelAction  = 4,
	ERecipeErrorCode_NeglectedAction = 5,
	ERecipeErrorCode_MaintainAction = 6,
	ERecipeErrorCode_InventoryFull = 7,
	ERecipeErrorCode_Flying        = 8,
	ERecipeErrorCode_NotAlive      = 9,
	ERecipeErrorCode_Cinematic     = 10,
	ERecipeErrorCode_ItemTrade     = 11,
	ERecipeErrorCode_CantSynthesize = 12,
	ERecipeErrorCode_NotEnoughItem = 13,
	ERecipeErrorCode_OtherSlotLock = 14,
	ERecipeErrorCode_MAX           = 15
};


// Enum BLGame.ABLSDLTypes.ECraftResultType
enum class ECraftResultType : uint8_t
{
	ECraftResultType_Fail          = 0,
	ECraftResultType_Success       = 1,
	ECraftResultType_GreatSuccess  = 2,
	ECraftResultType_SuperSuccess  = 3,
	ECraftResultType_MAX           = 4
};


// Enum BLGame.ABLSDLTypes.ECraftConsumeItemResultType
enum class ECraftConsumeItemResultType : uint8_t
{
	ECraftConsumeItemResultType_All = 0,
	ECraftConsumeItemResultType_One = 1,
	ECraftConsumeItemResultType_Not = 2,
	ECraftConsumeItemResultType_MAX = 3
};


// Enum BLGame.ABLSDLTypes.EFirstMaterialType
enum class EFirstMaterialType : uint8_t
{
	EFirstMaterialType_None        = 0,
	EFirstMaterialType_Rune        = 1,
	EFirstMaterialType_EquipItem   = 2,
	EFirstMaterialType_CreateCraftMaterial = 3,
	EFirstMaterialType_MAX         = 4
};


// Enum BLGame.ABLSDLTypes.ESecondMaterialType
enum class ESecondMaterialType : uint8_t
{
	ESecondMaterialType_None       = 0,
	ESecondMaterialType_Upgrade    = 1,
	ESecondMaterialType_Change     = 2,
	ESecondMaterialType_PowerUp    = 3,
	ESecondMaterialType_RuneShieldMaterialSource = 4,
	ESecondMaterialType_RuneSChanceBuffSource = 5,
	ESecondMaterialType_MAX        = 6
};


// Enum BLGame.ABLSDLTypes.EThirdMaterialType
enum class EThirdMaterialType : uint8_t
{
	EThirdMaterialType_None        = 0,
	EThirdMaterialType_ChanceBuff  = 1,
	EThirdMaterialType_Fix         = 2,
	EThirdMaterialType_MAX         = 3
};


// Enum BLGame.ABLSDLTypes.EFourthMaterialType
enum class EFourthMaterialType : uint8_t
{
	EFourthMaterialType_None       = 0,
	EFourthMaterialType_MaterialShield = 1,
	EFourthMaterialType_MAX        = 2
};


// Enum BLGame.ABLSDLTypes.ESignDataType
enum class ESignDataType : uint8_t
{
	ESignDataType_Personal         = 0,
	ESignDataType_Party            = 1,
	ESignDataType_MAX              = 2
};


// Enum BLGame.ABLSDLTypes.EGuildWarState
enum class EGuildWarState : uint8_t
{
	EGuildWarState_None            = 0,
	EGuildWarState_Wait            = 1,
	EGuildWarState_WarTime         = 2,
	EGuildWarState_CoolTime        = 3,
	EGuildWarState_MAX             = 4
};


// Enum BLGame.ABLSDLTypes.EGuildWarResultType
enum class EGuildWarResultType : uint8_t
{
	EGuildWarResultType_Win        = 0,
	EGuildWarResultType_Lose       = 1,
	EGuildWarResultType_Draw       = 2,
	EGuildWarResultType_MAX        = 3
};


// Enum BLGame.ABLSDLTypes.EGuildWarResultReasonType
enum class EGuildWarResultReasonType : uint8_t
{
	EGuildWarResultReasonType_Surrender = 0,
	EGuildWarResultReasonType_Kill = 1,
	EGuildWarResultReasonType_ExpireTime = 2,
	EGuildWarResultReasonType_MAX  = 3
};


// Enum BLGame.ABLSDLTypes.EV2MountEnchanceErrorCode
enum class EV2MountEnchanceErrorCode : uint8_t
{
	EV2MountEnchanceErrorCode_Success = 0,
	EV2MountEnchanceErrorCode_AlreadyMount = 1,
	EV2MountEnchanceErrorCode_OnCombat = 2,
	EV2MountEnchanceErrorCode_Waypoint = 3,
	EV2MountEnchanceErrorCode_CantMountLocation = 4,
	EV2MountEnchanceErrorCode_UnderWater = 5,
	EV2MountEnchanceErrorCode_InvalidMountType = 6,
	EV2MountEnchanceErrorCode_CantMountNow = 7,
	EV2MountEnchanceErrorCode_OnDie = 8,
	EV2MountEnchanceErrorCode_RequireLevel = 9,
	EV2MountEnchanceErrorCode_InUseSkill = 10,
	EV2MountEnchanceErrorCode_UableConquerer = 11,
	EV2MountEnchanceErrorCode_FailRank = 12,
	EV2MountEnchanceErrorCode_NotEnoughFatigue = 13,
	EV2MountEnchanceErrorCode_MAX  = 14
};


// Enum BLGame.ABLSDLTypes.EV2MountEnchanceUnMountErrorCode
enum class EV2MountEnchanceUnMountErrorCode : uint8_t
{
	EV2MountEnchanceUnMountErrorCode_Success = 0,
	EV2MountEnchanceUnMountErrorCode_NotMount = 1,
	EV2MountEnchanceUnMountErrorCode_CantPlaceOnGround = 2,
	EV2MountEnchanceUnMountErrorCode_InMountActiveSkill = 3,
	EV2MountEnchanceUnMountErrorCode_MAX = 4
};


// Enum BLGame.ABLSDLTypes.EChatGuildType
enum class EChatGuildType : uint8_t
{
	EChatGuildType_Normal          = 0,
	EChatGuildType_CO              = 1,
	EChatGuildType_RO              = 2,
	EChatGuildType_MAX             = 3
};


// Enum BLGame.ABLSDLTypes.EAnimaErrorCode
enum class EAnimaErrorCode : uint8_t
{
	EAnimaErrorCode_Success        = 0,
	EAnimaErrorCode_WrongParam     = 1,
	EAnimaErrorCode_FullInvenSlot  = 2,
	EAnimaErrorCode_FullCompanion  = 3,
	EAnimaErrorCode_BadCondition   = 4,
	EAnimaErrorCode_MAX            = 5
};


// Enum BLGame.ABLSDLTypes.EMPFRechargeErrorCode
enum class EMPFRechargeErrorCode : uint8_t
{
	EMPFRechargeErrorCode_Success  = 0,
	EMPFRechargeErrorCode_WrongParam = 1,
	EMPFRechargeErrorCode_BadCondition = 2,
	EMPFRechargeErrorCode_InfiniteChance = 3,
	EMPFRechargeErrorCode_AlreadyMaxGrade = 4,
	EMPFRechargeErrorCode_ItemUseChanceZero = 5,
	EMPFRechargeErrorCode_AlreadyFatigueMax = 6,
	EMPFRechargeErrorCode_IsMount  = 7,
	EMPFRechargeErrorCode_IsSummon = 8,
	EMPFRechargeErrorCode_IsInMission = 9,
	EMPFRechargeErrorCode_NotEnoughContentLevel = 10,
	EMPFRechargeErrorCode_MAX      = 11
};


// Enum BLGame.ABLSDLTypes.EV2MainCraftType
enum class EV2MainCraftType : uint8_t
{
	EV2MainCraftType_None          = 0,
	EV2MainCraftType_Smith         = 1,
	EV2MainCraftType_Handiwork     = 2,
	EV2MainCraftType_Smelt         = 3,
	EV2MainCraftType_MAX           = 4
};


// Enum BLGame.ABLSDLTypes.EV2SubCraftType
enum class EV2SubCraftType : uint8_t
{
	EV2SubCraftType_None           = 0,
	EV2SubCraftType_Cook           = 1,
	EV2SubCraftType_Alchemy        = 2,
	EV2SubCraftType_MAX            = 3
};


// Enum BLGame.ABLSDLTypes.ERepairType
enum class ERepairType : uint8_t
{
	ERepairType_NIL                = 0,
	ERepairType_Repair             = 1,
	ERepairType_Recover            = 2,
	ERepairType_MAX                = 3
};


// Enum BLGame.ABLSDLTypes.ERepairResultType
enum class ERepairResultType : uint8_t
{
	ERepairResultType_Success      = 0,
	ERepairResultType_GreatSuccess = 1,
	ERepairResultType_Fail         = 2,
	ERepairResultType_Error        = 3,
	ERepairResultType_MAX          = 4
};


// Enum BLGame.ABLSDLTypes.EItemUpgradeLevelResultType
enum class EItemUpgradeLevelResultType : uint8_t
{
	EItemUpgradeLevelResultType_Success = 0,
	EItemUpgradeLevelResultType_GreatSuccess = 1,
	EItemUpgradeLevelResultType_Fail = 2,
	EItemUpgradeLevelResultType_Error = 3,
	EItemUpgradeLevelResultType_MAX = 4
};


// Enum BLGame.ABLSDLTypes.EItemDesynthesisResultType
enum class EItemDesynthesisResultType : uint8_t
{
	EItemDesynthesisResultType_Error = 0,
	EItemDesynthesisResultType_Success = 1,
	EItemDesynthesisResultType_GreatSuccess = 2,
	EItemDesynthesisResultType_MAX = 3
};


// Enum BLGame.ABLSDLTypes.EItemEvolutionResultType
enum class EItemEvolutionResultType : uint8_t
{
	EItemEvolutionResultType_Error = 0,
	EItemEvolutionResultType_Success = 1,
	EItemEvolutionResultType_MAX   = 2
};


// Enum BLGame.ABLSDLTypes.EItemSucceedResultType
enum class EItemSucceedResultType : uint8_t
{
	EItemSucceedResultType_Error   = 0,
	EItemSucceedResultType_Success = 1,
	EItemSucceedResultType_MAX     = 2
};


// Enum BLGame.ABLSDLTypes.EFallingEscapeErrorCode
enum class EFallingEscapeErrorCode : uint8_t
{
	EFallingEscapeErrorCode_Success = 0,
	EFallingEscapeErrorCode_RemainCoolTime = 1,
	EFallingEscapeErrorCode_InvalidDistance = 2,
	EFallingEscapeErrorCode_MAX    = 3
};


// Enum BLGame.ABLSDLTypes.ESkillTreeErrorCode
enum class ESkillTreeErrorCode : uint8_t
{
	ESkillTreeErrorCode_Success    = 0,
	ESkillTreeErrorCode_NotChangeInCombat = 1,
	ESkillTreeErrorCode_NotChangeInDeath = 2,
	ESkillTreeErrorCode_InOtherDBProcess = 3,
	ESkillTreeErrorCode_SameSkillTree = 4,
	ESkillTreeErrorCode_InvalidSkillTree = 5,
	ESkillTreeErrorCode_InvalidSkillTreePage = 6,
	ESkillTreeErrorCode_Internal   = 7,
	ESkillTreeErrorCode_NotHaveResetItem = 8,
	ESkillTreeErrorCode_NotEnoughSkillCount = 9,
	ESkillTreeErrorCode_MAX        = 10
};


// Enum BLGame.ABLSDLTypes.ESkillDeckErrorCode
enum class ESkillDeckErrorCode : uint8_t
{
	ESkillDeckErrorCode_Success    = 0,
	ESkillDeckErrorCode_InvalidDeckPage = 1,
	ESkillDeckErrorCode_InvalidSkillSlotSize = 2,
	ESkillDeckErrorCode_InvalidSkill = 3,
	ESkillDeckErrorCode_InvalidSkillIndex = 4,
	ESkillDeckErrorCode_NotAcquiredSkill = 5,
	ESkillDeckErrorCode_NotNeedInstall = 6,
	ESkillDeckErrorCode_SameSkillDeck = 7,
	ESkillDeckErrorCode_MAX        = 8
};


// Enum BLGame.ABLSDLTypes.ETamingEndState
enum class ETamingEndState : uint8_t
{
	ETamingEndState_Success        = 0,
	ETamingEndState_FailTimeOut    = 1,
	ETamingEndState_FailInputESC   = 2,
	ETamingEndState_FailDie        = 3,
	ETamingEndState_FailException  = 4,
	ETamingEndState_CheckFail      = 5,
	ETamingEndState_MAX            = 6
};


// Enum BLGame.ABLSDLTypes.EItemAdditionalEffectIndexType
enum class EItemAdditionalEffectIndexType : uint8_t
{
	EItemAdditionalEffectIndexType_Nil = 0,
	EItemAdditionalEffectIndexType_First = 1,
	EItemAdditionalEffectIndexType_Second = 2,
	EItemAdditionalEffectIndexType_Third = 3,
	EItemAdditionalEffectIndexType_Fourth = 4,
	EItemAdditionalEffectIndexType_MAX = 5
};


// Enum BLGame.ABLSDLTypes.EItemAdditionalEffectType
enum class EItemAdditionalEffectType : uint8_t
{
	EItemAdditionalEffectType_Nil  = 0,
	EItemAdditionalEffectType_Opt  = 1,
	EItemAdditionalEffectType_Socket = 2,
	EItemAdditionalEffectType_MAX  = 3
};


// Enum BLGame.ABLSDLTypes.ERuneCarveErrorCode
enum class ERuneCarveErrorCode : uint8_t
{
	ERuneCarveErrorCode_Success    = 0,
	ERuneCarveErrorCode_BadCondition = 1,
	ERuneCarveErrorCode_InvaildRuneSocket = 2,
	ERuneCarveErrorCode_NotInventorySlot = 3,
	ERuneCarveErrorCode_NotRuneItem = 4,
	ERuneCarveErrorCode_NotEnoughGold = 5,
	ERuneCarveErrorCode_OtherLockSlot = 6,
	ERuneCarveErrorCode_MAX        = 7
};


// Enum BLGame.ABLSDLTypes.ELookChangeType
enum class ELookChangeType : uint8_t
{
	ELookChangeType_None           = 0,
	ELookChangeType_Appearance     = 1,
	ELookChangeType_Gender         = 2,
	ELookChangeType_MAX            = 3
};


// Enum BLGame.ABLSDLTypes.ELookChangeErrorCode
enum class ELookChangeErrorCode : uint8_t
{
	ELookChangeErrorCode_Success   = 0,
	ELookChangeErrorCode_InvalidGenderChange = 1,
	ELookChangeErrorCode_InvalidAppearanceChange = 2,
	ELookChangeErrorCode_WrongCustomizeDataSize = 3,
	ELookChangeErrorCode_WrongGender = 4,
	ELookChangeErrorCode_Unknown   = 5,
	ELookChangeErrorCode_WrongStep = 6,
	ELookChangeErrorCode_MAX       = 7
};


// Enum BLGame.ABLSDLTypes.EWarStateType
enum class EWarStateType : uint8_t
{
	EWarStateType_None             = 0,
	EWarStateType_Prepare          = 1,
	EWarStateType_Process          = 2,
	EWarStateType_Reward           = 3,
	EWarStateType_MAX              = 4
};


// Enum BLGame.ABLSDLTypes.EOccupationWarErrorCode
enum class EOccupationWarErrorCode : uint8_t
{
	EOccupationWarErrorCode_Success = 0,
	EOccupationWarErrorCode_BadCondition = 1,
	EOccupationWarErrorCode_NotFoundOccupationWar = 2,
	EOccupationWarErrorCode_NotEnoughLevel = 3,
	EOccupationWarErrorCode_AlreadyParticipatedColossum = 4,
	EOccupationWarErrorCode_AlreadyParticipatedSpecialWar = 5,
	EOccupationWarErrorCode_MAX    = 6
};


// Enum BLGame.ABLSDLTypes.EWarMatchMakerUnregistType
enum class EWarMatchMakerUnregistType : uint8_t
{
	EWarMatchMakerUnregistType_Cancel = 0,
	EWarMatchMakerUnregistType_LeaveParty = 1,
	EWarMatchMakerUnregistType_JoinParty = 2,
	EWarMatchMakerUnregistType_CreateParty = 3,
	EWarMatchMakerUnregistType_PartyMemberAdd = 4,
	EWarMatchMakerUnregistType_ExitGame = 5,
	EWarMatchMakerUnregistType_DissolveParty = 6,
	EWarMatchMakerUnregistType_MAX = 7
};


// Enum BLGame.ABLSDLTypes.EWarMatchMakerErrorCode
enum class EWarMatchMakerErrorCode : uint8_t
{
	EWarMatchMakerErrorCode_Success = 0,
	EWarMatchMakerErrorCode_NotPartyLeader = 1,
	EWarMatchMakerErrorCode_NotEnoughLevel = 2,
	EWarMatchMakerErrorCode_AlreadyJoinAnotherWar = 3,
	EWarMatchMakerErrorCode_InPartyMatching = 4,
	EWarMatchMakerErrorCode_PartyMemberLogout = 5,
	EWarMatchMakerErrorCode_WarPenalty = 6,
	EWarMatchMakerErrorCode_CheckFail = 7,
	EWarMatchMakerErrorCode_Cancel = 8,
	EWarMatchMakerErrorCode_ExpireTime = 9,
	EWarMatchMakerErrorCode_Unknown = 10,
	EWarMatchMakerErrorCode_InTutorial = 11,
	EWarMatchMakerErrorCode_MAX    = 12
};


// Enum BLGame.ABLSDLTypes.EV2MissionTabState
enum class EV2MissionTabState : uint8_t
{
	EV2MissionTabState_None        = 0,
	EV2MissionTabState_Prepare     = 1,
	EV2MissionTabState_Process     = 2,
	EV2MissionTabState_Complete    = 3,
	EV2MissionTabState_MAX         = 4
};


// Enum BLGame.ABLSDLTypes.EV2MissionFellowPosition
enum class EV2MissionFellowPosition : uint8_t
{
	EV2MissionFellowPosition_None  = 0,
	EV2MissionFellowPosition_Leader = 1,
	EV2MissionFellowPosition_Sub1  = 2,
	EV2MissionFellowPosition_Sub2  = 3,
	EV2MissionFellowPosition_MAX   = 4
};


// Enum BLGame.ABLSDLTypes.EV2MissionSlot
enum class EV2MissionSlot : uint8_t
{
	EV2MissionSlot_First           = 0,
	EV2MissionSlot_Second          = 1,
	EV2MissionSlot_Third           = 2,
	EV2MissionSlot_Max             = 3
};


// Enum BLGame.ABLSDLTypes.ECombatSkillTreePage
enum class ECombatSkillTreePage : uint8_t
{
	ECombatSkillTreePage_Stance    = 0,
	ECombatSkillTreePage_NonStance = 1,
	ECombatSkillTreePage_Parameter = 2,
	ECombatSkillTreePage_End       = 3,
	ECombatSkillTreePage_MAX       = 4
};


// Enum BLGame.ABLSDLTypes.ECombatSkillTreeErrorCode
enum class ECombatSkillTreeErrorCode : uint8_t
{
	ECombatSkillTreeErrorCode_Success = 0,
	ECombatSkillTreeErrorCode_InOtherDBProcess = 1,
	ECombatSkillTreeErrorCode_SameSkillTree = 2,
	ECombatSkillTreeErrorCode_InvalidSkillTree = 3,
	ECombatSkillTreeErrorCode_InvalidSkillTreePage = 4,
	ECombatSkillTreeErrorCode_Internal = 5,
	ECombatSkillTreeErrorCode_NotHaveResetItem = 6,
	ECombatSkillTreeErrorCode_NotExistNode = 7,
	ECombatSkillTreeErrorCode_InCombat = 8,
	ECombatSkillTreeErrorCode_InDeath = 9,
	ECombatSkillTreeErrorCode_NotEnoughGemPiece = 10,
	ECombatSkillTreeErrorCode_NotEnoughGem = 11,
	ECombatSkillTreeErrorCode_MaxDayExchangableCount = 12,
	ECombatSkillTreeErrorCode_NotEnoughInvenSlot = 13,
	ECombatSkillTreeErrorCode_NotEnoughGold = 14,
	ECombatSkillTreeErrorCode_NotExistPrecedeNode = 15,
	ECombatSkillTreeErrorCode_DuplicateNode = 16,
	ECombatSkillTreeErrorCode_NotEnoughLevel = 17,
	ECombatSkillTreeErrorCode_NotEnoughSPLevel = 18,
	ECombatSkillTreeErrorCode_NotExistLeafNode = 19,
	ECombatSkillTreeErrorCode_EmptyNodeList = 20,
	ECombatSkillTreeErrorCode_MAX  = 21
};


// Enum BLGame.ABLSDLTypes.EChallengeTowerEndRoundType
enum class EChallengeTowerEndRoundType : uint8_t
{
	EChallengeTowerEndRoundType_Notyet = 0,
	EChallengeTowerEndRoundType_EnemyDown = 1,
	EChallengeTowerEndRoundType_DestoryHolyNPC = 2,
	EChallengeTowerEndRoundType_PlayerNonSurvive = 3,
	EChallengeTowerEndRoundType_ETC = 4,
	EChallengeTowerEndRoundType_MAX = 5
};


// Enum BLGame.ABLSDLTypes.EChainErrorCode
enum class EChainErrorCode : uint8_t
{
	EChainErrorCode_Success        = 0,
	EChainErrorCode_Internal       = 1,
	EChainErrorCode_Dead           = 2,
	EChainErrorCode_CoolTime       = 3,
	EChainErrorCode_NotExistCandidateStance = 4,
	EChainErrorCode_WrongStartStanceSkill = 5,
	EChainErrorCode_MAX            = 6
};


// Enum BLGame.ABLSDLTypes.EGemAcquireType
enum class EGemAcquireType : uint8_t
{
	EGemAcquireType_LevelUp        = 0,
	EGemAcquireType_UseItem        = 1,
	EGemAcquireType_GMCheat        = 2,
	EGemAcquireType_ExchangeGemPiece = 3,
	EGemAcquireType_MAX            = 4
};


// Enum BLGame.ABLSDLTypes.EWorldServerBusyType
enum class EWorldServerBusyType : uint8_t
{
	EWorldServerBusyType_Offline   = 0,
	EWorldServerBusyType_Good      = 1,
	EWorldServerBusyType_Normal    = 2,
	EWorldServerBusyType_Congest   = 3,
	EWorldServerBusyType_Full      = 4,
	EWorldServerBusyType_Closed    = 5,
	EWorldServerBusyType_MAX       = 6
};


// Enum BLGame.ABLSDLTypes.ELoginServerError
enum class ELoginServerError : uint8_t
{
	ELoginServerError_Success      = 0,
	ELoginServerError_Deny         = 1,
	ELoginServerError_Wait         = 2,
	ELoginServerError_KickOut      = 3,
	ELoginServerError_DenyDueToClosed = 4,
	ELoginServerError_Preseason    = 5,
	ELoginServerError_NotMyServer  = 6,
	ELoginServerError_FullWaitQueue = 7,
	ELoginServerError_MAX          = 8
};


// Enum BLGame.ABLSDLTypes.ESecondPasswordState
enum class ESecondPasswordState : uint8_t
{
	ESecondPasswordState_None      = 0,
	ESecondPasswordState_NoneByGM  = 1,
	ESecondPasswordState_Used      = 2,
	ESecondPasswordState_Locked    = 3,
	ESecondPasswordState_LockedByGM = 4,
	ESecondPasswordState_LockedBySelf = 5,
	ESecondPasswordState_MAX       = 6
};


// Enum BLGame.ABLSDLTypes.ESecondPasswordUpdateType
enum class ESecondPasswordUpdateType : uint8_t
{
	ESecondPasswordUpdateType_None = 0,
	ESecondPasswordUpdateType_Register = 1,
	ESecondPasswordUpdateType_Change = 2,
	ESecondPasswordUpdateType_Locked = 3,
	ESecondPasswordUpdateType_Failed = 4,
	ESecondPasswordUpdateType_Success = 5,
	ESecondPasswordUpdateType_MAX  = 6
};


// Enum BLGame.AbnormalStatusAsset.ABNORMAL_STATUS_LOCATION_CENTER
enum class EABNORMAL_STATUS_LOCATION_CENTER : uint8_t
{
	ASLC_PawnCenter                = 0,
	ASLC_PawnOverhead              = 1,
	ASLC_PawnGround                = 2,
	ASLC_MAX                       = 3
};


// Enum BLGame.AbnormalStatusAsset.ABNORMAL_STATUS_CLASS
enum class EABNORMAL_STATUS_CLASS : uint8_t
{
	ASC_Normal                     = 0,
	ASC_Restrict                   = 1,
	ASC_MAX                        = 2
};


// Enum BLGame.AbnormalStatusAsset.ABNORMAL_STATUS_VFX_SCALE_TYPE
enum class EABNORMAL_STATUS_VFX_SCALE_TYPE : uint8_t
{
	ASVST_NOSCALE                  = 0,
	ASVST_HEIGHT                   = 1,
	ASVST_RADIUS                   = 2,
	ASVST_LARGER                   = 3,
	ASVST_SMALLER                  = 4,
	ASVST_MAX                      = 5
};


// Enum BLGame.StatusEffectBase.STATUS_EFFECT_PHASE
enum class ESTATUS_EFFECT_PHASE : uint8_t
{
	SEP_NONE                       = 0,
	SEP_APPEAR                     = 1,
	SEP_ONGOING                    = 2,
	SEP_DISAPPEAR                  = 3,
	SEP_PERIODIC                   = 4,
	SEP_FINISH                     = 5,
	SEP_MAX                        = 6
};


// Enum BLGame.StatusEffectBase.STATUS_EFFECT_FAILED_PHASE
enum class ESTATUS_EFFECT_FAILED_PHASE : uint8_t
{
	SEFP_NONE                      = 0,
	SEFP_PLAYERMESHLOAD_NOTYET     = 1,
	SEFP_MAX                       = 2
};


// Enum BLGame.BLPartyRaidManager.EPartyMemberType
enum class EPartyMemberType : uint8_t
{
	EPartyMemberType_None          = 0,
	EPartyMemberType_Party         = 1,
	EPartyMemberType_Raid          = 2,
	EPartyMemberType_Max           = 3
};


// Enum BLGame.AbnormalStatusRestrict.ABNORMAL_STATUS_EMITTER_TYPE
enum class EABNORMAL_STATUS_EMITTER_TYPE : uint8_t
{
	ASE_TYPE_NORMAL                = 0,
	ASE_TYPE_BEAM                  = 1,
	ASE_TYPE_MAX                   = 2
};


// Enum BLGame.AbnormalStatusRestrict.ABNORMAL_STATUS_EMITTER_LOCATION_TYPE
enum class EABNORMAL_STATUS_EMITTER_LOCATION_TYPE : uint8_t
{
	ASEL_TYPE_NONE                 = 0,
	ASEL_TYPE_BONE                 = 1,
	ASEL_TYPE_SOCKET               = 2,
	ASEL_TYPE_GROUND               = 3,
	ASEL_TYPE_MAX                  = 4
};


// Enum BLGame.ActionApplyResultComponent.ActionApplyState
enum class EActionApplyState : uint8_t
{
	AAS_NONE                       = 0,
	AAS_RECEIVE_TARGETINFO         = 1,
	AAS_RECEIVE_APPLYINFO          = 2,
	AAS_MAX                        = 3
};


// Enum BLGame.ActionMappingManager.SkillDeckCategoryType
enum class ESkillDeckCategoryType : uint8_t
{
	SDCT_KEY                       = 0,
	SDCT_ACTIVE                    = 1,
	SDCT_QTE_ACTIVE                = 2,
	SDCT_PASSIVE                   = 3,
	SDCT_NONE                      = 4,
	SDCT_MAX                       = 5
};


// Enum BLGame.AlertManager.EAlertElementType
enum class EAlertElementType : uint8_t
{
	EAlertElement_None             = 0,
	EAlertElement_Episode          = 1,
	EAlertElement_Monster_Book     = 2,
	EAlertElement_Story            = 3,
	EAlertElement_Royal            = 4,
	EAlertElement_Guide            = 5,
	EAlertElement_MAX              = 6
};


// Enum BLGame.AnimaManager.AnimaUIStateType
enum class EAnimaUIStateType : uint8_t
{
	Anima_Main                     = 0,
	Anima_ProgressOne              = 1,
	Anima_ProgressTen              = 2,
	Anima_ResponseWaiting          = 3,
	Anima_ResultWaiting            = 4,
	Anima_Result                   = 5,
	Anima_OnClose                  = 6,
	Anima_MAX                      = 7
};


// Enum BLGame.AutoFiringComponent.ToggleAutoFiringState
enum class EToggleAutoFiringState : uint8_t
{
	TAFS_Toggle_Off                = 0,
	TAFS_AutoFiring_Ready          = 1,
	TAFS_AutoFiring_On             = 2,
	TAFS_MAX                       = 3
};


// Enum BLGame.BLTypes.CustomizeModuleType
enum class ECustomizeModuleType : uint8_t
{
	CM_Module_T_Undefined          = 0,
	CM_Module_T_ChangeMaterialBuffer = 1,
	CM_Module_T_ChangeMaterialFace = 2,
	CM_Module_T_ChangeMaterialBody = 3,
	CM_Module_T_ChangeMaterialFaceFur = 4,
	CM_Module_T_ChangeMaterialBodyAndFace = 5,
	CM_Module_T_ChangeMaterialBodyAndFaceAndFaceFur = 6,
	CM_Module_T_ChangeMaterialEyeBall = 7,
	CM_Module_T_ChangeMaterialEyelash = 8,
	CM_Module_T_ChangeMaterialBeard = 9,
	CM_Module_T_ChangeMaterialHair = 10,
	CM_Module_T_BoneControl        = 11,
	CM_Module_T_ChangeParts        = 12,
	CM_Module_T_MorphTarget        = 13,
	CM_Module_T_Preset             = 14,
	CM_Module_T_Raw                = 15,
	CM_Module_T_MAX                = 16
};


// Enum BLGame.BLTypes.CustomizeValueType
enum class ECustomizeValueType : uint8_t
{
	CM_Value_T_Undefined           = 0,
	CM_Value_T_Float               = 1,
	CM_Value_T_Int                 = 2,
	CM_Value_T_Color               = 3,
	CM_Value_T_Texture             = 4,
	CM_Value_T_MultiTexture        = 5,
	CM_Value_T_Mesh                = 6,
	CM_Value_T_HairAsset           = 7,
	CM_Value_T_MorphTarget         = 8,
	CM_Value_T_Preset              = 9,
	CM_Value_T_BodyFat             = 10,
	CM_Value_T_MAX                 = 11
};


// Enum BLGame.BLTypes.EEquipmentDisplaySlotType
enum class EEquipmentDisplaySlotType : uint8_t
{
	EEquipmentDisplaySlot_Head     = 0,
	EEquipmentDisplaySlot_HeadEyelashes = 1,
	EEquipmentDisplaySlot_HeadBeard = 2,
	EEquipmentDisplaySlot_Hair     = 3,
	EEquipmentDisplaySlot_Upper    = 4,
	EEquipmentDisplaySlot_UpperExtra = 5,
	EEquipmentDisplaySlot_Shoulder = 6,
	EEquipmentDisplaySlot_Belt     = 7,
	EEquipmentDisplaySlot_Lower    = 8,
	EEquipmentDisplaySlot_Glove    = 9,
	EEquipmentDisplaySlot_Boots    = 10,
	EEquipmentDisplaySlot_Base     = 11,
	EEquipmentDisplaySlot_Ear      = 12,
	EEquipmentDisplaySlot_Tail     = 13,
	EEquipmentDisplaySlot_MAX      = 14
};


// Enum BLGame.BLTypes.EEquipmentClassType
enum class EEquipmentClassType : uint8_t
{
	EEquipmentClass_Weapon         = 0,
	EEquipmentClass_Shield         = 1,
	EEquipmentClass_Armor          = 2,
	EEquipmentClass_Accessory      = 3,
	EEquipmentClass_MAX            = 4
};


// Enum BLGame.BLTypes.EEquipmentHelmetType
enum class EEquipmentHelmetType : uint8_t
{
	EEquipmentHelmetType_None      = 0,
	EEquipmentHelmetType_Type1     = 1,
	EEquipmentHelmetType_Type2     = 2,
	EEquipmentHelmetType_Type3     = 3,
	EEquipmentHelmetType_Type4     = 4,
	EEquipmentHelmetType_MAX       = 5
};


// Enum BLGame.BLTypes.EEquipmentItemType
enum class EEquipmentItemType : uint8_t
{
	EEquipmentItemType_Etc         = 0,
	EEquipmentItemType_Helmet1     = 1,
	EEquipmentItemType_Helmet2     = 2,
	EEquipmentItemType_Helmet3     = 3,
	EEquipmentItemType_Helmet4     = 4,
	EEquipmentItemType_Deprecated  = 5,
	EEquipmentItemType_MAX         = 6
};


// Enum BLGame.BLTypes.EActionSyncStep
enum class EActionSyncStep : uint8_t
{
	EASS_Init                      = 0,
	EASS_Moving                    = 1,
	EASS_Done                      = 2,
	EASS_MAX                       = 3
};


// Enum BLGame.BLTypes.ESkillSyncStep
enum class ESkillSyncStep : uint8_t
{
	ESSS_None                      = 0,
	ESSS_Ready                     = 1,
	ESSS_Casting                   = 2,
	ESSS_Cancel                    = 3,
	ESSS_Casted                    = 4,
	ESSS_Shooting                  = 5,
	ESSS_MAX                       = 6
};


// Enum BLGame.BLTypes.ESkillDeckSwapStep
enum class ESkillDeckSwapStep : uint8_t
{
	ESDSS_None                     = 0,
	ESDSS_Casting                  = 1,
	ESDSS_MAX                      = 2
};


// Enum BLGame.BLAggregateEquipment.EItemsCollectType
enum class EItemsCollectType : uint8_t
{
	EICT_AllItems                  = 0,
	EICT_AllItemsWithoutHeadItem   = 1,
	EICT_OnlyHeadItems             = 2,
	EICT_MAX                       = 3
};


// Enum BLGame.BLAkZoneStateVolumeBase.GradeChar
enum class EGradeChar : uint8_t
{
	A                              = 0,
	B                              = 1,
	C                              = 2,
	GradeChar_MAX                  = 3
};


// Enum BLGame.BLAnimBlendAllDirectional.EStandardDirectionWhenNotBlendedType
enum class EStandardDirectionWhenNotBlendedType : uint8_t
{
	EStandardDirectionWhenNotBlendedType_Horizontal = 0,
	EStandardDirectionWhenNotBlendedType_Vertical = 1,
	EStandardDirectionWhenNotBlendedType_MAX = 2
};


// Enum BLGame.BLAnimBlendByCustomAnim.BLCustomAnimType
enum class EBLCustomAnimType : uint8_t
{
	BLCustomAnimType_None          = 0,
	BLCustomAnimType_FullBody      = 1,
	BLCustomAnimType_StandBody     = 2,
	BLCustomAnimType_UpperBody     = 3,
	BLCustomAnimType_MAX           = 4
};


// Enum BLGame.BLAnimBlendByJump.EBLJumpBlendTypes
enum class EBLJumpBlendTypes : uint8_t
{
	JBT_Start                      = 0,
	JBT_Down                       = 1,
	JBT_Down_Loop                  = 2,
	JBT_Land                       = 3,
	JBT_None                       = 4,
	JBT_MAX                        = 5
};


// Enum BLGame.BLAnimBlendByMoveTypeWithTransition.MoveTypeTransitionIndex
enum class EMoveTypeTransitionIndex : uint8_t
{
	MoveTypeTransition_Idle        = 0,
	MoveTypeTransition_WalkToIdle  = 1,
	MoveTypeTransition_RunToIdle   = 2,
	MoveTypeTransition_SprintToIdle = 3,
	MoveTypeTransition_Walk        = 4,
	MoveTypeTransition_IdleToWalk  = 5,
	MoveTypeTransition_RunToWalk   = 6,
	MoveTypeTransition_SprintToWalk = 7,
	MoveTypeTransition_Run         = 8,
	MoveTypeTransition_IdleToRun   = 9,
	MoveTypeTransition_WalkToRun   = 10,
	MoveTypeTransition_SprintToRun = 11,
	MoveTypeTransition_Sprint      = 12,
	MoveTypeTransition_IdleToSprint = 13,
	MoveTypeTransition_WalkToSprint = 14,
	MoveTypeTransition_RunToSprint = 15,
	MoveTypeTransition_MAX         = 16
};


// Enum BLGame.BLAnimBlendByOtherNodeWeight.ENodesWeightSamplingMethod
enum class ENodesWeightSamplingMethod : uint8_t
{
	NodeWeightSampling_SumOfWeights = 0,
	NodeWeightSampling_MaxWeight   = 1,
	NodeWeightSampling_MinWeight   = 2,
	NodeWeightSampling_AvgOfWeights = 3,
	NodeWeightSampling_MAX         = 4
};


// Enum BLGame.BLAnimBlendLookAt.ELookAtFocus
enum class ELookAtFocus : uint8_t
{
	ELookAt_None                   = 0,
	ELookAt_Pawn                   = 1,
	ELookAt_Actor                  = 2,
	ELookAt_Location               = 3,
	ELookAt_MAX                    = 4
};


// Enum BLGame.BLAnimBlendLookAt.ELookingTarget
enum class ELookingTarget : uint8_t
{
	ELookingTarget_None            = 0,
	ELookingTarget_Focus           = 1,
	ELookingTarget_Target          = 2,
	ELookingTarget_Forward         = 3,
	ELookingTarget_MAX             = 4
};


// Enum BLGame.BLAnimInfo.EAnimMainGroup
enum class EAnimMainGroup : uint8_t
{
	EAnimMainGroup_Stand           = 0,
	EAnimMainGroup_Move            = 1,
	EAnimMainGroup_Special         = 2,
	EAnimMainGroup_Combat          = 3,
	EAnimMainGroup_MAX             = 4
};


// Enum BLGame.BLAnimInfo.ESubAnimGroup
enum class ESubAnimGroup : uint8_t
{
	ESubAnimGroup_Stand_Idle       = 0,
	ESubAnimGroup_Stand_Looting    = 1,
	ESubAnimGroup_Stand_Damage     = 2,
	ESubAnimGroup_Stand_CloudControl = 3,
	ESubAnimGroup_Stand_Death      = 4,
	ESubAnimGroup_Stand_Revival    = 5,
	ESubAnimGroup_Stand_Jump       = 6,
	ESubAnimGroup_Stand_Sitdown    = 7,
	ESubAnimGroup_Stand_Return     = 8,
	ESubAnimGroup_Stand_UseItem    = 9,
	ESubAnimGroup_Stand_Weapon     = 10,
	ESubAnimGroup_Stand_RiotControl = 11,
	ESubAnimGroup_Move_Walk        = 12,
	ESubAnimGroup_Move_Run         = 13,
	ESubAnimGroup_Move_Sprint      = 14,
	ESubAnimGroup_Move_Stop        = 15,
	ESubAnimGroup_Move_Death       = 16,
	ESubAnimGroup_Move_RunJump     = 17,
	ESubAnimGroup_Move_SprintJump  = 18,
	ESubAnimGroup_Move_Fall        = 19,
	ESubAnimGroup_Special_Carry    = 20,
	ESubAnimGroup_Special_Swimming = 21,
	ESubAnimGroup_Special_Mount    = 22,
	ESubAnimGroup_Combat_NormalAttack = 23,
	ESubAnimGroup_Combat_ValuntaryDefence = 24,
	ESubAnimGroup_Combat_Skill     = 25,
	ESubAnimGroup_MAX              = 26
};


// Enum BLGame.BLAnimNodeRotateByDirection.EDirection
enum class EDirection : uint8_t
{
	EDirection_Forward             = 0,
	EDirection_Backward            = 1,
	EDirection_LeftForward         = 2,
	EDirection_RightForward        = 3,
	EDirection_Left                = 4,
	EDirection_Right               = 5,
	EDirection_LeftBackward        = 6,
	EDirection_RightBackward       = 7,
	EDirection_Upward              = 8,
	EDirection_Downward            = 9,
	EDirection_None                = 10,
	EDirection_MAX                 = 11
};


// Enum BLGame.BLAnimNotify_EffectiveJudgment.EEffectiveJudgment
enum class EEffectiveJudgment : uint8_t
{
	EEffectiveJudgment_OnlyFirstContact = 0,
	EEffectiveJudgment_EveryBoneContact = 1,
	EEffectiveJudgment_EveryBoneInAndOut = 2,
	EEffectiveJudgment_EveryCollide = 3,
	EEffectiveJudgment_MAX         = 4
};


// Enum BLGame.BLAnimNotify_HIKMarkerChange.HIKMarkerPreset
enum class EHIKMarkerPreset : uint8_t
{
	HIKMarker_Select               = 0,
	HIKMarker_LeftHand             = 1,
	HIKMarker_RightHand            = 2,
	HIKMarker_LeftFoot             = 3,
	HIKMarker_RightFoot            = 4,
	HIKMarker_MAX                  = 5
};


// Enum BLGame.BLAudioManager.SOUND_LISTENER_TYPE
enum class ESOUND_LISTENER_TYPE : uint8_t
{
	SLT_CAMERA                     = 0,
	SLT_PLAYER                     = 1,
	SLT_CPMIX                      = 2,
	SLT_MAX                        = 3
};


// Enum BLGame.BLAutoPathManager.EDestination_Type
enum class EDestination_Type : uint8_t
{
	EDest_T_Free                   = 0,
	EDest_T_Quest1                 = 1,
	EDest_T_Quest2                 = 2,
	EDest_T_Quest3                 = 3,
	EDest_T_Quest4                 = 4,
	EDest_T_MAX                    = 5
};


// Enum BLGame.BLAutoPathManager.EAutoPath_Type
enum class EAutoPath_Type : uint8_t
{
	EAutoPath_T_None               = 0,
	EAutoPath_T_Free               = 1,
	EAutoPath_T_Quest              = 2,
	EAutoPath_T_MAX                = 3
};


// Enum BLGame.BoneDeformationTemplate.EBoneDeformCategory
enum class EBoneDeformCategory : uint8_t
{
	EBoneDeformCategory_Nose       = 0,
	EBoneDeformCategory_Jaw        = 1,
	EBoneDeformCategory_Lip        = 2,
	EBoneDeformCategory_Eye        = 3,
	EBoneDeformCategory_Face       = 4,
	EBoneDeformCategory_Ear        = 5,
	EBoneDeformCategory_Head       = 6,
	EBoneDeformCategory_Chest      = 7,
	EBoneDeformCategory_Arm        = 8,
	EBoneDeformCategory_Leg        = 9,
	EBoneDeformCategory_MAX        = 10
};


// Enum BLGame.BoneDeformationTemplate.EBoneDeformApplication
enum class EBoneDeformApplication : uint8_t
{
	EBoneDeform_TransX             = 0,
	EBoneDeform_TransNegX          = 1,
	EBoneDeform_TransY             = 2,
	EBoneDeform_TransNegY          = 3,
	EBoneDeform_TransZ             = 4,
	EBoneDeform_TransNegZ          = 5,
	EBoneDeform_RotateX            = 6,
	EBoneDeform_RotateNegX         = 7,
	EBoneDeform_RotateY            = 8,
	EBoneDeform_RotateNegY         = 9,
	EBoneDeform_RotateZ            = 10,
	EBoneDeform_RotateNegZ         = 11,
	EBoneDeform_Scale              = 12,
	EBoneDeform_ScaleNeg           = 13,
	EBoneDeform_ScaleYZ            = 14,
	EBoneDeform_ScaleYZNeg         = 15,
	EBoneDeform_ScaleX             = 16,
	EBoneDeform_ScaleXNeg          = 17,
	EBoneDeform_ScaleXY            = 18,
	EBoneDeform_ScaleXYNeg         = 19,
	EBoneDeform_ScaleY             = 20,
	EBoneDeform_ScaleYNeg          = 21,
	EBoneDeform_ScaleZ             = 22,
	EBoneDeform_ScaleZNeg          = 23,
	EBoneDeform_ScaleXZ            = 24,
	EBoneDeform_ScaleXZNeg         = 25,
	EBoneDeform_MAX                = 26
};


// Enum BLGame.BroadwayGameInfo.BAR_Target
enum class EBAR_Target : uint8_t
{
	BART_None                      = 0,
	BART_Self                      = 1,
	BART_Target                    = 2,
	BART_Mass                      = 3,
	BART_NumberedTarget            = 4,
	BART_Point                     = 5,
	BART_MergedMass                = 6,
	BART_SelectedTarget            = 7,
	BART_LocalPlayer               = 8,
	BART_PreviousTarget            = 9,
	BART_MAX                       = 10
};


// Enum BLGame.BroadwayGameInfo.BAR_TargetBase
enum class EBAR_TargetBase : uint8_t
{
	BARTB_Actor                    = 0,
	BARTB_Socket                   = 1,
	BARTB_Bone                     = 2,
	BARTB_Ground                   = 3,
	BARTB_Overhead                 = 4,
	BARTB_DamageSocket             = 5,
	BARTB_AttachmentBone           = 6,
	BARTB_MAX                      = 7
};


// Enum BLGame.BroadwayGameInfo.BAR_RotationBase
enum class EBAR_RotationBase : uint8_t
{
	BARRB_Self                     = 0,
	BARRB_Target                   = 1,
	BARRB_SelfToTarget             = 2,
	BARRB_BoneSocket               = 3,
	BARRB_MAX                      = 4
};


// Enum BLGame.BroadwayGameInfo.BAR_GroundHeightCheckType
enum class EBAR_GroundHeightCheckType : uint8_t
{
	BARGHCT_Geometry               = 0,
	BARGHCT_Terrain                = 1,
	BARGHCT_MAX                    = 2
};


// Enum BLGame.BroadwayGameInfo.BAR_HitCondition
enum class EBAR_HitCondition : uint8_t
{
	BARHC_Miss                     = 0,
	BARHC_Dodge                    = 1,
	BARHC_Parry                    = 2,
	BARHC_Block                    = 3,
	BARHC_Resist                   = 4,
	BARHC_Hit_Critical             = 5,
	BARHC_Hit_Normal               = 6,
	BARHC_Immune                   = 7,
	BARHC_Hit_All                  = 8,
	BARHC_MAX                      = 9
};


// Enum BLGame.BroadwayGameInfo.BAR_DecorationEffectControlType
enum class EBAR_DecorationEffectControlType : uint8_t
{
	BARDECT_ACTIVE                 = 0,
	BARDECT_DEACTIVE               = 1,
	BARDECT_SET                    = 2,
	BARDECT_ACTIVE_DEFAULT         = 3,
	BARDECT_MAX                    = 4
};


// Enum BLGame.BroadwayGameInfo.BroadwayErrorType
enum class EBroadwayErrorType : uint8_t
{
	BET_OK                         = 0,
	BET_TARGETNONE                 = 1,
	BET_RESOURCENONE               = 2,
	BET_RESULTNONE                 = 3,
	BET_DAMAGENONE                 = 4,
	BET_NOTLOCALPAWN               = 5,
	BET_MAX                        = 6
};


// Enum BLGame.BroadwayGameInfo.BAR_EquipType
enum class EBAR_EquipType : uint8_t
{
	BARET_RIGHTHAND                = 0,
	BARET_LEFTHAND                 = 1,
	BARET_MAX                      = 2
};


// Enum BLGame.BroadwayGameInfo.BAR_ImpactLight_AttachMode
enum class EBAR_ImpactLight_AttachMode : uint8_t
{
	BARILAM_NotAttach              = 0,
	BARILAM_AttachActor            = 1,
	BARILAM_MAX                    = 2
};


// Enum BLGame.BroadwayGameInfo.BAR_ImpactLight
enum class EBAR_ImpactLight : uint8_t
{
	BARIL_None                     = 0,
	BARIL_Fire                     = 1,
	BARIL_Ice                      = 2,
	BARIL_Sword                    = 3,
	BARIL_MAX                      = 4
};


// Enum BLGame.BroadwayGameInfo.BAR_AttachMode
enum class EBAR_AttachMode : uint8_t
{
	BARAM_NotAttach                = 0,
	BARAM_AttachHard               = 1,
	BARAM_AttachSoft               = 2,
	BARAM_OnlyParticleLocation     = 3,
	BARAM_SkelVertSurfLoc          = 4,
	BARAM_MAX                      = 5
};


// Enum BLGame.BroadwayGameInfo.BAR_TriggerCondition
enum class EBAR_TriggerCondition : uint8_t
{
	BARTC_TimeBase                 = 0,
	BARTC_AnimEnd                  = 1,
	BARTC_HitNotify                = 2,
	BARTC_Activated                = 3,
	BARTC_TriggerNotify            = 4,
	BARTC_ExplodeProjectile        = 5,
	BARTC_MAX                      = 6
};


// Enum BLGame.BLConquest.EBLWarReserveType
enum class EBLWarReserveType : uint8_t
{
	EBLWarReserveType_None         = 0,
	EBLWarReserveType_Waiting      = 1,
	EBLWarReserveType_Joinable     = 2,
	EBLWarReserveType_Enterable    = 3,
	EBLWarReserveType_MAX          = 4
};


// Enum BLGame.BLConquest.EBLConquestButtonType
enum class EBLConquestButtonType : uint8_t
{
	EBLConquestButtonType_Join     = 0,
	EBLConquestButtonType_CancelWait = 1,
	EBLConquestButtonType_CancelJoin = 2,
	EBLConquestButtonType_ReJoin   = 3,
	EBLConquestButtonType_Enter    = 4,
	EBLConquestButtonType_MAX      = 5
};


// Enum BLGame.BLConquest.EBLWarResultType
enum class EBLWarResultType : uint8_t
{
	EBLWarResultType_Playing       = 0,
	EBLWarResultType_Win           = 1,
	EBLWarResultType_Lose          = 2,
	EBLWarResultType_Draw          = 3,
	EBLWarResultType_MAX           = 4
};


// Enum BLGame.BLChallengeTower.EBLChallengeTowerStateType
enum class EBLChallengeTowerStateType : uint8_t
{
	EBLChallengeTowerStateType_None = 0,
	EBLChallengeTowerStateType_Start = 1,
	EBLChallengeTowerStateType_WaitingRound = 2,
	EBLChallengeTowerStateType_ProcessRound = 3,
	EBLChallengeTowerStateType_MAX = 4
};


// Enum BLGame.BLChatManager.EChatLinkType
enum class EChatLinkType : uint8_t
{
	EChatLink_T_Talker             = 0,
	EChatLink_T_Item               = 1,
	EChatLink_T_MAX                = 2
};


// Enum BLGame.BLChatManager.EChatUIIndex
enum class EChatUIIndex : uint8_t
{
	EChatUIIndex_Normal_Title      = 0,
	EChatUIIndex_Realm_Title       = 1,
	EChatUIIndex_Party_Title       = 2,
	EChatUIIndex_Whisper_Title     = 3,
	EChatUIIndex_Guild_Name        = 4,
	EChatUIIndex_Help_Title        = 5,
	EChatUIIndex_MAX               = 6
};


// Enum BLGame.BLCheatManager.WeatherType
enum class EWeatherType : uint8_t
{
	BL_WT_Clear                    = 0,
	BL_WT_Rain                     = 1,
	BL_WT_Snow                     = 2,
	BL_WT_Dust                     = 3,
	BL_WT_MAX                      = 4
};


// Enum BLGame.BLUIManager.EUIStateExtension
enum class EUIStateExtension : uint8_t
{
	EUIStateExtension_None         = 0,
	EUIStateExtension_NPCRepair    = 1,
	EUIStateExtension_ItemRepair   = 2,
	EUIStateExtension_Recover      = 3,
	EUIStateExtension_EquipUpgrade = 4,
	EUIStateExtension_Desynthesis  = 5,
	EUIStateExtension_EquipEvolution = 6,
	EUIStateExtension_Succeed      = 7,
	EUIStateExtension_ChangeAppearance = 8,
	EUIStateExtension_ChangeGender = 9,
	EUIStateExtension_MAX          = 10
};


// Enum BLGame.BLColosseumWar.EColosseumWinLoseType
enum class EColosseumWinLoseType : uint8_t
{
	EColosseumWinLose_T_Win        = 0,
	EColosseumWinLose_T_Lose       = 1,
	EColosseumWinLose_T_Draw       = 2,
	EColosseumWinLose_T_MAX        = 3
};


// Enum BLGame.BLTimerComponent.EBLTimerModeType
enum class EBLTimerModeType : uint8_t
{
	EBLTimerModeType_CountUp       = 0,
	EBLTimerModeType_CountDown     = 1,
	EBLTimerModeType_MAX           = 2
};


// Enum BLGame.BLGameViewportClient.ECursorPosCacheType
enum class ECursorPosCacheType : uint8_t
{
	ECursorPosCacheType_Cache      = 0,
	ECursorPosCacheType_NotCache   = 1,
	ECursorPosCacheType_MAX        = 2
};


// Enum BLGame.BLGameViewportClient.ECursorType
enum class ECursorType : uint8_t
{
	BLMC_None                      = 0,
	BLMC_Normal                    = 1,
	BLMC_Normal_Down               = 2,
	BLMC_Battle                    = 3,
	BLMC_Battle_Down               = 4,
	BLMC_Quest                     = 5,
	BLMC_Quest_Down                = 6,
	BLMC_Item                      = 7,
	BLMC_Item_Down                 = 8,
	BLMC_UseItem                   = 9,
	BLMC_UseItem_Down              = 10,
	BLMC_WorldMap                  = 11,
	BLMC_WorldMap_Down             = 12,
	BLMC_WorldMap_Drag             = 13,
	BLMC_SkillArea                 = 14,
	BLMC_SkillArea_Down            = 15,
	BLMC_ItemArea                  = 16,
	BLMC_ItemArea_Down             = 17,
	BLMC_PropInteraction           = 18,
	BLMC_PropInteraction_Down      = 19,
	BLMC_InventoryItemSplit        = 20,
	BLMC_InventoryItemSplit_Down   = 21,
	BLMC_Custom_Normal             = 22,
	BLMC_Custom_Normal_Down        = 23,
	BLMC_Custom_Move               = 24,
	BLMC_Custom_Move_Down          = 25,
	BLMC_Custom_Horizon            = 26,
	BLMC_Custom_Horizon_Down       = 27,
	BLMC_Custom_Vertical           = 28,
	BLMC_Custom_Vertical_Down      = 29,
	BLMC_Custom_Rotation           = 30,
	BLMC_Custom_Rotation_Down      = 31,
	BLMC_Custom_Brush              = 32,
	BLMC_Custom_Brush_Down         = 33,
	BLMC_Custom_128_Brush          = 34,
	BLMC_Custom_128_Brush_Down     = 35,
	BLMC_Custom_32_Brush           = 36,
	BLMC_Custom_32_Brush_Down      = 37,
	BLMC_Custom_16_Brush           = 38,
	BLMC_Custom_16_Brush_Down      = 39,
	BLMC_Custom_Rotate             = 40,
	BLMC_Custom_Rotate_Down        = 41,
	BLMC_Custom_Repair             = 42,
	BLMC_Custom_Repair_Down        = 43,
	BLMC_MAX                       = 44
};


// Enum BLGame.PawnDLEManager.DLEInstantUpdateType
enum class EDLEInstantUpdateType : uint8_t
{
	DLEInstantUpdateType_None      = 0,
	DLEInstantUpdateType_MyPlayer  = 1,
	DLEInstantUpdateType_Skill     = 2,
	DLEInstantUpdateType_ActorDist = 3,
	DLEInstantUpdateType_MAX       = 4
};


// Enum BLGame.MouseEventDecider.EMouseClickActionMode
enum class EMouseClickActionMode : uint8_t
{
	EMCA_None                      = 0,
	EMCA_Normal                    = 1,
	EMCA_SkillArea                 = 2,
	EMCA_ItemArea                  = 3,
	EMCA_ItemPickTarget            = 4,
	EMCA_SummoneeControl           = 5,
	EMCA_WorldMapCtrl              = 6,
	EMCA_InventoryItemSplit        = 7,
	EMCA_CustomizingPickArea       = 8,
	EMCA_RepairModeHammer          = 9,
	EMCA_MAX                       = 10
};


// Enum BLGame.MouseEventDecider.EMouseDoingClick
enum class EMouseDoingClick : uint8_t
{
	EMC_None                       = 0,
	EMC_Left                       = 1,
	EMC_Right                      = 2,
	EMC_Parallel                   = 3,
	EMC_Middle                     = 4,
	EMC_MAX                        = 5
};


// Enum BLGame.MouseEventDecider.EMouseGesture
enum class EMouseGesture : uint8_t
{
	EMG_None                       = 0,
	EMG_Left                       = 1,
	EMG_Right                      = 2,
	EMG_Middle                     = 3,
	EMG_MAX                        = 4
};


// Enum BLGame.MouseEventDecider.EMouseDragState
enum class EMouseDragState : uint8_t
{
	EMouseDragState_None           = 0,
	EMouseDragState_ClickStart     = 1,
	EMouseDragState_Dragging       = 2,
	EMouseDragState_MAX            = 3
};


// Enum BLGame.MouseEventDecider.EKindOfPC
enum class EKindOfPC : uint8_t
{
	EPCKind_None                   = 0,
	EPCKind_Lobby                  = 1,
	EPCKind_BLGame                 = 2,
	EPCKind_MAX                    = 3
};


// Enum BLGame.BLGuild.EBLGuildWarResultType
enum class EBLGuildWarResultType : uint8_t
{
	EBLGuildWarResultType_Win_Surrender = 0,
	EBLGuildWarResultType_Win_Score = 1,
	EBLGuildWarResultType_Win_Time = 2,
	EBLGuildWarResultType_Draw     = 3,
	EBLGuildWarResultType_Lose_Time = 4,
	EBLGuildWarResultType_Lose_Score = 5,
	EBLGuildWarResultType_Lose_Surrender = 6,
	EBLGuildWarResultType_MAX      = 7
};


// Enum BLGame.BLGuild.BLGuildUIType
enum class EBLGuildUIType : uint8_t
{
	GUT_None                       = 0,
	GUT_Normal                     = 1,
	GUT_ShopGift                   = 2,
	GUT_OpenRequestShopGift        = 3,
	GUT_MAX                        = 4
};


// Enum BLGame.BLGuild.ESortingOrder
enum class ESortingOrder : uint8_t
{
	ESortingOrder_Descending       = 0,
	ESortingOrder_Ascending        = 1,
	ESortingOrder_None             = 2,
	ESortingOrder_MAX              = 3
};


// Enum BLGame.BLGuild.EBLGuildWareHistorySortingColumnType
enum class EBLGuildWareHistorySortingColumnType : uint8_t
{
	EBLGuildWareHistorySortingColumnType_Date = 0,
	EBLGuildWareHistorySortingColumnType_GuildName = 1,
	EBLGuildWareHistorySortingColumnType_Result = 2,
	EBLGuildWareHistorySortingColumnType_MAX = 3
};


// Enum BLGame.BLGuild.EBLGuildMemberUIColumnType
enum class EBLGuildMemberUIColumnType : uint8_t
{
	EBLGuildMemberUIColumnType_Grade = 0,
	EBLGuildMemberUIColumnType_Class = 1,
	EBLGuildMemberUIColumnType_Level = 2,
	EBLGuildMemberUIColumnType_Name = 3,
	EBLGuildMemberUIColumnType_Location = 4,
	EBLGuildMemberUIColumnType_WeeklyInfluence = 5,
	EBLGuildMemberUIColumnType_AccumulateInfluence = 6,
	EBLGuildMemberUIColumnType_MAX = 7
};


// Enum BLGame.BLGuild.BLGuildTabType
enum class EBLGuildTabType : uint8_t
{
	GTT_Information                = 0,
	GTT_Member                     = 1,
	GTT_Managing                   = 2,
	GTT_GuildWar                   = 3,
	GTT_MAX                        = 4
};


// Enum BLGame.BLGuild.EBLGuildMemberUIViewCategory
enum class EBLGuildMemberUIViewCategory : uint8_t
{
	EBLGuildMemberUIViewCategory_MemberInfo = 0,
	EBLGuildMemberUIViewCategory_InfluenceInfo = 1,
	EBLGuildMemberUIViewCategory_MAX = 2
};


// Enum BLGame.BLGuildCreateDialog.EGuildCreateStep
enum class EGuildCreateStep : uint8_t
{
	GC_SHOW_CHECKED_CONDITION      = 0,
	GC_QUERY_VALID_GUILD_NAME      = 1,
	GC_ANSWER_GUILD_NAME           = 2,
	GC_REQUEST_CREATE_GUILD        = 3,
	GC_COMPLETE_CREATE_GUILD_PROCESS = 4,
	GC_MAX                         = 5
};


// Enum BLGame.BlessLocalPlayer.EBeginnerKeyGuideType
enum class EBeginnerKeyGuideType : uint8_t
{
	ETYPE_BEGINNER_KEY_GUIDE_NONE  = 0,
	ETYPE_BEGINNER_KEY_GUIDE_CLASSIC_PEACE = 1,
	ETYPE_BEGINNER_KEY_GUIDE_CLASSIC_COMBAT = 2,
	ETYPE_BEGINNER_KEY_GUIDE_AIM_TARGETING_PEACE = 3,
	ETYPE_BEGINNER_KEY_GUIDE_AIM_TARGETING_COMBAT = 4,
	ETYPE_BEGINNER_KEY_GUIDE_MAX   = 5
};


// Enum BLGame.BLPartyMatchingManager.EBLDungeonGearScoreType
enum class EBLDungeonGearScoreType : uint8_t
{
	EBLDungeonGearScore_None       = 0,
	EBLDungeonGearScore_Satisfy    = 1,
	EBLDungeonGearScore_Dissatisfy = 2,
	EBLDungeonGearScore_MAX        = 3
};


// Enum BLGame.BLPartyMatchingManager.EBLRandomMatchingButtonType
enum class EBLRandomMatchingButtonType : uint8_t
{
	EBLRandomMatchingButtonType_Reward = 0,
	EBLRandomMatchingButtonType_Regist = 1,
	EBLRandomMatchingButtonType_Unregist = 2,
	EBLRandomMatchingButtonType_MAX = 3
};


// Enum BLGame.BLPartyMatchingManager.EBLPartyMatchingTabType
enum class EBLPartyMatchingTabType : uint8_t
{
	EBLPartyMatchingTabType_Normal = 0,
	EBLPartyMatchingTabType_Random = 1,
	EBLPartyMatchingTabType_MAX    = 2
};


// Enum BLGame.BLPartyEffectManager.EPartyEffectCategoryType
enum class EPartyEffectCategoryType : uint8_t
{
	EPartyEffectCategoryType_Combat = 0,
	EPartyEffectCategoryType_Living = 1,
	EPartyEffectCategoryType_Max   = 2
};


// Enum BLGame.BLPartyEffectManager.EPartyEffectConditionTypeUI
enum class EPartyEffectConditionTypeUI : uint8_t
{
	EMemberCountCondition          = 0,
	EClassRaceCountCondition       = 1,
	EClassRaceGroupCountCondition  = 2,
	EPartyEffectConditionTypeUI_MAX = 3
};


// Enum BLGame.OrderManager.EOrderSoundType
enum class EOrderSoundType : uint8_t
{
	EOrderSoundType_CompleteDaily  = 0,
	EOrderSoundType_CompleteWeekly = 1,
	EOrderSoundType_CompleteDailyGoal = 2,
	EOrderSoundType_CompleteWeeklyGoal = 3,
	EOrderSoundType_MAX            = 4
};


// Enum BLGame.BLToolTipDataGenerator.EMPFExtractionInfo
enum class EMPFExtractionInfo : uint8_t
{
	EMPFExtractionInfo_CID         = 0,
	EMPFExtractionInfo_MPFType     = 1,
	EMPFExtractionInfo_LEVEL       = 2,
	EMPFExtractionInfo_EXP         = 3,
	EMPFExtractionInfo_GRADE       = 4,
	EMPFExtractionInfo_SKILL_RARECID = 5,
	EMPFExtractionInfo_SKILL_EPICCID = 6,
	EMPFExtractionInfo_SKILL_LEGENDARYCID = 7,
	EMPFExtractionInfo_FATIGUE     = 8,
	EMPFExtractionInfo_REMAINGRADEUPCOUNT = 9,
	EMPFExtractionInfo_POTENTIAL   = 10,
	EMPFExtractionInfo_FellowVocation = 11,
	EMPFExtractionInfo_MAX         = 12
};


// Enum BLGame.BLToolTipDataGenerator.EBLSkillGemType
enum class EBLSkillGemType : uint8_t
{
	EBLSkillGemType_GemPiece       = 0,
	EBLSkillGemType_StanceGem      = 1,
	EBLSkillGemType_NonStanceGem   = 2,
	EBLSkillGemType_ParameterGem   = 3,
	EBLSkillGemType_MAX            = 4
};


// Enum BLGame.V2CraftManager.EHasCraftSpot
enum class EHasCraftSpot : uint8_t
{
	CraftSpot_None                 = 0,
	CraftSpot_Main                 = 1,
	CraftSpot_Sub                  = 2,
	CraftSpot_Both                 = 3,
	CraftSpot_MAX                  = 4
};


// Enum BLGame.V2CraftManager.ECraftTabType
enum class ECraftTabType : uint8_t
{
	ECraftTabType_NONE             = 0,
	ECraftTabType_MAIN             = 1,
	ECraftTabType_SUB              = 2,
	ECraftTabType_MAX              = 3
};


// Enum BLGame.CraftGatherDataManager.EEquipTabType
enum class EEquipTabType : uint8_t
{
	EEquipTabType_STATUS           = 0,
	EEquipTabType_EQUIP            = 1,
	EEquipTabType_WEAR             = 2,
	EEquipTabType_LIVING           = 3,
	EEquipTabType_MAX              = 4
};


// Enum BLGame.CraftGatherDataManager.ELivingTabType
enum class ELivingTabType : uint8_t
{
	ELivingTabType_MainCraft       = 0,
	ELivingTabType_SubCraft        = 1,
	ELivingTabType_Plants          = 2,
	ELivingTabType_Mining          = 3,
	ELivingTabType_Taming          = 4,
	ELivingTabType_Nothing         = 5,
	ELivingTabType_MAX             = 6
};


// Enum BLGame.CraftGatherDataManager.ELivingIconType
enum class ELivingIconType : uint8_t
{
	ELivingIconType_NONE           = 0,
	ELivingIconType_SMITH          = 1,
	ELivingIconType_HANDIWORK      = 2,
	ELivingIconType_SMELT          = 3,
	ELivingIconType_COOK           = 4,
	ELivingIconType_ALCHEMY        = 5,
	ELivingIconType_PLANTS         = 6,
	ELivingIconType_MINING         = 7,
	ELivingIconType_TAMING         = 8,
	ELivingIconType_MAX            = 9
};


// Enum BLGame.CraftChoiceManager.ECraftChoiceUIType
enum class ECraftChoiceUIType : uint8_t
{
	ECraftChoiceUIType_NONE        = 0,
	ECraftChoiceUIType_MAIN        = 1,
	ECraftChoiceUIType_SUB         = 2,
	ECraftChoiceUIType_MAX         = 3
};


// Enum BLGame.CompanionManager.EAcquireSystemMsgType
enum class EAcquireSystemMsgType : uint8_t
{
	EAcquireSystemMsgType_Mount    = 0,
	EAcquireSystemMsgType_Pet      = 1,
	EAcquireSystemMsgType_Fellow   = 2,
	EAcquireSystemMsgType_MAX      = 3
};


// Enum BLGame.BLMissionManager.EBLMissionTabState
enum class EBLMissionTabState : uint8_t
{
	EBLMissionTabState_None        = 0,
	EBLMissionTabState_Prepare     = 1,
	EBLMissionTabState_Lock        = 2,
	EBLMissionTabState_Process     = 3,
	EBLMissionTabState_Reward      = 4,
	EBLMissionTabState_MAX         = 5
};


// Enum BLGame.BlessLocalPlayer.Filtering_Icon
enum class EFiltering_Icon : uint8_t
{
	ICON_FILTER_NONE               = 0,
	ICON_FILTER_PLAYER             = 1,
	ICON_FILTER_PARTY              = 2,
	ICON_FILTER_QUEST              = 3,
	ICON_FILTER_WAYPOINT           = 4,
	ICON_FILTER_MERCHANT           = 5,
	ICON_FILTER_RETURN             = 6,
	ICON_FILTER_SKILLMASTER        = 7,
	ICON_FILTER_REVIVAL            = 8,
	ICON_FILTER_INSTANCEDUNGEON    = 9,
	ICON_FILTER_CONQUEST           = 10,
	ICON_FILTER_ROMANAGER          = 11,
	ICON_FILTER_PORTAL             = 12,
	ICON_FILTER_GUILD_SHOP         = 13,
	ICON_FILTER_CRAFT              = 14,
	ICON_FILTER_ROYAL              = 15,
	ICON_FILTER_WAREHOUSE          = 16,
	ICON_FILTER_LIMITEDRANK        = 17,
	ICON_FILTER_RANK               = 18,
	ICON_FILTER_REALMOWNERSHIP     = 19,
	ICON_FILTER_RAID               = 20,
	ICON_FILTER_EXCHANGE           = 21,
	ICON_FILTER_REPAIR             = 22,
	ICON_FILTER_STRENGTHEN         = 23,
	ICON_FILTER_CHALLENGETOWER     = 24,
	ICON_FILTER_GUIDE              = 25,
	ICON_FILTER_MAX                = 26
};


// Enum BLGame.BLEvent.EBLEventType
enum class EBLEventType : uint8_t
{
	BL_EVENT_HIT                   = 0,
	BL_EVENT_HITBY                 = 1,
	BL_EVENT_HITBY_RIOTCONTROL     = 2,
	BL_EVENT_NUM                   = 3,
	BL_EVENT_MAX                   = 4
};


// Enum BLGame.BLGameEngine.BLLevelState
enum class EBLLevelState : uint8_t
{
	BL_LS_NONE                     = 0,
	BL_LS_LOADING_START            = 1,
	BL_LS_LOADING_COMPLETE         = 2,
	BL_LS_PLAYING_OPENING_CINEMA   = 3,
	BL_LS_ENTER_WORLD_READY        = 4,
	BL_LS_MAX                      = 5
};


// Enum BLGame.BLGameEngine.SystemSettingsControlCategory_CompatLevelType
enum class ESystemSettingsControlCategory_CompatLevelType : uint8_t
{
	SSCC_CLT_WorldDetail           = 0,
	SSCC_CLT_WorldTerrainDetail    = 1,
	SSCC_CLT_WorldSkyDetail        = 2,
	SSCC_CLT_WorldViewDistance     = 3,
	SSCC_CLT_CharacterDetail       = 4,
	SSCC_CLT_CharacterViewDistance = 5,
	SSCC_CLT_EffectDetail          = 6,
	SSCC_CLT_GameEffectViewDistance = 7,
	SSCC_CLT_ShadowDetail          = 8,
	SSCC_CLT_TextureDetail         = 9,
	SSCC_CLT_MAX                   = 10
};


// Enum BLGame.BLGameEngine.SystemSettingsControlCategory_OnOffType
enum class ESystemSettingsControlCategory_OnOffType : uint8_t
{
	SSCC_OOT_MotionBlur            = 0,
	SSCC_OOT_LightShaft            = 1,
	SSCC_OOT_MAX                   = 2
};


// Enum BLGame.BLGameEngine.LoadingStateStep
enum class ELoadingStateStep : uint8_t
{
	Step_Initialize                = 0,
	Step_Loading                   = 1,
	Step_MAX                       = 2
};


// Enum BLGame.BLInterpCurveData.BLInterpCurveDataType
enum class EBLInterpCurveDataType : uint8_t
{
	BLInterpCurveDataType_None     = 0,
	BLInterpCurveDataType_Float    = 1,
	BLInterpCurveDataType_Vector   = 2,
	BLInterpCurveDataType_LinearColor = 3,
	BLInterpCurveDataType_MAX      = 4
};


// Enum BLGame.BLItemDesynthesis.EDesynthesisStep
enum class EDesynthesisStep : uint8_t
{
	EDesynthesisStep_None          = 0,
	EDesynthesisStep_BeforeTarget  = 1,
	EDesynthesisStep_TargetFull    = 2,
	EDesynthesisStep_Desynthesising = 3,
	EDesynthesisStep_MAX           = 4
};


// Enum BLGame.BLItemEquipUpgrade.EEquipUpgradeStep
enum class EEquipUpgradeStep : uint8_t
{
	EEquipUpgradeStep_None         = 0,
	EEquipUpgradeStep_BeforTarget  = 1,
	EEquipUpgradeStep_MaterialFull = 2,
	EEquipUpgradeStep_MAX          = 3
};


// Enum BLGame.BLItemEquipUpgrade.EEquipUpgradeSubMaterialType
enum class EEquipUpgradeSubMaterialType : uint8_t
{
	EEUSubMaterialType_none        = 0,
	EEUSubMaterialType_SuccessRate = 1,
	EEUSubMaterialType_DurabilityProtect = 2,
	EEUSubMaterialType_EquipLevelProtect = 3,
	EEUSubMaterialType_MAX         = 4
};


// Enum BLGame.BLItemEvolution.EEvolutionStep
enum class EEvolutionStep : uint8_t
{
	EvolutionStep_None             = 0,
	EvolutionStep_BeforeTarget     = 1,
	EvolutionStep_RegisterTarget   = 2,
	EvolutionStep_MAX              = 3
};


// Enum BLGame.BLItemRecover.ERecoverStep
enum class ERecoverStep : uint8_t
{
	ERecoverStep_None              = 0,
	ERecoverStep_BeforeTarget      = 1,
	ERecoverStep_BeforeMaterial    = 2,
	ERecoverStep_MaterialFull      = 3,
	ERecoverStep_MAX               = 4
};


// Enum BLGame.BLItemSucceed.ESucceedSubMaterialType
enum class ESucceedSubMaterialType : uint8_t
{
	ESucceedSubMaterialType_none   = 0,
	ESucceedSubMaterialType_Perfect = 1,
	ESucceedSubMaterialType_Keep   = 2,
	ESucceedSubMaterialType_MAX    = 3
};


// Enum BLGame.BLItemSucceed.ESucceedStep
enum class ESucceedStep : uint8_t
{
	ESucceedStep_None              = 0,
	ESucceedStep_BeforeTarget      = 1,
	ESucceedStep_BeforeSource      = 2,
	ESucceedStep_MaterialFull      = 3,
	ESucceedStep_MAX               = 4
};


// Enum BLGame.BLMerchantInventory.MerchantPurchaseType
enum class EMerchantPurchaseType : uint8_t
{
	MPT_Normal                     = 0,
	MPT_Gift_GuildMember           = 1,
	MPT_MAX                        = 2
};


// Enum BLGame.BLMSGProcInterface.BLGlobalState
enum class EBLGlobalState : uint8_t
{
	G_S_Rotating                   = 0,
	G_S_Moving                     = 1,
	G_S_Skill_Launching            = 2,
	G_S_Skill_Firing               = 3,
	G_S_MAX                        = 4
};


// Enum BLGame.BLMsgProc_InteractionBase.BLInteractionMsg
enum class EBLInteractionMsg : uint8_t
{
	BLInteractionMsg_Spawned       = 0,
	BLInteractionMsg_Despawned     = 1,
	BLInteractionMsg_Started       = 2,
	BLInteractionMsg_Complete      = 3,
	BLInteractionMsg_Canceled      = 4,
	BLInteractionMsg_MAX           = 5
};


// Enum BLGame.BLNetHandlerBase.BLServerLocationBaseType
enum class EBLServerLocationBaseType : uint8_t
{
	BL_SERVER_LOCATION_BASE_CENTER = 0,
	BL_SERVER_LOCATION_BASE_GROUND = 1,
	BL_SERVER_LOCATION_BASE_MAX    = 2
};


// Enum BLGame.BLPawnMovementComponent.EMovementType
enum class EMovementType : uint8_t
{
	MOVEMENT_T_None                = 0,
	MOVEMENT_T_Continuous          = 1,
	MOVEMENT_T_Location            = 2,
	MOVEMENT_T_Time                = 3,
	MOVEMENT_T_MAX                 = 4
};


// Enum BLGame.HeadExpressionComponent.HpBarState
enum class EHpBarState : uint8_t
{
	HBS_HIDE                       = 0,
	HBS_SHOW                       = 1,
	HBS_PENDING_TIME               = 2,
	HBS_PENDING_EVENT              = 3,
	HBS_MAX                        = 4
};


// Enum BLGame.DecorationEffectInfo.DECORATION_PARTICLE_ATTACH_TYPE
enum class EDECORATION_PARTICLE_ATTACH_TYPE : uint8_t
{
	DPAT_AttachBone                = 0,
	DPAT_AttachSocket              = 1,
	DPAT_SkelVertSurfLoc           = 2,
	DPAT_AttachTop                 = 3,
	DPAT_AttachCenter              = 4,
	DPAT_AttachBottom              = 5,
	DPAT_SoftAttachBone            = 6,
	DPAT_SoftAttachSocket          = 7,
	DPAT_MAX                       = 8
};


// Enum BLGame.LootController.INTERACT_TARGET_TYPE
enum class EINTERACT_TARGET_TYPE : uint8_t
{
	ITT_NONE                       = 0,
	ITT_ITEMBAG                    = 1,
	ITT_PROP                       = 2,
	ITT_MAX                        = 3
};


// Enum BLGame.LootController.LOOT_ACTION_STATE
enum class ELOOT_ACTION_STATE : uint8_t
{
	LAS_NONE                       = 0,
	LAS_STARTING                   = 1,
	LAS_LOOPING                    = 2,
	LAS_ENDING                     = 3,
	LAS_MAX                        = 4
};


// Enum BLGame.PropAsset.PropEffectTriggerType_OnStart
enum class EPropEffectTriggerType_OnStart : uint8_t
{
	PropTrigger_T_OnStart_Active   = 0,
	PropTrigger_T_OnStart_Interacting = 1,
	PropTrigger_T_OnStart_Looting  = 2,
	PropTrigger_T_OnStart_Complete = 3,
	PropTrigger_T_OnStart_Deactive = 4,
	PropTrigger_T_OnStart_MAX      = 5
};


// Enum BLGame.PropAsset.PropEffectTriggerType_InState
enum class EPropEffectTriggerType_InState : uint8_t
{
	PropTrigger_T_InState_Active   = 0,
	PropTrigger_T_InState_Interacting = 1,
	PropTrigger_T_InState_Looting  = 2,
	PropTrigger_T_InState_Complete = 3,
	PropTrigger_T_InState_Deactive = 4,
	PropTrigger_T_InState_MAX      = 5
};


// Enum BLGame.PropAsset.PropInteractHeightType
enum class EPropInteractHeightType : uint8_t
{
	PropInteractHeight_T_LowInteraction = 0,
	PropInteractHeight_T_MidInteraction = 1,
	PropInteractHeight_T_HighInteraction = 2,
	PropInteractHeight_T_MAX       = 3
};


// Enum BLGame.PropAsset.BLPropPossibilityState
enum class EBLPropPossibilityState : uint8_t
{
	PPS_Possibility                = 0,
	PPS_NonePossibility            = 1,
	PPS_MAX                        = 2
};


// Enum BLGame.PropAsset.BLPropInteractionType
enum class EBLPropInteractionType : uint8_t
{
	EPIT_LowInteraction            = 0,
	EPIT_MidInteraction            = 1,
	EPIT_HighInteraction           = 2,
	EPIT_CustomInteraction         = 3,
	EPIT_MAX                       = 4
};


// Enum BLGame.PropAsset.BLPropInteractionState
enum class EBLPropInteractionState : uint8_t
{
	BLIS_InteractionInitial        = 0,
	BLIS_InteractionStarting       = 1,
	BLIS_InteractionComplete       = 2,
	BLIS_InteractionCancel         = 3,
	BLIS_MAX                       = 4
};


// Enum BLGame.BLPawn.ESkillCastingUIType
enum class ESkillCastingUIType : uint8_t
{
	ESCT_NormalCastingUI           = 0,
	ESCT_TargetCastingUI           = 1,
	ESCT_NoUI                      = 2,
	ESCT_MAX                       = 3
};


// Enum BLGame.BLNpcBase.ENPCBodySizeType
enum class ENPCBodySizeType : uint8_t
{
	ENPCBodySizeType_Small         = 0,
	ENPCBodySizeType_Medium        = 1,
	ENPCBodySizeType_Large         = 2,
	ENPCBodySizeType_MAX           = 3
};


// Enum BLGame.BLNpcFactoryVolume.BLLevelSpawnType
enum class EBLLevelSpawnType : uint8_t
{
	BLLevelSpawnType_NPC           = 0,
	BLLevelSpawnType_Prop          = 1,
	BLLevelSpawnType_Trap          = 2,
	BLLevelSpawnType_MAX           = 3
};


// Enum BLGame.BLNpcFactoryVolume.BLLevelPositionType
enum class EBLLevelPositionType : uint8_t
{
	BLLevelPositionType_Fixed      = 0,
	BLLevelPositionType_Random     = 1,
	BLLevelPositionType_Summon     = 2,
	BLLevelPositionType_MAX        = 3
};


// Enum BLGame.BLNpcFactoryVolume.BLLevelPartySpawnType
enum class EBLLevelPartySpawnType : uint8_t
{
	BLLevelPartySpawnType_A        = 0,
	BLLevelPartySpawnType_B        = 1,
	BLLevelPartySpawnType_C        = 2,
	BLLevelPartySpawnType_D        = 3,
	BLLevelPartySpawnType_MAX      = 4
};


// Enum BLGame.BLNpcFactoryVolume.BLLevelPartyDespawnType
enum class EBLLevelPartyDespawnType : uint8_t
{
	BLLevelPartyDespawnType_A      = 0,
	BLLevelPartyDespawnType_B      = 1,
	BLLevelPartyDespawnType_MAX    = 2
};


// Enum BLGame.BLNpcFactoryVolume.BLLevelPartyStatus
enum class EBLLevelPartyStatus : uint8_t
{
	BLLevelPartyStatus_Leader      = 0,
	BLLevelPartyStatus_Member      = 1,
	BLLevelPartyStatus_MAX         = 2
};


// Enum BLGame.BLNpcFactoryVolume.PlacementType
enum class EPlacementType : uint8_t
{
	PlaceOnTerrain                 = 0,
	PlaceOnStaticMesh              = 1,
	PlaceOnBSP                     = 2,
	PlacementType_MAX              = 3
};


// Enum BLGame.BLNpcFactoryVolume.BLWorldMapType
enum class EBLWorldMapType : uint8_t
{
	BLWorldMapType_Field           = 0,
	BLWorldMapType_Dungeon         = 1,
	BLWorldMapType_Instant         = 2,
	BLWorldMapType_Phase           = 3,
	BLWorldMapType_SpecialWar      = 4,
	BLWorldMapType_RO_Field        = 5,
	BLWorldMapType_RaidField       = 6,
	BLWorldMapType_ColosseumWar    = 7,
	BLWorldMapType_OccupationWar   = 8,
	BLWorldMapType_ChallengeTower  = 9,
	BLWorldMapType_MAX             = 10
};


// Enum BLGame.BLOccupationWar.EBLRevivalDistanceType
enum class EBLRevivalDistanceType : uint8_t
{
	EBLRevivalDistanceType_None    = 0,
	EBLRevivalDistanceType_Waiting = 1,
	EBLRevivalDistanceType_BaseGuide = 2,
	EBLRevivalDistanceType_MAX     = 3
};


// Enum BLGame.BLPathwayPoint.PATHWAY_CYCLE_TYPE
enum class EPATHWAY_CYCLE_TYPE : uint8_t
{
	PWCT_NONE                      = 0,
	PWCT_INVERSIVE                 = 1,
	PWCT_RECURSIVE                 = 2,
	PWCT_MAX                       = 3
};


// Enum BLGame.BLPickingAsset.PickingResult
enum class EPickingResult : uint8_t
{
	EPicked_None                   = 0,
	EPicked_Heuristic              = 1,
	EPicked_Original               = 2,
	EPicked_MAX                    = 3
};


// Enum BLGame.BLPlayer.EEquipmentLoadState
enum class EEquipmentLoadState : uint8_t
{
	EEquipmentLoadState_NeedLoad   = 0,
	EEquipmentLoadState_Loading    = 1,
	EEquipmentLoadState_Complete   = 2,
	EEquipmentLoadState_MAX        = 3
};


// Enum BLGame.OnlineKeyEventBinder.EPC_STATE
enum class EPC_STATE : uint8_t
{
	EPC_Normal                     = 0,
	EPC_Flying                     = 1,
	EPC_Swimming                   = 2,
	EPC_TPSGameModeExclusive       = 3,
	EPC_TPSUIModeExclusive         = 4,
	EPC_Editor                     = 5,
	EPC_Mount                      = 6,
	EPC_MAX                        = 7
};


// Enum BLGame.OnlineKeyEventBinder.EWorldMap_State
enum class EWorldMap_State : uint8_t
{
	EWS_Normal                     = 0,
	EWS_Disable                    = 1,
	EWS_Only                       = 2,
	EWS_MAX                        = 3
};


// Enum BLGame.OnlineKeyEventBinder.EUIKeyBinging_Type
enum class EUIKeyBinging_Type : uint8_t
{
	EUIKT_AcionBar_Slot            = 0,
	EUIKT_AcionBar_SkillDeck       = 1,
	EUIKT_Opener_Window            = 2,
	EUIKT_Opener_Available         = 3,
	EUIKT_SkillDeck                = 4,
	EUIKT_MAX                      = 5
};


// Enum BLGame.BLPlayerInventory.InventorySoundType
enum class EInventorySoundType : uint8_t
{
	IST_PackageSlotExtend          = 0,
	IST_LumenaSlotExtend           = 1,
	IST_SlotLockIconClick          = 2,
	IST_AutoSortClick              = 3,
	IST_SplitClick                 = 4,
	IST_MAX                        = 5
};


// Enum BLGame.BLPlayerInventory.InventorySplitAction
enum class EInventorySplitAction : uint8_t
{
	ISA_NONE                       = 0,
	ISA_PREPARE                    = 1,
	ISA_MAX                        = 2
};


// Enum BLGame.BLPlayerInventory.InventorySlotComponentType
enum class EInventorySlotComponentType : uint8_t
{
	ISCT_FREE                      = 0,
	ISCT_EXP_PACKAGE               = 1,
	ISCT_EXP_LUMENA                = 2,
	ISCT_MAX                       = 3
};


// Enum BLGame.BLPlayerInventory.InventorySlotExpansionType
enum class EInventorySlotExpansionType : uint8_t
{
	ISET_NONE                      = 0,
	ISET_LUMENA_UNKNOWN            = 1,
	ISET_LUMENA_MONTH              = 2,
	ISET_LUMENA_WEEK               = 3,
	ISET_LUMENA_PERMANENT          = 4,
	ISET_PACKAGE                   = 5,
	ISET_MAX                       = 6
};


// Enum BLGame.BLPlayerPreview.EItemAssetLoadState
enum class EItemAssetLoadState : uint8_t
{
	EItemAssetLoadState_NeedLoad   = 0,
	EItemAssetLoadState_Loading    = 1,
	EItemAssetLoadState_Complete   = 2,
	EItemAssetLoadState_MAX        = 3
};


// Enum BLGame.BLPlayerPreview.ERotateDirectionType
enum class ERotateDirectionType : uint8_t
{
	ERotateDirectionType_None      = 0,
	ERotateDirectionType_Left_Equip = 1,
	ERotateDirectionType_Right_Equip = 2,
	ERotateDirectionType_Left_LumenaShop = 3,
	ERotateDirectionType_Right_LumenaShop = 4,
	ERotateDirectionType_MAX       = 5
};


// Enum BLGame.BLProjectile.BezierCurveType
enum class EBezierCurveType : uint8_t
{
	BZCT_None                      = 0,
	BZCT_NaturalFall               = 1,
	BZCT_Fork                      = 2,
	BZCT_Missile                   = 3,
	BZCT_Noodle                    = 4,
	BZCT_MAX                       = 5
};


// Enum BLGame.BLProp.BLPropCmdType
enum class EBLPropCmdType : uint8_t
{
	BLPropCmdType_None             = 0,
	BLPropCmdType_SpawnEffect      = 1,
	BLPropCmdType_DespawnEffect    = 2,
	BLPropCmdType_ForceDespawnEffect_All = 3,
	BLPropCmdType_ChangeStaticMesh = 4,
	BLPropCmdType_ChangeSkeletalMesh = 5,
	BLPropCmdType_ChangeMIC        = 6,
	BLPropCmdType_PlaySound        = 7,
	BLPropCmdType_StopAnim         = 8,
	BLPropCmdType_SpawnDecal       = 9,
	BLPropCmdType_MAX              = 10
};


// Enum BLGame.BLPropPossibilityHandler.EClientPropPossibilityType
enum class EClientPropPossibilityType : uint8_t
{
	ClientPropPossibility_T_None   = 0,
	ClientPropPossibility_T_Possible = 1,
	ClientPropPossibility_T_Impossible = 2,
	ClientPropPossibility_T_MAX    = 3
};


// Enum BLGame.BLPropStateHandler.EClientPropStateType
enum class EClientPropStateType : uint8_t
{
	ClientPropState_T_NONE         = 0,
	ClientPropState_T_DEACTIVE     = 1,
	ClientPropState_T_ACTIVE       = 2,
	ClientPropState_T_INTERACTING  = 3,
	ClientPropState_T_LOOTING      = 4,
	ClientPropState_T_COMPLETE     = 5,
	ClientPropState_T_MAX          = 6
};


// Enum BLGame.BLSkillDeckUIManager.EBLStanceEquipType
enum class EBLStanceEquipType : uint8_t
{
	EBLStanceEquipType_None        = 0,
	EBLStanceEquipType_Stance1     = 1,
	EBLStanceEquipType_Stance2     = 2,
	EBLStanceEquipType_NonStance   = 3,
	EBLStanceEquipType_MAX         = 4
};


// Enum BLGame.BLSkillDeckUIManager.EBLStanceNodeDirection
enum class EBLStanceNodeDirection : uint8_t
{
	EBLStanceNodeDirection_None    = 0,
	EBLStanceNodeDirection_Left    = 1,
	EBLStanceNodeDirection_Right   = 2,
	EBLStanceNodeDirection_MAX     = 3
};


// Enum BLGame.BLSkillDeckUIManager.EBLNonStanceNodeDirection
enum class EBLNonStanceNodeDirection : uint8_t
{
	EBLNonStanceNodeDirection_None = 0,
	EBLNonStanceNodeDirection_Top  = 1,
	EBLNonStanceNodeDirection_Middle = 2,
	EBLNonStanceNodeDirection_Bottom = 3,
	EBLNonStanceNodeDirection_MAX  = 4
};


// Enum BLGame.BLSkillDeckUIManager.EBLGemStatus
enum class EBLGemStatus : uint8_t
{
	EBLGemStatus_Block             = 0,
	EBLGemStatus_Open              = 1,
	EBLGemStatus_Filled            = 2,
	EBLGemStatus_TemporarilyFilled = 3,
	EBLGemStatus_Lock              = 4,
	EBLGemStatus_TemporarilyOpen   = 5,
	EBLGemStatus_MAX               = 6
};


// Enum BLGame.BLSkillGemManager.BLGemExchangeUIPageType
enum class EBLGemExchangeUIPageType : uint8_t
{
	BLGemExchangeUIPageType_Exchange = 0,
	BLGemExchangeUIPageType_Result = 1,
	BLGemExchangeUIPageType_MAX    = 2
};


// Enum BLGame.BLSkillQTEHUDManager.EBLStanceStep
enum class EBLStanceStep : uint8_t
{
	EBLStanceStep_None             = 0,
	EBLStanceStep_First            = 1,
	EBLStanceStep_ReadyStanceChange = 2,
	EBLStanceStep_StanceChanging   = 3,
	EBLStanceStep_CompleteStanceChange = 4,
	EBLStanceStep_ReadySecond      = 5,
	EBLStanceStep_Second           = 6,
	EBLStanceStep_FinalChain       = 7,
	EBLStanceStep_MAX              = 8
};


// Enum BLGame.BLSkillQTEHUDManager.EBLGaugeUseType
enum class EBLGaugeUseType : uint8_t
{
	EBLGaugeUseType_None           = 0,
	EBLGaugeUseType_Skill          = 1,
	EBLGaugeUseType_QTEInput       = 2,
	EBLGaugeUseType_ChainState     = 3,
	EBLGaugeUseType_MAX            = 4
};


// Enum BLGame.BLSkillQTEHUDManager.EBLGaugePlayType
enum class EBLGaugePlayType : uint8_t
{
	EBLGaugePlayType_None          = 0,
	EBLGaugePlayType_Up            = 1,
	EBLGaugePlayType_Down          = 2,
	EBLGaugePlayType_MAX           = 3
};


// Enum BLGame.BLSkillQTEHUDManager.EBLGaugeColorType
enum class EBLGaugeColorType : uint8_t
{
	EBLGaugeColorType_None         = 0,
	EBLGaugeColorType_Charging     = 1,
	EBLGaugeColorType_Casting      = 2,
	EBLGaugeColorType_QTEChain     = 3,
	EBLGaugeColorType_MAX          = 4
};


// Enum BLGame.BLSkillQTEHUDUIManager.EBLQTESlotOrderType
enum class EBLQTESlotOrderType : uint8_t
{
	EBLQTESlotOrderType_None       = 0,
	EBLQTESlotOrderType_First_R    = 1,
	EBLQTESlotOrderType_Second_T   = 2,
	EBLQTESlotOrderType_Third_Y    = 3,
	EBLQTESlotOrderType_Fourth_Center = 4,
	EBLQTESlotOrderType_Max        = 5
};


// Enum BLGame.BLSkillTacticsUIManager.ESkillTreeBtnIndex
enum class ESkillTreeBtnIndex : uint8_t
{
	Btn_ChangeCancleBtn            = 0,
	Btn_ChangeSaveBtn              = 1,
	Btn_UseCurrentTactics          = 2,
	Btn_TacticsReset               = 3,
	Btn_MAX                        = 4
};


// Enum BLGame.BLSpecialWar.ESpecialWarNPCType
enum class ESpecialWarNPCType : uint8_t
{
	ESpecialWarNPCType_Gate        = 0,
	ESpecialWarNPCType_Lord        = 1,
	ESpecialWarNPCType_MAX         = 2
};


// Enum BLGame.BLSpecialWar.ESpecialWarRealmType
enum class ESpecialWarRealmType : uint8_t
{
	ESpecialWarRealmType_Hieron    = 0,
	ESpecialWarRealmType_Union     = 1,
	ESpecialWarRealmType_MAX       = 2
};


// Enum BLGame.BLSpecialWar.ESpecialWarMedalGrade
enum class ESpecialWarMedalGrade : uint8_t
{
	ESpecialWarMedalGrade_None     = 0,
	ESpecialWarMedalGrade_Bronze   = 1,
	ESpecialWarMedalGrade_Silver   = 2,
	ESpecialWarMedalGrade_Gold     = 3,
	ESpecialWarMedalGrade_MAX      = 4
};


// Enum BLGame.BLSpecialWar.ESpecialWarConquestResultUI
enum class ESpecialWarConquestResultUI : uint8_t
{
	ESpecialWarConquestResultUI_Playing = 0,
	ESpecialWarConquestResultUI_Win = 1,
	ESpecialWarConquestResultUI_Lose = 2,
	ESpecialWarConquestResultUI_Darw = 3,
	ESpecialWarConquestResultUI_MAX = 4
};


// Enum BLGame.BLTamingManager.ETamingResultType
enum class ETamingResultType : uint8_t
{
	ETamingResult_NONE             = 0,
	ETamingResult_TIMEOUT          = 1,
	ETamingResult_SUCCESS          = 2,
	ETamingResult_MAX              = 3
};


// Enum BLGame.BLTcpClient.EBLClientConnectionResult
enum class EBLClientConnectionResult : uint8_t
{
	BCR_GeneralError               = 0,
	BCR_UserLimitReached           = 1,
	BCR_RequestTimedOut            = 2,
	BCR_RejectedPort               = 3,
	BCR_Accepted                   = 4,
	BCR_MAX                        = 5
};


// Enum BLGame.BLTcpClient.EBLClientConnectionErrorState
enum class EBLClientConnectionErrorState : uint8_t
{
	Connect_Err_UnDefine           = 0,
	Connect_Err_NotMatchingProtocolVersion = 1,
	Connect_Err_NotMatchingSDLTypeVersion = 2,
	Connect_Err_ServerError        = 3,
	Connect_Err_NotUserDefine      = 4,
	Connect_Err_WrongPassword      = 5,
	Connect_Err_AlreadyLogin       = 6,
	Connect_Err_ClientIsBusy       = 7,
	Connect_Err_SocketBroken       = 8,
	Connect_Err_ServerIsBusy       = 9,
	Connect_Err_UserLimit          = 10,
	Connect_Err_MAX                = 11
};


// Enum BLGame.BLTcpClient.EBLTCPClientState
enum class EBLTCPClientState : uint8_t
{
	BTCS_None                      = 0,
	BTCS_Connecting                = 1,
	BTCS_Connected                 = 2,
	BTCS_ConnectionFailed          = 3,
	BTCS_Closed                    = 4,
	BTCS_MAX                       = 5
};


// Enum BLGame.BLTeleporter.ETeleporterTarget
enum class ETeleporterTarget : uint8_t
{
	TELEPORTERTARGET_Tag           = 0,
	TELEPORTERTARGET_Location      = 1,
	TELEPORTERTARGET_MAX           = 2
};


// Enum BLGame.BLTeleporter.ETeleporterMethod
enum class ETeleporterMethod : uint8_t
{
	TELEPORTERMETHOD_Touch         = 0,
	TELEPORTERMETHOD_MAX           = 1
};


// Enum BLGame.BLTerritoryVolume.ETerritoryVolumeType
enum class ETerritoryVolumeType : uint8_t
{
	ETerritoryVolumeType_Test1     = 0,
	ETerritoryVolumeType_Test2     = 1,
	ETerritoryVolumeType_MAX       = 2
};


// Enum BLGame.BLTranslucentSpriteComponent.AlignHotSpot_Vertical
enum class EAlignHotSpot_Vertical : uint8_t
{
	EAlignVertical_Center          = 0,
	EAlignVertical_Top             = 1,
	EAlignVertical_Bottom          = 2,
	EAlignVertical_MAX             = 3
};


// Enum BLGame.BLTranslucentSpriteComponent.AlignHotSpot_Horizontal
enum class EAlignHotSpot_Horizontal : uint8_t
{
	EAlignHorizontal_Center        = 0,
	EAlignHorizontal_Left          = 1,
	EAlignHorizontal_Right         = 2,
	EAlignHorizontal_MAX           = 3
};


// Enum BLGame.BLTransportRoute.TransportWarpEventType
enum class ETransportWarpEventType : uint8_t
{
	TransportWarpEvent_WarpIn      = 0,
	TransportWarpEvent_WarpOut     = 1,
	TransportWarpEvent_MAX         = 2
};


// Enum BLGame.BLTransportRoute.TransportRouteEventTimeType
enum class ETransportRouteEventTimeType : uint8_t
{
	TransportRouteEvent_JustTime   = 0,
	TransportRouteEvent_RelativeToKey = 1,
	TransportRouteEvent_BetweenTwoKeys = 2,
	TransportRouteEvent_MAX        = 3
};


// Enum BLGame.BLTrap.BLTrapCmdType
enum class EBLTrapCmdType : uint8_t
{
	BLTrapCmdType_None             = 0,
	BLTrapCmdType_SpawnParticle    = 1,
	BLTrapCmdType_DespawnParticle  = 2,
	BLTrapCmdType_ForceDespawnEffect_All = 3,
	BLTrapCmdType_ChangeStaticMesh = 4,
	BLTrapCmdType_ChangeSkeletalMesh = 5,
	BLTrapCmdType_PlaySound        = 6,
	BLTrapCmdType_StopAnim         = 7,
	BLTrapCmdType_SpawnDecal       = 8,
	BLTrapCmdType_MAX              = 9
};


// Enum BLGame.TrapAsset.BLTrapEffectPhase
enum class EBLTrapEffectPhase : uint8_t
{
	BLTrap_EP_Activate             = 0,
	BLTrap_EP_Triggered            = 1,
	BLTrap_EP_Spawned              = 2,
	BLTrap_EP_MAX                  = 3
};


// Enum BLGame.BLUIManager.EBLLumenaShopPreviewType
enum class EBLLumenaShopPreviewType : uint8_t
{
	EBLLumenaShopPreviewType_None  = 0,
	EBLLumenaShopPreviewType_Player = 1,
	EBLLumenaShopPreviewType_MPF   = 2,
	EBLLumenaShopPreviewType_MAX   = 3
};


// Enum BLGame.BLUIManager.ServerErrorMessageBoxType
enum class EServerErrorMessageBoxType : uint8_t
{
	ServerConnectionError          = 0,
	BattleEyeError                 = 1,
	SteamError                     = 2,
	ServerErrorMessageBoxType_MAX  = 3
};


// Enum BLGame.BLUIManager.EAbnormalCheckType
enum class EAbnormalCheckType : uint8_t
{
	EAbnormalCheckType_None        = 0,
	EAbnormalCheckType_My          = 1,
	EAbnormalCheckType_Target      = 2,
	EAbnormalCheckType_Party       = 3,
	EAbnormalCheckType_Raid        = 4,
	EAbnormalCheckType_Max         = 5
};


// Enum BLGame.BLUIManager.EUITalkSelectionType
enum class EUITalkSelectionType : uint8_t
{
	EUITalkSelectionType_Start     = 0,
	EUITalkSelectionType_Root      = 1,
	EUITalkSelectionType_Normal    = 2,
	EUITalkSelectionType_Close     = 3,
	EUITalkSelectionType_QuestAccept = 4,
	EUITalkSelectionType_QuestProgress = 5,
	EUITalkSelectionType_QuestFailure = 6,
	EUITalkSelectionType_QuestCompletion = 7,
	EUITalkSelectionType_QuestAdd  = 8,
	EUITalkSelectionType_QuestReward = 9,
	EUITalkSelectionType_Revival   = 10,
	EUITalkSelectionType_Return    = 11,
	EUITalkSelectionType_StoryQuest = 12,
	EUITalkSelectionType_Merchant  = 13,
	EUITalkSelectionType_EnterDungeon = 14,
	EUITalkSelectionType_Waypoint  = 15,
	EUITalkSelectionType_RO        = 16,
	EUITalkSelectionType_NpcCraftOpen = 17,
	EUITalkSelectionType_WareHouse = 18,
	EUITalkSelectionType_RoyalQuest = 19,
	EUITalkSelectionType_LimitedRank = 20,
	EUITalkSelectionType_RoaylAccept = 21,
	EUITalkSelectionType_RegisterRevivalPoint = 22,
	EUITalkSelectionType_Exchange  = 23,
	EUITalkSelectionType_RecipeSmith = 24,
	EUITalkSelectionType_RecipeHandiWork = 25,
	EUITalkSelectionType_RecipeSmelt = 26,
	EUITalkSelectionType_RecipeCook = 27,
	EUITalkSelectionType_RecipeAlchemy = 28,
	EUITalkSelectionType_CraftMainSkillSelect = 29,
	EUITalkSelectionType_CraftSubSkillSelect = 30,
	EUITalkSelectionType_Repair    = 31,
	EUITalkSelectionType_EquipLevelUp = 32,
	EUITalkSelectionType_Desynthesis = 33,
	EUITalkSelectionType_RestoreEquip = 34,
	EUITalkSelectionType_EquipEvolution = 35,
	EUITalkSelectionType_EquipSucceed = 36,
	EUITalkSelectionType_GuideQuest = 37,
	EUITalkSelectionType_End       = 38,
	EUITalkSelectionType_MAX       = 39
};


// Enum BLGame.BLUIManager.EUIPendingType
enum class EUIPendingType : uint8_t
{
	EUIPendingType_Initialize      = 0,
	EUIPendingType_Open            = 1,
	EUIPendingType_Close           = 2,
	EUIPendingType_MAX             = 3
};


// Enum BLGame.BLUIManager.EOrderSortType
enum class EOrderSortType : uint8_t
{
	EOrderSortType_None            = 0,
	EOrderSortType_Down            = 1,
	EOrderSortType_Up              = 2,
	EOrderSortType_Max             = 3
};


// Enum BLGame.BLUIManager.EBattleMessageFloaterType
enum class EBattleMessageFloaterType : uint8_t
{
	BMFT_None                      = 0,
	BMFT_Damage                    = 1,
	BMFT_ReceiveHeal               = 2,
	BMFT_Attack                    = 3,
	BMFT_DoHeal                    = 4,
	BMFT_MAX                       = 5
};


// Enum BLGame.BLUIPlayer.EUI_Lobby_Control
enum class EUI_Lobby_Control : uint8_t
{
	EUI_Lobby_Control_Start        = 0,
	EUI_Lobby_Control_Create_Button = 1,
	EUI_Lobby_Control_Delete_Button = 2,
	EUI_Lobby_Control_Server_Change = 3,
	EUI_Lobby_Control_Customize_Button = 4,
	EUI_Lobby_Control_GenderAppearance_Change = 5,
	EUI_Lobby_Control_MAX          = 6
};


// Enum BLGame.BLUIPlayer.EUI_Customize_Manager
enum class EUI_Customize_Manager : uint8_t
{
	EUI_Customize_Manager_Save     = 0,
	EUI_Customize_Manager_Load     = 1,
	EUI_Customize_Manager_MAX      = 2
};


// Enum BLGame.BLUserSettingManager.EChangeOutlineOption
enum class EChangeOutlineOption : uint8_t
{
	EChangeOutlineOption_AllBattleOutline = 0,
	EChangeOutlineOption_FieldBattleOutline = 1,
	EChangeOutlineOption_FieldBattleOutlinePlayer = 2,
	EChangeOutlineOption_FieldBattleOutlineTraget = 3,
	EChangeOutlineOption_DungeonBattleOutline = 4,
	EChangeOutlineOption_DungeonBattleOutlinePlayer = 5,
	EChangeOutlineOption_DungeonBattleOutlineTrager = 6,
	EChangeOutlineOption_WarfareBattleOutline = 7,
	EChangeOutlineOption_WarfareBattleOutlinePlayer = 8,
	EChangeOutlineOption_WarfareBattleOutlineTarget = 9,
	EChangeOutlineOption_MAX       = 10
};


// Enum BLGame.BLUserSettingManager.EDisplayMode
enum class EDisplayMode : uint8_t
{
	EDisplayMode_Window            = 0,
	EDisplayMode_FullScreen        = 1,
	EDisplayMode_FullWindown       = 2,
	EDisplayMode_Max               = 3
};


// Enum BLGame.BLWorldClock.EAMPMType
enum class EAMPMType : uint8_t
{
	EAMPMType_AM                   = 0,
	EAMPMType_PM                   = 1,
	EAMPMType_MAX                  = 2
};


// Enum BLGame.BLWorldManager.LoadingType
enum class ELoadingType : uint8_t
{
	LoadingType_None               = 0,
	LoadingType_Lobby              = 1,
	LoadingType_World              = 2,
	LoadingType_Teleport           = 3,
	LoadingType_MAX                = 4
};


// Enum BLGame.BLWorldManager.LoadingState
enum class ELoadingState : uint8_t
{
	LoadingState_NormalReady       = 0,
	LoadingState_Persistent        = 1,
	LoadingState_Division          = 2,
	LoadingState_SubLevels         = 3,
	LoadingState_Environment       = 4,
	LoadingState_MAX               = 5
};


// Enum BLGame.BLWorldManager.EnterWorldState
enum class EnterWorldState : uint8_t
{
	EnterWorldState_NotYet         = 0,
	EnterWorldState_Complete       = 1,
	EnterWorldState_MAX            = 2
};


// Enum BLGame.BLWorldMapElement.WorldMapElementIconType
enum class EWorldMapElementIconType : uint8_t
{
	WMEIT_PLAYER                   = 0,
	WMEIT_PLAYERPOSITION           = 1,
	WMEIT_DEADBODY                 = 2,
	WMEIT_REVIVAL                  = 3,
	WMEIT_INSTANCE_REVIVAL_POINT   = 4,
	WMEIT_PARTY                    = 5,
	WMEIT_RAID_MEMBER              = 6,
	WMEIT_PINFOCUSING              = 7,
	WMEIT_STORYQUEST               = 8,
	WMEIT_GUIDEQUEST               = 9,
	WMEIT_ROYALQUESTONGOING        = 10,
	WMEIT_EPISODEQUESTCOMPLETE     = 11,
	WMEIT_EPISODEQUESTONGOING      = 12,
	WMEIT_EPISODEQUESTACCEPTABLE   = 13,
	WMEIT_FIELDRAID                = 14,
	WMEIT_ROYALQUESTGIVER          = 15,
	WMEIT_DUNGEON                  = 16,
	WMEIT_EXCHANGEMANAGER          = 17,
	WMEIT_RO_MANAGER               = 18,
	WMEIT_GUILD_SHOP               = 19,
	WMEIT_MERCHANT                 = 20,
	WMEIT_WAREHOUSE                = 21,
	WMEIT_SKILL                    = 22,
	WMEIT_RETURN                   = 23,
	WMEIT_WAYPOINT                 = 24,
	WMEIT_CRAFT                    = 25,
	WMEIT_REPAIR                   = 26,
	WMEIT_STRENGTHEN               = 27,
	WMEIT_PORTAL                   = 28,
	WMEIT_LIMITEDRANK              = 29,
	WMEIT_UNDERATTACK              = 30,
	WMEIT_CONQUEST_NPC_HIERON      = 31,
	WMEIT_CONQUEST_NPC_UNION       = 32,
	WMEIT_CONQUEST_GHOST           = 33,
	WMEIT_CONQUEST_TREE_GHOST      = 34,
	WMEIT_CONQUEST_TREE            = 35,
	WMEIT_CONQUEST_GATE            = 36,
	WMEIT_CONQUEST_STONE_HIERON    = 37,
	WMEIT_CONQUEST_STONE_UNION     = 38,
	WMEIT_CONQUEST_STONE_NEUTRAL   = 39,
	WMEIT_OCCUPATIONWAR_HIERONNORMALBASE = 40,
	WMEIT_OCCUPATIONWAR_UNIONNORMALBASE = 41,
	WMEIT_OCCUPATIONWAR_NONENORMALBASE = 42,
	WMEIT_OCCUPATIONWAR_HIERONHALFNORMALBASE = 43,
	WMEIT_OCCUPATIONWAR_UNIONHALFNORMALBASE = 44,
	WMEIT_OCCUPATIONWAR_HIERONSPECIALBASE = 45,
	WMEIT_OCCUPATIONWAR_UNIONSPECIALBASE = 46,
	WMEIT_OCCUPATIONWAR_NONESPECIALBASE = 47,
	WMEIT_OCCUPATIONWAR_HIERONHALFSPECIALBASE = 48,
	WMEIT_OCCUPATIONWAR_UNIONHALFSPECIALBASE = 49,
	WMEIT_OCCUPATIONWAR_ITEMRED    = 50,
	WMEIT_OCCUPATIONWAR_ITEMGREEN  = 51,
	WMEIT_OCCUPATIONWAR_ITEMBLUE   = 52,
	WMEIT_CHALLENGETOWER_ENTERANCE = 53,
	WMEIT_CHALLENGETOWER_HOLY      = 54,
	WMEIT_CHALLENGETOWER_HELLGATE  = 55,
	WMEIT_RO_ATTACKER_FINAL_BASE   = 56,
	WMEIT_RO_DEFENDER_FINAL_BASE   = 57,
	WMEIT_RO_ATTACKER_WEAPON       = 58,
	WMEIT_RO_DEFENDER_WEAPON       = 59,
	WMEIT_RO_ATTACKER_FIRST_BASE   = 60,
	WMEIT_RO_DEFENDER_FIRST_BASE   = 61,
	WMEIT_RO_ATTACKER_SECOND_BASE  = 62,
	WMEIT_RO_DEFENDER_SECOND_BASE  = 63,
	WMEIT_RO_CASTLE_DOOR           = 64,
	WMEIT_AUTOPATH_DESTINATION     = 65,
	WMEIT_QUESTAREASTORY           = 66,
	WMEIT_QUESTAREAROYAL           = 67,
	WMEIT_QUESTAREAEPISODE         = 68,
	WMEIT_QUESTAREAGUIDE           = 69,
	WMEIT_QUESTAREAMONSTERBOOK     = 70,
	WMEIT_ZONENAME                 = 71,
	WMEIT_NONE                     = 72,
	WMEIT_MAX                      = 73
};


// Enum BLGame.BodyInfo.EMountRidePosition
enum class EMountRidePosition : uint8_t
{
	EMountAttach_SitOnSaddle       = 0,
	EMountAttach_StandOnPoint      = 1,
	EMountAttach_MAX               = 2
};


// Enum BLGame.MeshTexturePaintTemplate.EMeshPaintBrushControl
enum class EMeshPaintBrushControl : uint8_t
{
	EMeshPaintBrushControl_ClickToPaintPart = 0,
	EMeshPaintBrushControl_ClickToPaintClickPoint = 1,
	EMeshPaintBrushControl_DragToPaintDense = 2,
	EMeshPaintBrushControl_DragToPaintLineTrack = 3,
	EMeshPaintBrushControl_DragToPaintLineTrackWithinMask = 4,
	EMeshPaintBrushControl_DragToSelectShapeAndPaintPart = 5,
	EMeshPaintBrushControl_DragToSelectShapeAndPaintClickPoint = 6,
	EMeshPaintBrushControl_MAX     = 7
};


// Enum BLGame.MeshTexturePaintTemplate.EnumMeshPaintBrush
enum class EnumMeshPaintBrush : uint8_t
{
	MeshPaintBrush_Foundation      = 0,
	MeshPaintBrush_Blusher         = 1,
	MeshPaintBrush_Highlighter     = 2,
	MeshPaintBrush_EyeShadow       = 3,
	MeshPaintBrush_EyeLiner        = 4,
	MeshPaintBrush_LipStick        = 5,
	MeshPaintBrush_LipGlows        = 6,
	MeshPaintBrush_Point           = 7,
	MeshPaintBrush_Concealer       = 8,
	MeshPaintBrush_MAX             = 9
};


// Enum BLGame.BSM_BaseParameter.CONDITIONAL_BROADWAY_TYPE
enum class ECONDITIONAL_BROADWAY_TYPE : uint8_t
{
	CBTYPE_NONE                    = 0,
	CBTYPE_POSITIVE_TARGET         = 1,
	CBTYPE_NEGATIVE_TARGET         = 2,
	CBTYPE_MAX                     = 3
};


// Enum BLGame.BSM_MountAttackMove.EMountAttackMovePhase
enum class EMountAttackMovePhase : uint8_t
{
	MPT_TraceMove                  = 0,
	MPT_TraceRemainMove            = 1,
	MPT_AttackMove                 = 2,
	MPT_MAX                        = 3
};


// Enum BLGame.BSM_SA_Carry.ECarryPhase
enum class ECarryPhase : uint8_t
{
	ECarryPhase_PickUp             = 0,
	ECarryPhase_Carrying           = 1,
	ECarryPhase_PutDown            = 2,
	ECarryPhase_MAX                = 3
};


// Enum BLGame.BSM_SA_Loot.ELootPhase
enum class ELootPhase : uint8_t
{
	ELootPhase_LootStart           = 0,
	ELootPhase_Looting             = 1,
	ELootPhase_LootEnd             = 2,
	ELootPhase_MAX                 = 3
};


// Enum BLGame.BSM_SA_SitDown.ESitDownPhase
enum class ESitDownPhase : uint8_t
{
	ESitDownPhase_SitDown          = 0,
	ESitDownPhase_Sitting          = 1,
	ESitDownPhase_StandUp          = 2,
	ESitDownPhase_MAX              = 3
};


// Enum BLGame.BSM_SA_SprintReady.ESprintReadyPhase
enum class ESprintReadyPhase : uint8_t
{
	ESprintReadyPhase_Ready        = 0,
	ESprintReadyPhase_ReadyLoop    = 1,
	ESprintReadyPhase_MAX          = 2
};


// Enum BLGame.BSM_Skill_Flash.EFlashStepType
enum class EFlashStepType : uint8_t
{
	EFS_HIDE                       = 0,
	EFS_SHOW                       = 1,
	EFS_END                        = 2,
	EFS_MAX                        = 3
};


// Enum BLGame.BSM_SystemAction.ESkillPhase
enum class ESkillPhase : uint8_t
{
	SP_None                        = 0,
	SP_Started                     = 1,
	SP_Casting                     = 2,
	SP_Ready                       = 3,
	SP_Shoot                       = 4,
	SP_Return                      = 5,
	SP_Cancel                      = 6,
	SP_Done                        = 7,
	SP_MAX                         = 8
};


// Enum BLGame.CollectionBook.CB_SubUIType
enum class ECB_SubUIType : uint8_t
{
	CB_SubUIType_None              = 0,
	CB_SubUIType_ExpUp             = 1,
	CB_SubUIType_GradeUp           = 2,
	CB_SubUIType_GradeUpAdd        = 3,
	CB_SubUIType_ChangeSkill       = 4,
	CB_SubUIType_Recovery          = 5,
	CB_SubUIType_MonsterBall       = 6,
	CB_SubUIType_MAX               = 7
};


// Enum BLGame.CollectionBook.FosterType
enum class EFosterType : uint8_t
{
	Foster_ExpUp                   = 0,
	Foster_GradeUp                 = 1,
	Foster_MAX                     = 2
};


// Enum BLGame.CollectionBook.CB_UIFilterType
enum class ECB_UIFilterType : uint8_t
{
	CB_UIFilterType_GRADE          = 0,
	CB_UIFilterType_LEVEL          = 1,
	CB_UIFilterType_NAME           = 2,
	CB_UIFilterType_FATIGUE        = 3,
	CB_UIFilterType_MAX            = 4
};


// Enum BLGame.GameHUD.EDrawNameMode
enum class EDrawNameMode : uint8_t
{
	EDrawNameMode_Off              = 0,
	EDrawNameMode_On               = 1,
	EDrawNameMode_Debug            = 2,
	EDrawNameMode_MAX              = 3
};


// Enum BLGame.GameHUD.ECutInState
enum class ECutInState : uint8_t
{
	ECS_None                       = 0,
	ECS_FadeIn                     = 1,
	ECS_PlayAnim                   = 2,
	ECS_FadeOut                    = 3,
	ECS_MAX                        = 4
};


// Enum BLGame.GFxUI_PopupMenu.EPopupMenuItem
enum class EPopupMenuItem : uint8_t
{
	EPopupMenuItem_None            = 0,
	EPopupMenuItem_DistributeMethod_MenuContainer = 1,
	EPopupMenuItem_RollDice_MenuContainer = 2,
	EPopupMenuItem_DistributeMethod_OnlyDisplay = 3,
	EPopupMenuItem_RollDice_OnlyDisplay = 4,
	EPopupMenuItem_InviteToParty   = 5,
	EPopupMenuItem_DissolveParty   = 6,
	EPopupMenuItem_LeaveParty      = 7,
	EPopupMenuItem_EntrustPartyLeader = 8,
	EPopupMenuItem_BanishFromParty = 9,
	EPopupMenuItem_PartySummon     = 10,
	EPopupMenuItem_MoveToPartyChannel = 11,
	EPopupMenuItem_PrivateTrade    = 12,
	EPopupMenuItem_GuildInvite     = 13,
	EPopupMenuItem_Guild_Introduce = 14,
	EPopupMenuItem_Guild_Leave     = 15,
	EPopupMenuItem_Guild_Remove    = 16,
	EPopupMenuItem_Guild_Leader    = 17,
	EPopupMenuItem_Guild_Second_Position = 18,
	EPopupMenuItem_Guild_Third_Position = 19,
	EPopupMenuItem_Guild_Fourth_Postion = 20,
	EPopupMenuItem_Guild_Fifth_Position = 21,
	EPopupMenuItem_MailBox_Preservation = 22,
	EPopupMenuItem_MailBox_Delete  = 23,
	EPopupMenuItem_MailBox_Block   = 24,
	EPopupMenuItem_Dungeon_Initialization = 25,
	EPopupMenuItem_Cancel          = 26,
	EPopupMenuItem_RemoveWayPoint  = 27,
	EPopupMenuItem_Bot_Report      = 28,
	EPopupMenuItem_AddFriend       = 29,
	EPopupMenuItem_DeleteFriend    = 30,
	EPopupMenuItem_Whisper         = 31,
	EPopupMenuItem_Block           = 32,
	EPopupMenuItem_Unblock         = 33,
	EPopupMenuItem_Invite_To_RaidParty = 34,
	EPopupMenuItem_Switch_To_Raid  = 35,
	EPopupMenuItem_Raid_Frame_Move = 36,
	EPopupMenuItem_Raid_Frame_Fix  = 37,
	EPopupMenuItem_RequestDuel     = 38,
	EPopupMenuItem_ReleaseSign     = 39,
	EPopupMenuItem_ReleaseAllSign  = 40,
	EPopupMenuItem_SetSignAuthority = 41,
	EPopupMenuItem_UserName        = 42,
	EPopupMenuItem_AvailableOpener_Add = 43,
	EPopupMenuItem_AvailableOpener_Remove = 44,
	EPopupMenuItem_WorldMap_AutoMove_On_AutoPath = 45,
	EPopupMenuItem_WorldMap_Make_AutoPath_Route = 46,
	EPopupMenuItem_WorldMap_Delete_AutoPath_Route = 47,
	EPopupMenuItem_SelectEquipHand_Left = 48,
	EPopupMenuItem_SelectEquipHand_Right = 49,
	EPopupMenuItem_PartyEffect     = 50,
	EPopupMenuItem_DistributeMethod_Sequencial = 51,
	EPopupMenuItem_DistributeMethod_FirstPicker = 52,
	EPopupMenuItem_RollDice_Uncommon = 53,
	EPopupMenuItem_RollDice_Rare   = 54,
	EPopupMenuItem_RollDice_Epic   = 55,
	EPopupMenuItem_RollDice_Legendary = 56,
	EPopupMenuItem_RollDice_NotUse = 57,
	EPopupMenuItem_Raid            = 58,
	EPopupMenuItem_Raid01          = 59,
	EPopupMenuItem_SignAuthority_All = 60,
	EPopupMenuItem_SignAuthority_PartyLeader = 61,
	EPopupMenuItem_SignAuthority_RaidLeader = 62,
	EPopupMenuItem_Max             = 63
};


// Enum BLGame.GFxUI_PopupMenu.EPopupMenuType
enum class EPopupMenuType : uint8_t
{
	EPopupMenuType_PC              = 0,
	EPopupMenuType_Target          = 1,
	EPopupMenuType_Party           = 2,
	EPopupMenuType_Guild           = 3,
	EPopupMenuType_MailBox         = 4,
	EPopupMenuType_Teleport        = 5,
	EPopupMenuType_Friend          = 6,
	EPopupMenuType_TalkerName      = 7,
	EPopupMenuType_BlockList       = 8,
	EPopupMenuType_RaidPartyFrame  = 9,
	EPopupMenuType_RaidMember      = 10,
	EPopupMenuType_OpenerAvailable = 11,
	EPopupMenuType_WorldMap_AutoPath = 12,
	EPopupMenuType_SelectEquipHand_Weapon = 13,
	EPopupMenuType_SelectEquipHand_Ring = 14,
	EPopupMenuType_SelectEquipHand_Costume_Weapon = 15,
	EPopupMenuType_Max             = 16
};


// Enum BLGame.LevelStreamingDirectionLevel.BLDirectionLevelQuality
enum class EBLDirectionLevelQuality : uint8_t
{
	BLDirectionLevelQuality_Low    = 0,
	BLDirectionLevelQuality_Middle = 1,
	BLDirectionLevelQuality_High   = 2,
	BLDirectionLevelQuality_MAX    = 3
};


// Enum BLGame.LevelStreamingSphereDistance.ELV_VisibilityGrade
enum class ELV_VisibilityGrade : uint8_t
{
	ELV_Lower                      = 0,
	ELV_Normal                     = 1,
	ELV_Top                        = 2,
	ELV_MAX                        = 3
};


// Enum BLGame.LoadingMessageAsset.LoadingMessageRaceType
enum class ELoadingMessageRaceType : uint8_t
{
	LMRT_ALL                       = 0,
	LMRT_AMISTAD                   = 1,
	LMRT_AQUAELF                   = 2,
	LMRT_PANTERA                   = 3,
	LMRT_IBLIS                     = 4,
	LMRT_SIREN                     = 5,
	LMRT_HABICHTS                  = 6,
	LMRT_SYLVANELF                 = 7,
	LMRT_LUPUS                     = 8,
	LMRT_FEDAYIN                   = 9,
	LMRT_MASCU                     = 10,
	LMRT_UNION                     = 11,
	LMRT_HIERON                    = 12,
	LMRT_MAX                       = 13
};


// Enum BLGame.LoadingMessageAsset.LoadingMessageClassType
enum class ELoadingMessageClassType : uint8_t
{
	LMCT_ALL                       = 0,
	LMCT_GUARDIAN                  = 1,
	LMCT_BERSERKER                 = 2,
	LMCT_STRIKER                   = 3,
	LMCT_RANGER                    = 4,
	LMCT_MAGE                      = 5,
	LMCT_WARLOCK                   = 6,
	LMCT_PALADIN                   = 7,
	LMCT_MYSTIC                    = 8,
	LMCT_TARGETING                 = 9,
	LMCT_NONTARGETING              = 10,
	LMCT_MAX                       = 11
};


// Enum BLGame.LobbyManager.ELobbyState
enum class ELobbyState : uint8_t
{
	ELOBBY_STATE_NONE              = 0,
	ELOBBY_STATE_STARTING          = 1,
	ELOBBY_STATE_SELECT_CHARACTER  = 2,
	ELOBBY_STATE_SELECT_REALM      = 3,
	ELOBBY_STATE_SELECT_GENDER_RACE_JOB = 4,
	ELOBBY_STATE_CHARACTER_CUSTOMIZE = 5,
	ELOBBY_STATE_SET_NAME          = 6,
	ELOBBY_STATE_LOADING           = 7,
	ELOBBY_STATE_MAX               = 8
};


// Enum BLGame.MainActionBar.ActionBarAutoFireStateType
enum class EActionBarAutoFireStateType : uint8_t
{
	ABAFST_OFF                     = 0,
	ABAFST_READY                   = 1,
	ABAFST_START                   = 2,
	ABAFST_MAX                     = 3
};


// Enum BLGame.MainActionBar.ActionBarSwitchingStateType
enum class EActionBarSwitchingStateType : uint8_t
{
	ABSST_NONE                     = 0,
	ABSST_OFF                      = 1,
	ABSST_ON                       = 2,
	ABSST_MAX                      = 3
};


// Enum BLGame.MainActionBar.EBLStanceUseColor
enum class EBLStanceUseColor : uint8_t
{
	EBLStanceUseColor_Pink         = 0,
	EBLStanceUseColor_Emerald      = 1,
	EBLStanceUseColor_MAX          = 2
};


// Enum BLGame.NPCInteractionAsset.NPCInteractionTriggerCheck
enum class ENPCInteractionTriggerCheck : uint8_t
{
	NPCITC_Out                     = 0,
	NPCITC_Border                  = 1,
	NPCITC_In                      = 2,
	NPCITC_MAX                     = 3
};


// Enum BLGame.ParticleModuleTypeDataSkelMesh.EAdjustHeightSrcType
enum class EAdjustHeightSrcType : uint8_t
{
	PEAHST_RootBone                = 0,
	PEAHST_BoneName                = 1,
	PEAHST_SocketName              = 2,
	PEAHST_MAX                     = 3
};


// Enum BLGame.ParticleModuleTypeDataSkelMesh.EAdjustHeightTargetType
enum class EAdjustHeightTargetType : uint8_t
{
	PEAHTT_Terrain                 = 0,
	PEAHTT_LevelGeometry           = 1,
	PEAHTT_MAX                     = 2
};


// Enum BLGame.PCControlInfo.KeyDataType
enum class EKeyDataType : uint8_t
{
	KDTDefault                     = 0,
	KDTClassicAD                   = 1,
	KDTClassicQE                   = 2,
	KDTAimAD                       = 3,
	KDTAimQE                       = 4,
	KeyDataType_MAX                = 5
};


// Enum BLGame.RealmOwnershipBattle.ROBattleSide
enum class EROBattleSide : uint8_t
{
	ROBS_NONE                      = 0,
	ROBS_ATTACK                    = 1,
	ROBS_DEFENSE                   = 2,
	ROBS_MAX                       = 3
};


// Enum BLGame.RealmOwnershipBattle.ROBattleRegisterBtnState
enum class EROBattleRegisterBtnState : uint8_t
{
	ROBRBS_NONE                    = 0,
	ROBRBS_JOIN                    = 1,
	ROBRBS_CANCEL                  = 2,
	ROBRBS_MAX                     = 3
};


// Enum BLGame.RuneManager.ERuneUITabType
enum class ERuneUITabType : uint8_t
{
	ERuneUITabType_EquipUI         = 0,
	ERuneUITabType_SlateUI         = 1,
	ERuneUITabType_MAX             = 2
};


// Enum BLGame.SkillAsset.SkillChangeWeaponPostureType
enum class ESkillChangeWeaponPostureType : uint8_t
{
	SCWP_ToUnsheathe               = 0,
	SCWP_ToSheathe                 = 1,
	SCWP_DoNotChange               = 2,
	SCWP_MAX                       = 3
};


// Enum BLGame.SkillAsset.SkillDecalAreaType
enum class ESkillDecalAreaType : uint8_t
{
	SDAT_NONE                      = 0,
	SDAT_Circular                  = 1,
	SDAT_Rectangle                 = 2,
	SDAT_MAX                       = 3
};


// Enum BLGame.SpawnEffectInfo.SPAWN_EMITTER_LOC_TYPE
enum class ESPAWN_EMITTER_LOC_TYPE : uint8_t
{
	SELT_PawnCenter                = 0,
	SELT_PawnOverhead              = 1,
	SELT_PawnGround                = 2,
	SELT_AttachBone                = 3,
	SELT_AttachSocket              = 4,
	SELT_MAX                       = 5
};



//---------------------------------------------------------------------------
//Script Structs
//---------------------------------------------------------------------------

// ScriptStruct BLGame.ABLSDLTypes.ROGuildStatueItemData
// 0x0008
struct FROGuildStatueItemData
{
	int                                                EquipSlot;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemCid;                                                  // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.word
// 0x0002
struct Fword
{
	unsigned char                                      A;                                                        // 0x0000(0x0001) (Const, Native)
	unsigned char                                      B;                                                        // 0x0001(0x0001) (Const, Native)
};

// ScriptStruct BLGame.ABLSDLTypes.StatData
// 0x0008
struct FStatData
{
	int                                                Type;                                                     // 0x0000(0x0004) (AlwaysInit)
	int                                                Value;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ItemAdditionalEffectData
// 0x0008
struct FItemAdditionalEffectData
{
	int                                                Type;                                                     // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ItemEvolutionAdditionalEffectData
// 0x000C
struct FItemEvolutionAdditionalEffectData
{
	int                                                Index;                                                    // 0x0000(0x0004) (AlwaysInit)
	struct FItemAdditionalEffectData                   EffectData;                                               // 0x0004(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.EquipedItemData
// 0x0090
struct FEquipedItemData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                Amount;                                                   // 0x0008(0x0004) (AlwaysInit)
	struct Fword                                       CustomCount;                                              // 0x000C(0x0004) (AlwaysInit)
	TArray<struct FStatData>                           StatDataList;                                             // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                LegendOptCid;                                             // 0x0020(0x0004) (AlwaysInit)
	int                                                Bonding;                                                  // 0x0024(0x0004) (AlwaysInit)
	struct FQWord                                      DurationTime;                                             // 0x0028(0x0008) (AlwaysInit)
	struct FString                                     MakerName;                                                // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IsExpressMakerName;                                       // 0x0040(0x0004) (AlwaysInit)
	struct FQWord                                      TradingAbleDurationTime;                                  // 0x0044(0x0008) (AlwaysInit)
	unsigned char                                      PotentialLevel;                                           // 0x004C(0x0001) (AlwaysInit)
	unsigned char                                      UpgradeLevel;                                             // 0x004D(0x0001) (AlwaysInit)
	unsigned char                                      EvolutionLevel;                                           // 0x004E(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	int                                                Rune_Item_CId_2;                                          // 0x0050(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_3;                                          // 0x0054(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_4;                                          // 0x0058(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_5;                                          // 0x005C(0x0004) (AlwaysInit)
	int                                                Durability;                                               // 0x0060(0x0004) (AlwaysInit)
	int                                                Max_Durability;                                           // 0x0064(0x0004) (AlwaysInit)
	int                                                Fixed_Max_Durability;                                     // 0x0068(0x0004) (AlwaysInit)
	TArray<struct FItemEvolutionAdditionalEffectData>  ItemEvolutionAdditionalEffectData;                        // 0x006C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MPFExtractionInfo;                                        // 0x007C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                EquipSlotIndex;                                           // 0x008C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.BLGuildMarkData
// 0x0014
struct FBLGuildMarkData
{
	TEnumAsByte<EGuildCrownType>                       CrownType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                GuildRankLevel;                                           // 0x0004(0x0004)
	int                                                BackgroundCid;                                            // 0x0008(0x0004)
	int                                                SymbolColorCid;                                           // 0x000C(0x0004)
	int                                                SymbolColorIndex;                                         // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLDef.BLGuildMarkUIData
// 0x0010
struct FBLGuildMarkUIData
{
	TEnumAsByte<EGuildCrownType>                       CrownType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                GuildRankLevel;                                           // 0x0004(0x0004)
	int                                                BGIconIndex;                                              // 0x0008(0x0004)
	int                                                SymbolIconIndex;                                          // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildMarkData
// 0x000C
struct FGuildMarkData
{
	int                                                BackgroundInfoCId;                                        // 0x0000(0x0004) (AlwaysInit)
	int                                                SymbolInfoCId;                                            // 0x0004(0x0004) (AlwaysInit)
	int                                                SymbolInfoColorIndex;                                     // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SystemMessageParamValueData
// 0x0018
struct FSystemMessageParamValueData
{
	struct FString                                     StringValue;                                              // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FDouble                                     numberValue;                                              // 0x0010(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.BLCharacterLightProperty.SpotLightProperties
// 0x0030
struct FSpotLightProperties
{
	unsigned long                                      AffectCompositeShadowDirection : 1;                       // 0x0000(0x0004) (Edit)
	unsigned long                                      SelfShadowOnly : 1;                                       // 0x0000(0x0004) (Edit)
	unsigned long                                      CastCompositeShadow : 1;                                  // 0x0000(0x0004) (Edit)
	float                                              Radius;                                                   // 0x0004(0x0004) (Edit)
	float                                              InnerConeAngle;                                           // 0x0008(0x0004) (Edit)
	float                                              OuterConeAngle;                                           // 0x000C(0x0004) (Edit)
	float                                              Brightness;                                               // 0x0010(0x0004) (Edit)
	struct FColor                                      LightColor;                                               // 0x0014(0x0004) (Edit)
	struct FLinearColor                                ModShadowColor;                                           // 0x0018(0x0010) (Edit)
	int                                                MinShadowResolution;                                      // 0x0028(0x0004) (Edit)
	int                                                MaxShadowResolution;                                      // 0x002C(0x0004) (Edit)
};

// ScriptStruct BLGame.BLCharacterLightProperty.PointLightProperties
// 0x002C
struct FPointLightProperties
{
	unsigned long                                      CastCompositeShadow : 1;                                  // 0x0000(0x0004) (Edit)
	unsigned long                                      AffectCompositeShadowDirection : 1;                       // 0x0000(0x0004) (Edit)
	unsigned long                                      SelfShadowOnly : 1;                                       // 0x0000(0x0004) (Edit)
	float                                              Brightness;                                               // 0x0004(0x0004) (Edit)
	struct FColor                                      LightColor;                                               // 0x0008(0x0004) (Edit)
	struct FLinearColor                                ModShadowColor;                                           // 0x000C(0x0010) (Edit)
	int                                                MaxShadowResolution;                                      // 0x001C(0x0004) (Edit)
	int                                                MinShadowResolution;                                      // 0x0020(0x0004) (Edit)
	float                                              Radius;                                                   // 0x0024(0x0004) (Edit)
	unsigned long                                      CompositeDynamic : 1;                                     // 0x0028(0x0004) (Edit)
	unsigned long                                      Unnamed_7 : 1;                                            // 0x0028(0x0004) (Edit)
};

// ScriptStruct BLGame.BLCharacterLightProperty.CharLightLocationRotation
// 0x0058
struct FCharLightLocationRotation
{
	TEnumAsByte<ECERaceType>                           Race;                                                     // 0x0000(0x0001) (Edit)
	TEnumAsByte<ECEGenderType>                         Gender;                                                   // 0x0001(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	struct FVector                                     MainLocation;                                             // 0x0004(0x000C) (Edit)
	struct FRotator                                    MainRotation;                                             // 0x0010(0x000C) (Edit)
	struct FVector                                     BackLocation;                                             // 0x001C(0x000C) (Edit)
	struct FRotator                                    BackRotation;                                             // 0x0028(0x000C) (Edit)
	struct FVector                                     SideLocation;                                             // 0x0034(0x000C) (Edit)
	struct FRotator                                    SideRotation;                                             // 0x0040(0x000C) (Edit)
	struct FVector                                     FillLocation;                                             // 0x004C(0x000C) (Edit)
};

// ScriptStruct BLGame.ABLSDLTypes.ItemData
// 0x008C
struct FItemData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                Amount;                                                   // 0x0008(0x0004) (AlwaysInit)
	struct Fword                                       CustomCount;                                              // 0x000C(0x0004) (AlwaysInit)
	TArray<struct FStatData>                           StatDataList;                                             // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                LegendOptCid;                                             // 0x0020(0x0004) (AlwaysInit)
	int                                                Bonding;                                                  // 0x0024(0x0004) (AlwaysInit)
	struct FQWord                                      DurationTime;                                             // 0x0028(0x0008) (AlwaysInit)
	struct FString                                     MakerName;                                                // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IsExpressMakerName;                                       // 0x0040(0x0004) (AlwaysInit)
	struct FQWord                                      TradingAbleDurationTime;                                  // 0x0044(0x0008) (AlwaysInit)
	unsigned char                                      PotentialLevel;                                           // 0x004C(0x0001) (AlwaysInit)
	unsigned char                                      UpgradeLevel;                                             // 0x004D(0x0001) (AlwaysInit)
	unsigned char                                      EvolutionLevel;                                           // 0x004E(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	int                                                Rune_Item_CId_2;                                          // 0x0050(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_3;                                          // 0x0054(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_4;                                          // 0x0058(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_5;                                          // 0x005C(0x0004) (AlwaysInit)
	int                                                Durability;                                               // 0x0060(0x0004) (AlwaysInit)
	int                                                Max_Durability;                                           // 0x0064(0x0004) (AlwaysInit)
	int                                                Fixed_Max_Durability;                                     // 0x0068(0x0004) (AlwaysInit)
	TArray<struct FItemEvolutionAdditionalEffectData>  ItemEvolutionAdditionalEffectData;                        // 0x006C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MPFExtractionInfo;                                        // 0x007C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildMemberData
// 0x0050
struct FGuildMemberData
{
	int                                                IsLogin;                                                  // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Level;                                                    // 0x0014(0x0004) (AlwaysInit)
	int                                                Class;                                                    // 0x0018(0x0004) (AlwaysInit)
	int                                                Grade;                                                    // 0x001C(0x0004) (AlwaysInit)
	struct FString                                     Message;                                                  // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	struct FQWord                                      LastLoginDate;                                            // 0x0030(0x0008) (AlwaysInit)
	int                                                LocationCId;                                              // 0x0038(0x0004) (AlwaysInit)
	float                                              Influence;                                                // 0x003C(0x0004) (AlwaysInit)
	struct FQWord                                      LastWeeklyCalculateInfluence;                             // 0x0040(0x0008) (AlwaysInit)
	struct FQWord                                      TotalAccumulateInfluence;                                 // 0x0048(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ContentInfoData
// 0x0034
struct FContentInfoData
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	struct FString                                     CodeName;                                                 // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     LocalizedName;                                            // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCCommonConstantValueInfoData
// 0x00B0 (0x00E4 - 0x0034)
struct FPCCommonConstantValueInfoData : public FContentInfoData
{
	float                                              RunForwardSpeed;                                          // 0x0034(0x0004)
	float                                              RunBackwardSpeed;                                         // 0x0038(0x0004)
	float                                              WalkForwardSpeed;                                         // 0x003C(0x0004)
	float                                              WalkBackwardSpeed;                                        // 0x0040(0x0004)
	float                                              FullRunForwardSpeed;                                      // 0x0044(0x0004)
	float                                              SwimForwardSpeed;                                         // 0x0048(0x0004)
	float                                              SwimBackwardSpeed;                                        // 0x004C(0x0004)
	float                                              FlyingForwardSpeed;                                       // 0x0050(0x0004)
	float                                              FlyingBackwardSpeed;                                      // 0x0054(0x0004)
	float                                              JumpAbility;                                              // 0x0058(0x0004)
	float                                              MaxStepHeight;                                            // 0x005C(0x0004)
	float                                              GradeAbility;                                             // 0x0060(0x0004)
	int                                                LumenaPartySummon;                                        // 0x0064(0x0004)
	int                                                PCLevelVisibleTOD;                                        // 0x0068(0x0004)
	int                                                PCMaxLevel;                                               // 0x006C(0x0004)
	int                                                LumenaDungeonEntrance;                                    // 0x0070(0x0004)
	int                                                MaxSpLevel;                                               // 0x0074(0x0004)
	int                                                DefaultCompanionSlot;                                     // 0x0078(0x0004)
	int                                                FullCharacterSlotCount;                                   // 0x007C(0x0004)
	int                                                BasicCharacterSlotCount;                                  // 0x0080(0x0004)
	TArray<TEnumAsByte<ECEClassType>>                  DungeonPartyBasePositionTanker;                           // 0x0084(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEClassType>>                  DungeonPartyBasePositionDealer;                           // 0x0094(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEClassType>>                  DungeonPartyBasePositionHealer;                           // 0x00A4(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEClassType>>                  DungeonPartyPositionTanker;                               // 0x00B4(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEClassType>>                  DungeonPartyPositionDealer;                               // 0x00C4(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEClassType>>                  DungeonPartyPositionHealer;                               // 0x00D4(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.RestrictRealmInfo
// 0x0008
struct FRestrictRealmInfo
{
	int                                                Realm;                                                    // 0x0000(0x0004) (AlwaysInit)
	int                                                Reason;                                                   // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.FieldRaidMapInfo
// 0x0044
struct FFieldRaidMapInfo
{
	int                                                RaidCid;                                                  // 0x0000(0x0004)
	struct FString                                     Title;                                                    // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                WorldMapCId;                                              // 0x0024(0x0004)
	struct FVector                                     Location;                                                 // 0x0028(0x000C)
	TArray<struct FVector>                             LocationList;                                             // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.MapIconInfoBase
// 0x001C
struct FMapIconInfoBase
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FVector                                     WorldLocation;                                            // 0x0010(0x000C)
};

// ScriptStruct BLGame.ABLDef.PlayerDeadBodyMapIconInfo
// 0x0000 (0x001C - 0x001C)
struct FPlayerDeadBodyMapIconInfo : public FMapIconInfoBase
{

};

// ScriptStruct BLGame.ABLDef.DeathPointInfo
// 0x0010
struct FDeathPointInfo
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C)
	float                                              RemainTime;                                               // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLDef.UnderAttackInfo
// 0x0014
struct FUnderAttackInfo
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C)
	float                                              BlinkTime;                                                // 0x000C(0x0004)
	int                                                ServerID;                                                 // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLDef.PropMapIconInfo
// 0x0018 (0x0034 - 0x001C)
struct FPropMapIconInfo : public FMapIconInfoBase
{
	int                                                Prop_Cid;                                                 // 0x001C(0x0004)
	TEnumAsByte<ECEPropInteractType>                   PropInteractType;                                         // 0x0020(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0021(0x0003) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0024(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.NpcMapIconInfo
// 0x0018 (0x0034 - 0x001C)
struct FNpcMapIconInfo : public FMapIconInfoBase
{
	int                                                NPC_Cid;                                                  // 0x001C(0x0004)
	TEnumAsByte<ECENPCCategory>                        NPCType;                                                  // 0x0020(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0021(0x0003) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.PartyMapIconInfo
// 0x0004 (0x0020 - 0x001C)
struct FPartyMapIconInfo : public FMapIconInfoBase
{
	unsigned long                                      bOtherChannel : 1;                                        // 0x001C(0x0004)
	unsigned long                                      IsLogout : 1;                                             // 0x001C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BLBuyPrice
// 0x0008
struct FBLBuyPrice
{
	TEnumAsByte<ECoinType>                             PriceType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Price;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ItemUseEffect
// 0x001C
struct FItemUseEffect
{
	TEnumAsByte<EItemUseEffectType>                    Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Id;                                                       // 0x0004(0x0004)
	int                                                Amount;                                                   // 0x0008(0x0004)
	TArray<int>                                        DropTableIDList;                                          // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AddMPFEffect
// 0x0020
struct FAddMPFEffect
{
	TEnumAsByte<EAddMPFType>                           Type;                                                     // 0x0000(0x0001)
	TEnumAsByte<ECECompanionGradeType>                 Grade;                                                    // 0x0001(0x0001)
	TEnumAsByte<ECEFellowVocationType>                 FellowVocation;                                           // 0x0002(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	int                                                MPFEffectCid;                                             // 0x0004(0x0004)
	int                                                Level;                                                    // 0x0008(0x0004)
	int                                                RareSkillCId;                                             // 0x000C(0x0004)
	int                                                EpicSkillCId;                                             // 0x0010(0x0004)
	int                                                LegendarySkillCId;                                        // 0x0014(0x0004)
	int                                                GradeUpCount;                                             // 0x0018(0x0004)
	int                                                MaxAdditionalGradeUpCount;                                // 0x001C(0x0004)
};

// ScriptStruct BLGame.ABLDef.UseItemTargetInfo
// 0x0018
struct FUseItemTargetInfo
{
	TEnumAsByte<EItemUsableTargetType>                 TargetType;                                               // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Dist;                                                     // 0x0004(0x0004)
	TArray<int>                                        TargetCidList;                                            // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ItemEquipEffect
// 0x0008
struct FItemEquipEffect
{
	TEnumAsByte<EItemEquipEffectType>                  Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Cid;                                                      // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PotentialMaterial
// 0x000C
struct FPotentialMaterial
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                Amount;                                                   // 0x0004(0x0004)
	float                                              Chance;                                                   // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ItemIdAndAmountInfo
// 0x0008
struct FItemIdAndAmountInfo
{
	int                                                ItemCid;                                                  // 0x0000(0x0004)
	int                                                Amount;                                                   // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MPFRechargeFatigueInfo
// 0x0008
struct FMPFRechargeFatigueInfo
{
	TEnumAsByte<ECECompanionType>                      TargetType;                                               // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              RechargeAmount;                                           // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MPGradeUpInfo
// 0x000C
struct FMPGradeUpInfo
{
	TEnumAsByte<ECECompanionGradeType>                 Grade;                                                    // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              SuccessCoefficient;                                       // 0x0004(0x0004)
	float                                              FailMileage;                                              // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MPCapsuleDataInfo
// 0x0008
struct FMPCapsuleDataInfo
{
	TEnumAsByte<ECECompanionType>                      TargetType;                                               // 0x0000(0x0001)
	TEnumAsByte<ECECompanionGradeType>                 Grade;                                                    // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                Cid;                                                      // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ItemInfoData
// 0x0208 (0x023C - 0x0034)
struct FItemInfoData : public FContentInfoData
{
	TEnumAsByte<ECEItemEquipCategory>                  ItemEquipCategory;                                        // 0x0034(0x0001)
	unsigned char                                      Usable;                                                   // 0x0035(0x0001)
	unsigned char                                      RegistrableActionBar;                                     // 0x0036(0x0001)
	TEnumAsByte<ECEItemCategoryType>                   CategoryType;                                             // 0x0037(0x0001)
	TEnumAsByte<ECEItemEquipSlotType>                  EquipSlotType;                                            // 0x0038(0x0001)
	TEnumAsByte<ECEItemBondingType>                    BondingType;                                              // 0x0039(0x0001)
	TEnumAsByte<ECEItemWeightCategory>                 WeightCategory;                                           // 0x003A(0x0001)
	TEnumAsByte<ECEItemGradeType>                      Grade;                                                    // 0x003B(0x0001)
	TEnumAsByte<ECERealmType>                          UsableRealm;                                              // 0x003C(0x0001)
	unsigned char                                      Destroyable;                                              // 0x003D(0x0001)
	unsigned char                                      EnableSale;                                               // 0x003E(0x0001)
	unsigned char                                      IsEquipUpgrade;                                           // 0x003F(0x0001)
	TEnumAsByte<ECETabletMaterialCategoryType>         TabletMaterialCategory;                                   // 0x0040(0x0001)
	TEnumAsByte<ECECompanionGradeType>                 GradeUpSpeicialIngredientGrade;                           // 0x0041(0x0001)
	unsigned char                                      IsDesynthesizable;                                        // 0x0042(0x0001)
	TEnumAsByte<ECECompanionGradeType>                 MPSkillChangeGrade;                                       // 0x0043(0x0001)
	TEnumAsByte<ECERuneType>                           RuneType;                                                 // 0x0044(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0045(0x0003) MISSED OFFSET
	int                                                IconIndex;                                                // 0x0048(0x0004)
	int                                                UsableMinLv;                                              // 0x004C(0x0004)
	int                                                UsableMaxLv;                                              // 0x0050(0x0004)
	TArray<TEnumAsByte<ECERaceType>>                   UsableRace;                                               // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEClassType>>                  UsableClass;                                              // 0x0064(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEClassType>>                  EquipRecommendClass;                                      // 0x0074(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SellPrice;                                                // 0x0084(0x0004)
	TArray<struct FBLBuyPrice>                         BuyPrices;                                                // 0x0088(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FItemUseEffect>                      ItemUseEffects;                                           // 0x0098(0x0010) (AlwaysInit, NeedCtorLink)
	struct FAddMPFEffect                               MPFEffects;                                               // 0x00A8(0x0020) (AlwaysInit)
	int                                                UseSkill;                                                 // 0x00C8(0x0004)
	struct FString                                     TooltipTemplate;                                          // 0x00CC(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                questId;                                                  // 0x00DC(0x0004)
	TArray<struct FUseItemTargetInfo>                  UsableTargetInfoList;                                     // 0x00E0(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                OnUseSkillCid;                                            // 0x00F0(0x0004)
	struct FString                                     Description_FA;                                           // 0x00F4(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Stackable;                                                // 0x0104(0x0004)
	int                                                DurationDays;                                             // 0x0108(0x0004)
	int                                                DurationHours;                                            // 0x010C(0x0004)
	int                                                DurationMinutes;                                          // 0x0110(0x0004)
	TArray<unsigned char>                              GatherCategoryInfo;                                       // 0x0114(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                LegendOptionPool;                                         // 0x0124(0x0004)
	int                                                StatsLink;                                                // 0x0128(0x0004)
	TArray<struct FItemEquipEffect>                    EquipEffect;                                              // 0x012C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                MaxPotentialLevel;                                        // 0x013C(0x0004)
	TArray<struct FPotentialMaterial>                  UpgradePotentialInfo;                                     // 0x0140(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        CinisByPotentialLevel;                                    // 0x0150(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              CinisBonusModifier;                                       // 0x0160(0x0004)
	TArray<int>                                        GoldByPotentialLevel;                                     // 0x0164(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              GoldBonusModifier;                                        // 0x0174(0x0004)
	int                                                SetItemCid;                                               // 0x0178(0x0004)
	int                                                RuneCid;                                                  // 0x017C(0x0004)
	int                                                RuneLevel;                                                // 0x0180(0x0004)
	int                                                SocketSetCid;                                             // 0x0184(0x0004)
	int                                                MaxHoldingCount;                                          // 0x0188(0x0004)
	TArray<struct FItemIdAndAmountInfo>                EquipUpgradeInfo;                                         // 0x018C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                AddSkillPoint;                                            // 0x019C(0x0004)
	int                                                AddGradeUpCount;                                          // 0x01A0(0x0004)
	struct FMPFRechargeFatigueInfo                     MPFRechargeFatigueInfo;                                   // 0x01A4(0x0008)
	int                                                RepaireCost;                                              // 0x01AC(0x0004) (AlwaysInit)
	TArray<int>                                        RecoverMaterialCidList;                                   // 0x01B0(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                MaxUpgrade_Evolution0;                                    // 0x01C0(0x0004) (AlwaysInit)
	int                                                MaxUpgrade_Evolution1;                                    // 0x01C4(0x0004) (AlwaysInit)
	int                                                MaxUpgrade_Evolution2;                                    // 0x01C8(0x0004) (AlwaysInit)
	int                                                MaxUpgrade_Evolution3;                                    // 0x01CC(0x0004) (AlwaysInit)
	float                                              ItemLv_Evolution0;                                        // 0x01D0(0x0004) (AlwaysInit)
	float                                              ItemLv_Evolution1;                                        // 0x01D4(0x0004) (AlwaysInit)
	float                                              ItemLv_Evolution2;                                        // 0x01D8(0x0004) (AlwaysInit)
	float                                              ItemLv_Evolution3;                                        // 0x01DC(0x0004) (AlwaysInit)
	int                                                StatsUpgradeInfoCid_Evolution0;                           // 0x01E0(0x0004) (AlwaysInit)
	int                                                StatsUpgradeInfoCid_Evolution1;                           // 0x01E4(0x0004) (AlwaysInit)
	int                                                StatsUpgradeInfoCid_Evolution2;                           // 0x01E8(0x0004) (AlwaysInit)
	int                                                StatsUpgradeInfoCid_Evolution3;                           // 0x01EC(0x0004) (AlwaysInit)
	int                                                LevelUpgradeInfoCid0;                                     // 0x01F0(0x0004) (AlwaysInit)
	int                                                LevelUpgradeInfoCid1;                                     // 0x01F4(0x0004) (AlwaysInit)
	int                                                LevelUpgradeInfoCid2;                                     // 0x01F8(0x0004) (AlwaysInit)
	int                                                LevelUpgradeInfoCid3;                                     // 0x01FC(0x0004) (AlwaysInit)
	int                                                MaxRuneSocketCount;                                       // 0x0200(0x0004) (AlwaysInit)
	int                                                MaxWeaponOptionCount;                                     // 0x0204(0x0004) (AlwaysInit)
	struct FMPGradeUpInfo                              MPGradeUpInfo;                                            // 0x0208(0x000C)
	float                                              MPExpUpPlusCoeffiecient;                                  // 0x0214(0x0004)
	struct FMPCapsuleDataInfo                          MPCapsuleDataInfo;                                        // 0x0218(0x0008)
	int                                                MPCostumeLookInfoId;                                      // 0x0220(0x0004)
	int                                                MaxEquipEvolution;                                        // 0x0224(0x0004)
	TArray<struct FItemIdAndAmountInfo>                EquipEvolutionInfo;                                       // 0x0228(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                GearScore;                                                // 0x0238(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.QuestObjectiveProgressInfo
// 0x0008
struct FQuestObjectiveProgressInfo
{
	int                                                Counter;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                objectiveFlag;                                            // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.QuestProgressInfo
// 0x0030
struct FQuestProgressInfo
{
	int                                                questId;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                isCompleted;                                              // 0x0004(0x0004) (AlwaysInit)
	int                                                isFailed;                                                 // 0x0008(0x0004) (AlwaysInit)
	int                                                remainTimeInSeconds;                                      // 0x000C(0x0004) (AlwaysInit)
	TArray<struct FQuestObjectiveProgressInfo>         essencialObjectives;                                      // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestObjectiveProgressInfo>         selectiveObjectives;                                      // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.QuestItemTargetInfo
// 0x0005
struct FQuestItemTargetInfo
{
	int                                                TargetCid;                                                // 0x0000(0x0004)
	TEnumAsByte<EItemUsableTargetType>                 TargetType;                                               // 0x0004(0x0001)
};

// ScriptStruct BLGame.ABLDef.QuestItemInfo
// 0x004C
struct FQuestItemInfo
{
	int                                                ItemCid;                                                  // 0x0000(0x0004)
	unsigned long                                      bTargetSelf : 1;                                          // 0x0004(0x0004)
	unsigned long                                      bActivated : 1;                                           // 0x0004(0x0004)
	int                                                ActivatedTargetSid;                                       // 0x0008(0x0004)
	TArray<struct FQuestItemTargetInfo>                QuestItemTargetNPCList;                                   // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestItemTargetInfo>                QuestItemTargetNPCFactionList;                            // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestItemTargetInfo>                QuestItemTargetPropList;                                  // 0x002C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        QuestItemTargetTerritoryList;                             // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.QuestManager.OngoingQuestObjectiveInfo
// 0x001C
struct FOngoingQuestObjectiveInfo
{
	int                                                COUNT;                                                    // 0x0000(0x0004)
	int                                                MaxCount;                                                 // 0x0004(0x0004)
	TEnumAsByte<EQuestObjectiveStatus>                 ObjectiveStatus;                                          // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	TArray<struct FQuestItemInfo>                      QuestItemInfoList;                                        // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.QuestManager.OngoingQuestInfo
// 0x0094 (0x00C4 - 0x0030)
struct FOngoingQuestInfo : public FQuestProgressInfo
{
	float                                              CountDownSeconds;                                         // 0x0030(0x0004)
	TArray<struct FPointer>                            ObjectiveAreas;                                           // 0x0034(0x0010) (Native, AlwaysInit)
	TArray<struct FPointer>                            Rewarder;                                                 // 0x0044(0x0010) (Native, AlwaysInit)
	unsigned long                                      bNaviOn : 1;                                              // 0x0054(0x0004)
	unsigned long                                      bPathOn : 1;                                              // 0x0054(0x0004)
	struct FQuestItemInfo                              QuestItem;                                                // 0x0058(0x004C) (NeedCtorLink)
	TArray<int>                                        QuestItemObjectiveIndexList;                              // 0x00A4(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FOngoingQuestObjectiveInfo>          OngoingObjectiveInfo;                                     // 0x00B4(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.InventoryItemData
// 0x0098
struct FInventoryItemData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                Amount;                                                   // 0x0008(0x0004) (AlwaysInit)
	struct Fword                                       CustomCount;                                              // 0x000C(0x0004) (AlwaysInit)
	TArray<struct FStatData>                           StatDataList;                                             // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                LegendOptCid;                                             // 0x0020(0x0004) (AlwaysInit)
	int                                                Bonding;                                                  // 0x0024(0x0004) (AlwaysInit)
	struct FQWord                                      DurationTime;                                             // 0x0028(0x0008) (AlwaysInit)
	struct FString                                     MakerName;                                                // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IsExpressMakerName;                                       // 0x0040(0x0004) (AlwaysInit)
	struct FQWord                                      TradingAbleDurationTime;                                  // 0x0044(0x0008) (AlwaysInit)
	unsigned char                                      PotentialLevel;                                           // 0x004C(0x0001) (AlwaysInit)
	unsigned char                                      UpgradeLevel;                                             // 0x004D(0x0001) (AlwaysInit)
	unsigned char                                      EvolutionLevel;                                           // 0x004E(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	int                                                Rune_Item_CId_2;                                          // 0x0050(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_3;                                          // 0x0054(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_4;                                          // 0x0058(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_5;                                          // 0x005C(0x0004) (AlwaysInit)
	int                                                Durability;                                               // 0x0060(0x0004) (AlwaysInit)
	int                                                Max_Durability;                                           // 0x0064(0x0004) (AlwaysInit)
	int                                                Fixed_Max_Durability;                                     // 0x0068(0x0004) (AlwaysInit)
	TArray<struct FItemEvolutionAdditionalEffectData>  ItemEvolutionAdditionalEffectData;                        // 0x006C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MPFExtractionInfo;                                        // 0x007C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                TabIndex;                                                 // 0x008C(0x0004) (AlwaysInit)
	int                                                SlotIndex;                                                // 0x0090(0x0004) (AlwaysInit)
	int                                                EquipSlotIndex;                                           // 0x0094(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CustomizeData
// 0x0010
struct FCustomizeData
{
	TArray<unsigned char>                              customizingValue;                                         // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.SelectPCData
// 0x0074
struct FSelectPCData
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Race;                                                     // 0x0010(0x0004) (AlwaysInit)
	int                                                Class;                                                    // 0x0014(0x0004) (AlwaysInit)
	int                                                Gender;                                                   // 0x0018(0x0004) (AlwaysInit)
	int                                                IsAbleTutorial;                                           // 0x001C(0x0004) (AlwaysInit)
	int                                                Level;                                                    // 0x0020(0x0004) (AlwaysInit)
	int                                                LastLocationCId;                                          // 0x0024(0x0004) (AlwaysInit)
	struct FQWord                                      LogoutTime;                                               // 0x0028(0x0008) (AlwaysInit)
	TArray<struct FEquipedItemData>                    EquipedItemDataList;                                      // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	struct FCustomizeData                              CustomizeData;                                            // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     GuildName;                                                // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                GuildGrade;                                               // 0x0060(0x0004) (AlwaysInit)
	int                                                ShowCostume;                                              // 0x0064(0x0004) (AlwaysInit)
	int                                                LookChangeType;                                           // 0x0068(0x0004) (AlwaysInit)
	struct FQWord                                      LookChangeExpireTime;                                     // 0x006C(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CASPlayerInfo
// 0x0024
struct FCASPlayerInfo
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned char                                      Race;                                                     // 0x0010(0x0001) (AlwaysInit)
	unsigned char                                      Class;                                                    // 0x0011(0x0001) (AlwaysInit)
	unsigned char                                      Gender;                                                   // 0x0012(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0013(0x0001) MISSED OFFSET
	int                                                Level;                                                    // 0x0014(0x0004) (AlwaysInit)
	int                                                LastLocationCId;                                          // 0x0018(0x0004) (AlwaysInit)
	struct FQWord                                      LogoutTime;                                               // 0x001C(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CAWorldServerInfo
// 0x0054
struct FCAWorldServerInfo
{
	int                                                Id;                                                       // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     IP;                                                       // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Port;                                                     // 0x0024(0x0004) (AlwaysInit)
	int                                                busyRate;                                                 // 0x0028(0x0004) (AlwaysInit)
	unsigned long                                      isLastAccessServer : 1;                                   // 0x002C(0x0004) (AlwaysInit)
	int                                                maxUserCount;                                             // 0x0030(0x0004) (AlwaysInit)
	TArray<unsigned char>                              restrictRealmList;                                        // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FCASPlayerInfo>                      PlayerList;                                               // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.CustomizeUnit
// 0x0008
struct FCustomizeUnit
{
	TEnumAsByte<EBoneDeformPart>                       CustomizeBodyType;                                        // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Value;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLDef.NewCustomizeData
// 0x0010
struct FNewCustomizeData
{
	TArray<struct FCustomizeUnit>                      CustomizeValues;                                          // 0x0000(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.BlessLocalPlayer.CharacterInfo
// 0x00C8
struct FCharacterInfo
{
	int                                                PCCid;                                                    // 0x0000(0x0004)
	int                                                Level;                                                    // 0x0004(0x0004)
	struct FString                                     Name;                                                     // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                LocationCId;                                              // 0x0018(0x0004)
	struct FQWord                                      LogoutTime;                                               // 0x001C(0x0008)
	unsigned long                                      IsAbleTutorial : 1;                                       // 0x0024(0x0004)
	struct FNewCustomizeData                           HeadCustomization;                                        // 0x0028(0x0010) (NeedCtorLink)
	struct FNewCustomizeData                           BodyCustomization;                                        // 0x0038(0x0010) (NeedCtorLink)
	TArray<TEnumAsByte<EFaceMorphPart>>                FaceMorphData;                                            // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FEquipedItemData>                    EquipedItems;                                             // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                CostumeShowConfig;                                        // 0x0068(0x0004)
	struct FString                                     GuildName;                                                // 0x006C(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<ECEGuildGradeType>                     GuildGrade;                                               // 0x007C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x007D(0x0003) MISSED OFFSET
	int                                                AppearanceChangeType;                                     // 0x0080(0x0004)
	struct FQWord                                      AppearanceChangeExpireTime;                               // 0x0084(0x0008)
	class UPCAsset*                                    PawnAsset;                                                // 0x008C(0x0008)
	TArray<class UItemAsset*>                          ItemAssetCaches;                                          // 0x0094(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<class UBLEquipmentItemEquipInfo*>           EquipementAssetCaches;                                    // 0x00A4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FCustomizeData                              CustomizeData;                                            // 0x00B4(0x0010) (NeedCtorLink)
	unsigned long                                      bUseableSlot : 1;                                         // 0x00C4(0x0004)
	unsigned long                                      bUsed : 1;                                                // 0x00C4(0x0004)
	unsigned long                                      bSlotAni : 1;                                             // 0x00C4(0x0004)
};

// ScriptStruct BLGame.ABLDef.SkillCostInfo
// 0x000C
struct FSkillCostInfo
{
	TEnumAsByte<ECEParamType>                          Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Value;                                                    // 0x0004(0x0004)
	float                                              Percent;                                                  // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLDef.SkillModifiedCostInfo
// 0x0014
struct FSkillModifiedCostInfo
{
	int                                                SkillCid;                                                 // 0x0000(0x0004)
	TArray<struct FSkillCostInfo>                      Costs;                                                    // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.InvokableElementInfo
// 0x0008
struct FInvokableElementInfo
{
	TEnumAsByte<ECECombatElementType>                  Type;                                                     // 0x0000(0x0001)
	TEnumAsByte<ECECompareOperatorType>                Operator;                                                 // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                COUNT;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLDef.SkillModifiedInvokableCombatFlairInfo
// 0x0014
struct FSkillModifiedInvokableCombatFlairInfo
{
	int                                                SkillCid;                                                 // 0x0000(0x0004)
	TArray<struct FInvokableElementInfo>               InvokableElements;                                        // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.PendingMessageInfo
// 0x0028
struct FPendingMessageInfo
{
	struct FString                                     FormattedSystemMessage;                                   // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<ECESystemMessageDisplayType>           DisplayType;                                              // 0x0010(0x0001)
	TEnumAsByte<ECESystemMessageOverlayType>           OverlayType;                                              // 0x0011(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0012(0x0002) MISSED OFFSET
	float                                              OverlayTime;                                              // 0x0014(0x0004)
	TEnumAsByte<ECESystemMessagePendingType>           PendingType;                                              // 0x0018(0x0001)
	TEnumAsByte<ECESystemMessageChatChannelType>       ChatChannelType;                                          // 0x0019(0x0001)
	unsigned char                                      UnknownData01[0x2];                                       // 0x001A(0x0002) MISSED OFFSET
	int                                                SystemMessageCid;                                         // 0x001C(0x0004)
	class UGFxObject*                                  OverlayData;                                              // 0x0020(0x0008)
};

// ScriptStruct BLGame.ABLSDLTypes.ContentTokenData
// 0x000C
struct FContentTokenData
{
	int                                                Type;                                                     // 0x0000(0x0004) (AlwaysInit)
	struct FQWord                                      Token;                                                    // 0x0004(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.BLEmitterPool.BLEmitterRequestInfo
// 0x0014
struct FBLEmitterRequestInfo
{
	class UBLBroadwayPlayer*                           Owner;                                                    // 0x0000(0x0008)
	int                                                instID;                                                   // 0x0008(0x0004)
	class UParticleSystemComponent*                    PSC;                                                      // 0x000C(0x0008) (ExportObject, Component, EditInline)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TamingResultData
// 0x0008
struct FTamingResultData
{
	TEnumAsByte<ETamingType>                           Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Cid;                                                      // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.HideConditionData
// 0x000C
struct FHideConditionData
{
	TEnumAsByte<ECEQuestConditionType>                 ConditionType;                                            // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Quest_CID;                                                // 0x0004(0x0004)
	int                                                ObjectiveIndex;                                           // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.NPCInfoData
// 0x0090 (0x00C4 - 0x0034)
struct FNPCInfoData : public FContentInfoData
{
	TEnumAsByte<ECENPCCategory>                        Npc_Category;                                             // 0x0034(0x0001)
	TEnumAsByte<ECENPCGradeType>                       Npc_Grade;                                                // 0x0035(0x0001)
	TEnumAsByte<ECENPCProductionCategory>              Npc_Production_Category;                                  // 0x0036(0x0001)
	TEnumAsByte<ECEAggressiveType>                     AggressiveType;                                           // 0x0037(0x0001)
	unsigned char                                      ValidationCheck;                                          // 0x0038(0x0001)
	TEnumAsByte<ECENPCHideCategory>                    HideCategory;                                             // 0x0039(0x0001)
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x003A(0x0001)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x003B(0x0001)
	unsigned char                                      ApplyBuild;                                               // 0x003C(0x0001)
	TEnumAsByte<ECENPCShowConditionPhaseType>          ShowConditionalPhaseType;                                 // 0x003D(0x0001)
	unsigned char                                      bOccupationAggrolist;                                     // 0x003E(0x0001)
	TEnumAsByte<ECENpcMeshType>                        MeshType;                                                 // 0x003F(0x0001)
	unsigned char                                      bShowAttackMessage;                                       // 0x0040(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	struct FString                                     LocalizedTitle;                                           // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              CollisionCylinderRadius;                                  // 0x0054(0x0004)
	float                                              CollisionCylinderHeight;                                  // 0x0058(0x0004)
	float                                              BaseRunForwardSpeed;                                      // 0x005C(0x0004)
	float                                              BaseRunBackwardSpeed;                                     // 0x0060(0x0004)
	float                                              BaseWalkForwardSpeed;                                     // 0x0064(0x0004)
	float                                              WeaponAttackPeriod;                                       // 0x0068(0x0004)
	float                                              MaxStepHeight;                                            // 0x006C(0x0004)
	int                                                Faction;                                                  // 0x0070(0x0004)
	TArray<int>                                        SkillList;                                                // 0x0074(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Level;                                                    // 0x0084(0x0004)
	float                                              AudibleRange;                                             // 0x0088(0x0004)
	TArray<struct FTamingResultData>                   TamingResultList;                                         // 0x008C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        TamingDropTableCidList;                                   // 0x009C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                TamingChanceHpCid;                                        // 0x00AC(0x0004)
	int                                                RequireLumenaAddLooting;                                  // 0x00B0(0x0004)
	TArray<struct FHideConditionData>                  HideConditionList;                                        // 0x00B4(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.PawnStateData
// 0x0014
struct FPawnStateData
{
	int                                                ConditionPhase;                                           // 0x0000(0x0004) (AlwaysInit)
	int                                                IsAlive;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                IsSheathe;                                                // 0x0008(0x0004) (AlwaysInit)
	int                                                StateSituation;                                           // 0x000C(0x0004) (AlwaysInit)
	int                                                StatePose;                                                // 0x0010(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PawnParamData
// 0x0048
struct FPawnParamData
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Race;                                                     // 0x0010(0x0004) (AlwaysInit)
	int                                                Class;                                                    // 0x0014(0x0004) (AlwaysInit)
	int                                                Realm;                                                    // 0x0018(0x0004) (AlwaysInit)
	int                                                Gender;                                                   // 0x001C(0x0004) (AlwaysInit)
	int                                                Level;                                                    // 0x0020(0x0004) (AlwaysInit)
	int                                                LevelExpRangeMin;                                         // 0x0024(0x0004) (AlwaysInit)
	int                                                LevelExpRangeMax;                                         // 0x0028(0x0004) (AlwaysInit)
	int                                                Exp;                                                      // 0x002C(0x0004) (AlwaysInit)
	int                                                HP;                                                       // 0x0030(0x0004) (AlwaysInit)
	int                                                MP;                                                       // 0x0034(0x0004) (AlwaysInit)
	int                                                Energy;                                                   // 0x0038(0x0004) (AlwaysInit)
	int                                                MaxHP;                                                    // 0x003C(0x0004) (AlwaysInit)
	int                                                MaxMP;                                                    // 0x0040(0x0004) (AlwaysInit)
	int                                                MaxEnergy;                                                // 0x0044(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PawnMovePhysicsData
// 0x0024
struct FPawnMovePhysicsData
{
	float                                              RunForwardSpeed;                                          // 0x0000(0x0004) (AlwaysInit)
	float                                              RunBackwardSpeed;                                         // 0x0004(0x0004) (AlwaysInit)
	float                                              WalkForwardSpeed;                                         // 0x0008(0x0004) (AlwaysInit)
	float                                              WalkBackwardSpeed;                                        // 0x000C(0x0004) (AlwaysInit)
	float                                              FullRunForwardSpeed;                                      // 0x0010(0x0004) (AlwaysInit)
	float                                              SwimForwardSpeed;                                         // 0x0014(0x0004) (AlwaysInit)
	float                                              SwimBackwardSpeed;                                        // 0x0018(0x0004) (AlwaysInit)
	float                                              FlyingForwardSpeed;                                       // 0x001C(0x0004) (AlwaysInit)
	float                                              FlyingBackwardSpeed;                                      // 0x0020(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AbnormalStatusData
// 0x0024
struct FAbnormalStatusData
{
	int                                                Cid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Applied;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                CasterSID;                                                // 0x0008(0x0004) (AlwaysInit)
	int                                                TargetSId;                                                // 0x000C(0x0004) (AlwaysInit)
	float                                              DurationSeconds;                                          // 0x0010(0x0004) (AlwaysInit)
	int                                                StackCount;                                               // 0x0014(0x0004) (AlwaysInit)
	float                                              RemainingDurationSeconds;                                 // 0x0018(0x0004) (AlwaysInit)
	struct FQWord                                      AttachTime;                                               // 0x001C(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.NPCData
// 0x00D4
struct FNPCData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0008(0x000C) (AlwaysInit)
	struct FRotator                                    Rotation;                                                 // 0x0014(0x000C) (AlwaysInit)
	struct FPawnStateData                              PawnStateData;                                            // 0x0020(0x0014) (AlwaysInit)
	struct FPawnParamData                              PawnParamData;                                            // 0x0034(0x0048) (AlwaysInit, NeedCtorLink)
	struct FPawnMovePhysicsData                        PawnMovePhysicsData;                                      // 0x007C(0x0024) (AlwaysInit)
	TArray<struct FAbnormalStatusData>                 AbnormalStatusDataList;                                   // 0x00A0(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IsEnemy;                                                  // 0x00B0(0x0004) (AlwaysInit)
	TArray<int>                                        AuraList;                                                 // 0x00B4(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IsVisible;                                                // 0x00C4(0x0004) (AlwaysInit)
	int                                                State;                                                    // 0x00C8(0x0004) (AlwaysInit)
	int                                                OccupierSid;                                              // 0x00CC(0x0004) (AlwaysInit)
	int                                                PolymorphCid;                                             // 0x00D0(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.PCInfoKey
// 0x0004
struct FPCInfoKey
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0000(0x0001) (Edit)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0001(0x0001) (Edit)
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0002(0x0001) (Edit)
	TEnumAsByte<ECERaceType>                           Dummy1;                                                   // 0x0003(0x0001)
};

// ScriptStruct BLGame.BLGameRes.VehicleMountResource
// 0x0008
struct FVehicleMountResource
{
	class UAnimTree*                                   AnimationTree;                                            // 0x0000(0x0008) (Edit)
};

// ScriptStruct BLGame.ABLDef.WhispyHairData
// 0x000C
struct FWhispyHairData
{
	TEnumAsByte<ECERaceType>                           Race;                                                     // 0x0000(0x0001) (Edit)
	TEnumAsByte<ECEGenderType>                         Gender;                                                   // 0x0001(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	class UHairAsset*                                  HairAsset;                                                // 0x0004(0x0008) (Edit)
};

// ScriptStruct BLGame.BLGameRes.ParentBufferMICInfo
// 0x000C
struct FParentBufferMICInfo
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0000(0x0001) (Edit)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0001(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	class UMaterialInstanceConstant*                   ParentBufferMIC;                                          // 0x0004(0x0008) (Edit)
};

// ScriptStruct BLGame.BLGameViewportClient.MouseClientInfo
// 0x0005
struct FMouseClientInfo
{
	unsigned long                                      bIsPickable : 1;                                          // 0x0000(0x0004)
	unsigned long                                      bIsVisible : 1;                                           // 0x0000(0x0004)
	unsigned long                                      bLMouseButtonDown : 1;                                    // 0x0000(0x0004)
	unsigned long                                      bRMouseButtonDown : 1;                                    // 0x0000(0x0004)
	TEnumAsByte<ECursorType>                           Type;                                                     // 0x0004(0x0001)
};

// ScriptStruct BLGame.BLGameViewportClient.PortraitViewRendererStruct
// 0x001C
struct FPortraitViewRendererStruct
{
	struct FName                                       Name;                                                     // 0x0000(0x0008)
	TEnumAsByte<ERenderTargetName>                     RenderTargetNameIndex;                                    // 0x0008(0x0001)
	TEnumAsByte<EUIName>                               UIName;                                                   // 0x0009(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x000A(0x0002) MISSED OFFSET
	struct FString                                     RenderTargetName;                                         // 0x000C(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildWarHistoryData
// 0x0020
struct FGuildWarHistoryData
{
	struct FQWord                                      declareDate;                                              // 0x0000(0x0008) (AlwaysInit)
	struct FString                                     hostileGuildName;                                         // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Result;                                                   // 0x0018(0x0004) (AlwaysInit)
	int                                                resultReason;                                             // 0x001C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.DateYMD
// 0x0014
struct FDateYMD
{
	struct FQWord                                      Time;                                                     // 0x0000(0x0008)
	int                                                Year;                                                     // 0x0008(0x0004)
	int                                                Month;                                                    // 0x000C(0x0004)
	int                                                Day;                                                      // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildWarRecordSeasonHistoryData
// 0x0010
struct FGuildWarRecordSeasonHistoryData
{
	int                                                SeasonCid;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                WinCount;                                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                LoseCount;                                                // 0x0008(0x0004) (AlwaysInit)
	int                                                DrawCount;                                                // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildWarSeasonData
// 0x0008
struct FGuildWarSeasonData
{
	int                                                remainDeclareCount;                                       // 0x0000(0x0004) (AlwaysInit)
	int                                                playWarCount;                                             // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildWarRecordData
// 0x0024
struct FGuildWarRecordData
{
	int                                                LastSeasonWinCount;                                       // 0x0000(0x0004) (AlwaysInit)
	int                                                LastSeasonLoseCount;                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                LastSeasonDrawCount;                                      // 0x0008(0x0004) (AlwaysInit)
	int                                                SeasonWinCount;                                           // 0x000C(0x0004) (AlwaysInit)
	int                                                SeasonLoseCount;                                          // 0x0010(0x0004) (AlwaysInit)
	int                                                SeasonDrawCount;                                          // 0x0014(0x0004) (AlwaysInit)
	int                                                TotalWinCount;                                            // 0x0018(0x0004) (AlwaysInit)
	int                                                TotalLoseCount;                                           // 0x001C(0x0004) (AlwaysInit)
	int                                                TotalDrawCount;                                           // 0x0020(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildWarData
// 0x002C
struct FGuildWarData
{
	int                                                State;                                                    // 0x0000(0x0004) (AlwaysInit)
	struct FQWord                                      expireStateTime;                                          // 0x0004(0x0008) (AlwaysInit)
	struct FString                                     hostileGuildName;                                         // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                killPoint;                                                // 0x001C(0x0004) (AlwaysInit)
	int                                                deathPoint;                                               // 0x0020(0x0004) (AlwaysInit)
	int                                                remainDeclareCount;                                       // 0x0024(0x0004) (AlwaysInit)
	int                                                playWarCount;                                             // 0x0028(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.BLGuild.BLGuildHistoryUIData
// 0x0038
struct FBLGuildHistoryUIData
{
	int                                                Index;                                                    // 0x0000(0x0004)
	struct FDateYMD                                    RecordedDate;                                             // 0x0004(0x0014)
	struct FString                                     CategoryName;                                             // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     HistoryDescription;                                       // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildHistoryData
// 0x0020
struct FGuildHistoryData
{
	int                                                Index;                                                    // 0x0000(0x0004) (AlwaysInit)
	int                                                historyCid;                                               // 0x0004(0x0004) (AlwaysInit)
	struct FQWord                                      recordTime;                                               // 0x0008(0x0008) (AlwaysInit)
	TArray<struct FSystemMessageParamValueData>        paramValueList;                                           // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildGradeData
// 0x0020
struct FGuildGradeData
{
	int                                                Type;                                                     // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned char                                      Priority;                                                 // 0x0014(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	struct FQWord                                      Authority;                                                // 0x0018(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildData
// 0x006C
struct FGuildData
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Level;                                                    // 0x0010(0x0004) (AlwaysInit)
	int                                                Rank;                                                     // 0x0014(0x0004) (AlwaysInit)
	float                                              Exp;                                                      // 0x0018(0x0004) (AlwaysInit)
	struct FString                                     Notice;                                                   // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FQWord                                      Notice_Date;                                              // 0x002C(0x0008) (AlwaysInit)
	struct FQWord                                      InfluenceAmount;                                          // 0x0034(0x0008) (AlwaysInit)
	struct FQWord                                      RP;                                                       // 0x003C(0x0008) (AlwaysInit)
	int                                                IsRealmOwner;                                             // 0x0044(0x0004) (AlwaysInit)
	TArray<int>                                        COList;                                                   // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MarkURL;                                                  // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ChangeName;                                               // 0x0068(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.MsgCommandArgData
// 0x0030
struct FMsgCommandArgData
{
	struct FString                                     PrefixType;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CommandName;                                              // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             ArgTexts;                                                 // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLGuild.BLGuildWarHistoryUIData
// 0x0025
struct FBLGuildWarHistoryUIData
{
	struct FDateYMD                                    StartDate;                                                // 0x0000(0x0014)
	struct FString                                     OpponentGuildName;                                        // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<EBLGuildWarResultType>                 ResultType;                                               // 0x0024(0x0001)
};

// ScriptStruct BLGame.BLGuild.SortingInfo
// 0x0005
struct FSortingInfo
{
	int                                                ColumnType;                                               // 0x0000(0x0004)
	TEnumAsByte<ESortingOrder>                         Order;                                                    // 0x0004(0x0001)
};

// ScriptStruct BLGame.BLGuild.PageInfo
// 0x0008
struct FPageInfo
{
	int                                                CurrentPage;                                              // 0x0000(0x0004)
	int                                                MaxPage;                                                  // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLGuild.BLGuildWarSeasonHistoryUIData
// 0x0028
struct FBLGuildWarSeasonHistoryUIData
{
	int                                                SeasonCid;                                                // 0x0000(0x0004)
	struct FDateYMD                                    StartDate;                                                // 0x0004(0x0014)
	struct FString                                     ResultString;                                             // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLGuild.BLGuildMarkUISettingData
// 0x000C
struct FBLGuildMarkUISettingData
{
	int                                                BackgroundSelectedIndex;                                  // 0x0000(0x0004)
	int                                                SymbolSelectedIndex;                                      // 0x0004(0x0004)
	int                                                SymbolColorIndex;                                         // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildRespondentData
// 0x0014
struct FGuildRespondentData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLPathwayInfo.BLPathway
// 0x0028
struct FBLPathway
{
	struct FString                                     PathwayName;                                              // 0x0000(0x0010) (Edit, NeedCtorLink)
	int                                                DestAngle;                                                // 0x0010(0x0004) (Edit)
	TEnumAsByte<EPATHWAY_CYCLE_TYPE>                   CycleType;                                                // 0x0014(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	class ABLPathwayPoint*                             HeadPathwayPoint;                                         // 0x0018(0x0008) (Edit, EditConst)
	struct FColor                                      PathwayLineColor;                                         // 0x0020(0x0004) (Edit)
	struct FColor                                      PathwayIconColor;                                         // 0x0024(0x0004) (Edit)
};

// ScriptStruct BLGame.ABLDef.RCApplyInfo
// 0x0010
struct FRCApplyInfo
{
	TEnumAsByte<ECERiotControlType>                    RiotControlType;                                          // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Duration;                                                 // 0x0004(0x0004)
	float                                              Distance;                                                 // 0x0008(0x0004)
	float                                              Velocity;                                                 // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillInfoData
// 0x0094 (0x00C8 - 0x0034)
struct FSkillInfoData : public FContentInfoData
{
	unsigned char                                      DummyByte01;                                              // 0x0034(0x0001)
	unsigned char                                      DummyByte02;                                              // 0x0035(0x0001)
	TEnumAsByte<ECETargetingType>                      TargetingType;                                            // 0x0036(0x0001)
	TEnumAsByte<ECESkillFiringType>                    FiringType;                                               // 0x0037(0x0001)
	TEnumAsByte<ECESkillPrepareType>                   PrepareType;                                              // 0x0038(0x0001)
	TEnumAsByte<ECERelationshipType>                   RelationType;                                             // 0x0039(0x0001)
	TEnumAsByte<ECEInvokeAliveConditionType>           InvokeAliveCondition;                                     // 0x003A(0x0001)
	TEnumAsByte<ECEAttackRangeCategory>                DistanceType;                                             // 0x003B(0x0001)
	TEnumAsByte<ECEDamageType>                         DamageType;                                               // 0x003C(0x0001)
	TEnumAsByte<ECEApplyingType>                       ApplyingType;                                             // 0x003D(0x0001)
	TEnumAsByte<ECESkillRushType>                      RushType;                                                 // 0x003E(0x0001)
	TEnumAsByte<ESkillInfoDataTag>                     SkillDataTag;                                             // 0x003F(0x0001)
	unsigned char                                      UsableInCombat;                                           // 0x0040(0x0001)
	unsigned char                                      IsProjectile;                                             // 0x0041(0x0001)
	unsigned char                                      IsAbleRush;                                               // 0x0042(0x0001)
	unsigned char                                      bNeedAcquire;                                             // 0x0043(0x0001)
	TArray<struct FSkillCostInfo>                      CostsForFiring;                                           // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FSkillCostInfo>                      CostsForLaunch;                                           // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FRCApplyInfo>                        RiotControlApplys;                                        // 0x0064(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IconIndex;                                                // 0x0074(0x0004)
	float                                              ShapeRadiusMin;                                           // 0x0078(0x0004)
	float                                              ShapeRadiusMax;                                           // 0x007C(0x0004)
	float                                              InvokableDistanceLowerLimit;                              // 0x0080(0x0004)
	float                                              InvokableDistanceUpperLimit;                              // 0x0084(0x0004)
	float                                              InvokableAngle;                                           // 0x0088(0x0004)
	float                                              FiringTime;                                               // 0x008C(0x0004)
	float                                              PrepareTime;                                              // 0x0090(0x0004)
	float                                              ApplyMoment;                                              // 0x0094(0x0004)
	float                                              ProjVelocity;                                             // 0x0098(0x0004)
	int                                                HealingAmount;                                            // 0x009C(0x0004)
	int                                                DealingAmount;                                            // 0x00A0(0x0004)
	float                                              N_sw;                                                     // 0x00A4(0x0004)
	float                                              N_sa;                                                     // 0x00A8(0x0004)
	float                                              N_sps;                                                    // 0x00AC(0x0004)
	float                                              N_sws;                                                    // 0x00B0(0x0004)
	float                                              N_lv;                                                     // 0x00B4(0x0004)
	TArray<float>                                      LaunchMomentList;                                         // 0x00B8(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.ClassResourceInfo
// 0x000C
struct FClassResourceInfo
{
	TEnumAsByte<ECECombatElementType>                  Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                COUNT;                                                    // 0x0004(0x0004)
	int                                                MaxCount;                                                 // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLDef.InvokableKillHitInfo
// 0x0004
struct FInvokableKillHitInfo
{
	float                                              DurationSeconds;                                          // 0x0000(0x0004)
};

// ScriptStruct BLGame.ABLDef.InvokableHitInfo
// 0x0008
struct FInvokableHitInfo
{
	TEnumAsByte<ECEAttackChanceType>                   AttackChanceType;                                         // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              DurationSeconds;                                          // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLDef.InvokableTakeHitInfo
// 0x0008
struct FInvokableTakeHitInfo
{
	TEnumAsByte<ECEAttackChanceType>                   AttackChanceType;                                         // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              DurationSeconds;                                          // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLDef.SkillMovableInfo
// 0x0004
struct FSkillMovableInfo
{
	unsigned char                                      dummyData;                                                // 0x0000(0x0001)
	TEnumAsByte<ESkillMovableType>                     PrepareMovable;                                           // 0x0001(0x0001)
	TEnumAsByte<ESkillMovableType>                     ShootingMovable;                                          // 0x0002(0x0001)
	TEnumAsByte<ESkillMovableType>                     ChannelingMovable;                                        // 0x0003(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCSkillInfoData
// 0x0100 (0x01C8 - 0x00C8)
struct FPCSkillInfoData : public FSkillInfoData
{
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x00C8(0x0001)
	TEnumAsByte<ECERiotControlStateType>               InvokableTargetRCState;                                   // 0x00C9(0x0001)
	TEnumAsByte<ECERiotControlStateType>               InvokableCasterRCState;                                   // 0x00CA(0x0001)
	TEnumAsByte<ECESkillMobilityType>                  MobilityType;                                             // 0x00CB(0x0001)
	TEnumAsByte<ECESkillGradeType>                     SkillGrade;                                               // 0x00CC(0x0001)
	TEnumAsByte<ECESkillCategoryType>                  CategoryType;                                             // 0x00CD(0x0001)
	TEnumAsByte<ECEGaugeUseType>                       StanceActionSkillCheck;                                   // 0x00CE(0x0001)
	unsigned char                                      ApplyGCD;                                                 // 0x00CF(0x0001)
	unsigned char                                      bAutoFirable;                                             // 0x00D0(0x0001)
	unsigned char                                      bUseQTE;                                                  // 0x00D1(0x0001)
	unsigned char                                      bNeedInstall;                                             // 0x00D2(0x0001)
	unsigned char                                      bNormalAttack;                                            // 0x00D3(0x0001)
	unsigned char                                      bUsableBack;                                              // 0x00D4(0x0001)
	unsigned char                                      bEnableAutoFiring;                                        // 0x00D5(0x0001)
	unsigned char                                      bInvokableCasterCCState;                                  // 0x00D6(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x00D7(0x0001) MISSED OFFSET
	TArray<struct FClassResourceInfo>                  ClassResourceConsume;                                     // 0x00D8(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FClassResourceInfo>                  ClassResourceAcquire;                                     // 0x00E8(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FInvokableElementInfo>               InvokableElements;                                        // 0x00F8(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEEquipSlotType>>              InvokableItemEquipSlotTypeList;                           // 0x0108(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FInvokableKillHitInfo>               InvokableKillHitInfoList;                                 // 0x0118(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FInvokableHitInfo>                   InvokableHitInfoList;                                     // 0x0128(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FInvokableTakeHitInfo>               InvokableTakeHitInfoList;                                 // 0x0138(0x0010) (AlwaysInit, NeedCtorLink)
	struct FSkillMovableInfo                           MovableInfo;                                              // 0x0148(0x0004)
	int                                                SecondIconIndex;                                          // 0x014C(0x0004)
	int                                                PcLevel;                                                  // 0x0150(0x0004)
	float                                              CoolTime;                                                 // 0x0154(0x0004)
	TArray<int>                                        PrecedeSkillList;                                         // 0x0158(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        InvokableTargetAbnormalStatusGroupList;                   // 0x0168(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     TooltipTemplate;                                          // 0x0178(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SkillGroup;                                               // 0x0188(0x0004)
	TArray<int>                                        ReferenceSkillList;                                       // 0x018C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        FastInvokableSkillList;                                   // 0x019C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ChangeableSkill;                                          // 0x01AC(0x0004)
	int                                                MaxStackCount;                                            // 0x01B0(0x0004)
	TArray<int>                                        RestrictableAbnormalStatusList;                           // 0x01B4(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ConsumeActingPoint;                                       // 0x01C4(0x0004)
};

// ScriptStruct BLGame.MouseEventDecider.AreaLocationNormal
// 0x001C
struct FAreaLocationNormal
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C)
	struct FVector                                     Normal;                                                   // 0x000C(0x000C)
	unsigned long                                      bIsValid : 1;                                             // 0x0018(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2MountInfoData
// 0x0044 (0x0078 - 0x0034)
struct FV2MountInfoData : public FContentInfoData
{
	TEnumAsByte<ECEMountType>                          MountType;                                                // 0x0034(0x0001)
	unsigned char                                      FosterAvailable;                                          // 0x0035(0x0001)
	unsigned char                                      FosterIngredientAvailable;                                // 0x0036(0x0001)
	unsigned char                                      ExtractionAvailable;                                      // 0x0037(0x0001)
	unsigned char                                      IsDefaultShow;                                            // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                MountLookCid;                                             // 0x003C(0x0004)
	int                                                MountLegendaryLookCid;                                    // 0x0040(0x0004)
	int                                                RareSkillPoolId;                                          // 0x0044(0x0004)
	int                                                EpicSkillPoolId;                                          // 0x0048(0x0004)
	int                                                LegendSkillPoolId;                                        // 0x004C(0x0004)
	TArray<int>                                        MountCidList;                                             // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                UsableRank;                                               // 0x0060(0x0004)
	int                                                UsableLimitRank;                                          // 0x0064(0x0004)
	int                                                DurationDay;                                              // 0x0068(0x0004)
	int                                                DurationHour;                                             // 0x006C(0x0004)
	int                                                DurationMinute;                                           // 0x0070(0x0004)
	int                                                GradeUpCount;                                             // 0x0074(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.CombatElementData
// 0x0008
struct FCombatElementData
{
	int                                                elementType;                                              // 0x0000(0x0004) (AlwaysInit)
	int                                                piledCount;                                               // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CombatFlairData
// 0x0024
struct FCombatFlairData
{
	int                                                Index;                                                    // 0x0000(0x0004) (AlwaysInit)
	int                                                CurrentState;                                             // 0x0004(0x0004) (AlwaysInit)
	int                                                ClassType;                                                // 0x0008(0x0004) (AlwaysInit)
	int                                                dependencyActor;                                          // 0x000C(0x0004) (AlwaysInit)
	int                                                storageCountMax;                                          // 0x0010(0x0004) (AlwaysInit)
	TArray<struct FCombatElementData>                  elementData;                                              // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BlessPC.PointAreaSettingInfo
// 0x0018
struct FPointAreaSettingInfo
{
	int                                                CombatCid;                                                // 0x0000(0x0004)
	TEnumAsByte<EAREA_TARGETING_TYPE>                  Type;                                                     // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	float                                              PointRadius;                                              // 0x0008(0x0004)
	float                                              LowerLimit;                                               // 0x000C(0x0004)
	float                                              UpperLimit;                                               // 0x0010(0x0004)
	float                                              MaxLimit;                                                 // 0x0014(0x0004)
};

// ScriptStruct BLGame.BlessPC.PendingSkillActionInfo
// 0x000C
struct FPendingSkillActionInfo
{
	int                                                PendingSkillID;                                           // 0x0000(0x0004)
	float                                              PendingStartTime;                                         // 0x0004(0x0004)
	unsigned long                                      bUserInput : 1;                                           // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLDef.SummonEffectData
// 0x000C
struct FSummonEffectData
{
	TEnumAsByte<ESUMMON_EFFECT_TYPE>                   SummonEffectType;                                         // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SummoneeSid;                                              // 0x0004(0x0004)
	float                                              RemoveTimer;                                              // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.V2MPFItemData
// 0x0008
struct FV2MPFItemData
{
	int                                                ItemCid;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemCount;                                                // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.MPFRandomData
// 0x0028
struct FMPFRandomData
{
	int                                                MPFType;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                MPF_CId;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                Grade;                                                    // 0x0008(0x0004) (AlwaysInit)
	int                                                Vocation;                                                 // 0x000C(0x0004) (AlwaysInit)
	int                                                Level;                                                    // 0x0010(0x0004) (AlwaysInit)
	int                                                RareSkillCId;                                             // 0x0014(0x0004) (AlwaysInit)
	int                                                EpicSkillCId;                                             // 0x0018(0x0004) (AlwaysInit)
	int                                                LegendarySkillCId;                                        // 0x001C(0x0004) (AlwaysInit)
	int                                                RemainGradeUpCount;                                       // 0x0020(0x0004) (AlwaysInit)
	int                                                ResetGradeUpChanceItemUseCnt;                             // 0x0024(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.TamingMiniGameData
// 0x0030
struct FTamingMiniGameData
{
	int                                                MiniGameId;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                MiniGameTotalPlayTime;                                    // 0x0004(0x0004) (AlwaysInit)
	int                                                MiniGameHitCount;                                         // 0x0008(0x0004) (AlwaysInit)
	float                                              MiniGameBarSpeed;                                         // 0x000C(0x0004) (AlwaysInit)
	float                                              MiniGameBarStopTime;                                      // 0x0010(0x0004) (AlwaysInit)
	TArray<int>                                        SafeZoneCreatePositionList;                               // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SafeZoneCell;                                             // 0x0024(0x0004) (AlwaysInit)
	int                                                IsCriticalGame;                                           // 0x0028(0x0004) (AlwaysInit)
	int                                                TargetNPCSId;                                             // 0x002C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CustomWaypointData
// 0x0018
struct FCustomWaypointData
{
	int                                                CustomWaypointUniqueID;                                   // 0x0000(0x0004) (AlwaysInit)
	int                                                WorldMapCId;                                              // 0x0004(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0008(0x000C) (AlwaysInit)
	int                                                LocationCId;                                              // 0x0014(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.HeightFogValue
// 0x0038
struct FHeightFogValue
{
	struct FString                                     RefHeightFogTag;                                          // 0x0000(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bHeightFogEnabled : 1;                                    // 0x0010(0x0004) (Edit)
	float                                              Density;                                                  // 0x0014(0x0004) (Edit)
	float                                              ExtinctionDistance;                                       // 0x0018(0x0004) (Edit)
	float                                              HeightFogLightBrightness;                                 // 0x001C(0x0004) (Edit)
	struct FColor                                      HeightFogLightColor;                                      // 0x0020(0x0004) (Edit)
	float                                              StartDistance;                                            // 0x0024(0x0004) (Edit)
	float                                              HeightFogLocZ;                                            // 0x0028(0x0004) (Edit)
	float                                              HeightFogInterpolateTime;                                 // 0x002C(0x0004) (Edit)
	class UHeightFogComponent*                         RefHeightFogInstance;                                     // 0x0030(0x0008) (ExportObject, Transient, Component, EditInline)
};

// ScriptStruct BLGame.ABLDef.LensFlareValue
// 0x001C
struct FLensFlareValue
{
	struct FString                                     RefLensFlareTag;                                          // 0x0000(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bToggleOn : 1;                                            // 0x0010(0x0004) (Edit)
	class ULensFlareComponent*                         RefLensFlareInstance;                                     // 0x0014(0x0008) (ExportObject, Transient, Component, EditInline)
};

// ScriptStruct BLGame.ABLDef.BLEnvVolumeSettings
// 0x0170
struct FBLEnvVolumeSettings
{
	TEnumAsByte<ETODTimePhase>                         TimePhaseForThisSettings;                                 // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	unsigned long                                      bFlagLight : 1;                                           // 0x0004(0x0004) (Edit)
	unsigned long                                      bLightEnabled : 1;                                        // 0x0004(0x0004) (Edit)
	float                                              Brightness;                                               // 0x0008(0x0004) (Edit)
	struct FColor                                      LightColor;                                               // 0x000C(0x0004) (Edit)
	float                                              LightInterpolateTime;                                     // 0x0010(0x0004) (Edit)
	float                                              NirvanicDomDirLightPitch;                                 // 0x0014(0x0004) (Edit)
	struct FColor                                      NirvanicLightmapScale;                                    // 0x0018(0x0004) (Edit)
	struct FColor                                      NirvanicDLEScale;                                         // 0x001C(0x0004) (Edit)
	unsigned long                                      bFlagLightShafts : 1;                                     // 0x0020(0x0004) (Edit)
	float                                              BloomScale;                                               // 0x0024(0x0004) (Edit)
	float                                              BloomScreenBlendThreshold;                                // 0x0028(0x0004) (Edit)
	float                                              BloomThreshold;                                           // 0x002C(0x0004) (Edit)
	struct FColor                                      BloomTint;                                                // 0x0030(0x0004) (Edit)
	unsigned long                                      bRenderLightShafts : 1;                                   // 0x0034(0x0004) (Edit)
	float                                              OcclusionDepthRange;                                      // 0x0038(0x0004) (Edit)
	float                                              OcclusionMaskDarkness;                                    // 0x003C(0x0004) (Edit)
	float                                              RadialBlurPercent;                                        // 0x0040(0x0004) (Edit)
	float                                              LightShaftInterpolateTime;                                // 0x0044(0x0004) (Edit)
	unsigned long                                      bFlagWind : 1;                                            // 0x0048(0x0004) (Edit)
	struct FString                                     RefDirectWindTag;                                         // 0x004C(0x0010) (Edit, NeedCtorLink)
	float                                              WindStrength;                                             // 0x005C(0x0004) (Edit)
	float                                              WindSpeed;                                                // 0x0060(0x0004) (Edit)
	float                                              WindInterpolateTime;                                      // 0x0064(0x0004) (Edit)
	class UWindDirectionalSourceComponent*             RefDirectWindInstance;                                    // 0x0068(0x0008) (ExportObject, Transient, Component, EditInline)
	struct FHeightFogValue                             HeightFogs[0x2];                                          // 0x0070(0x0038) (Edit, Component, NeedCtorLink, EditInline)
	int                                                HeightFogsDefinedArraySize;                               // 0x00E0(0x0004)
	unsigned long                                      bFlagHeightFog : 1;                                       // 0x00E4(0x0004) (Edit)
	struct FLensFlareValue                             LensFlares[0x2];                                          // 0x00E8(0x001C) (Edit, Component, NeedCtorLink, EditInline)
	int                                                LensFlaresDefinedArraySize;                               // 0x0120(0x0004)
	unsigned long                                      bFlagLensFlare : 1;                                       // 0x0124(0x0004) (Edit)
	unsigned long                                      bExponentialHeightFogEnabled : 1;                         // 0x0124(0x0004) (Edit)
	struct FString                                     RefExponentialHeightFogTag;                               // 0x0128(0x0010) (Edit, NeedCtorLink)
	class UExponentialHeightFogComponent*              RefExponentialHeightFogInst;                              // 0x0138(0x0008) (ExportObject, Transient, Component, EditInline)
	float                                              FogDensity;                                               // 0x0140(0x0004) (Edit)
	float                                              FogHeightFalloff;                                         // 0x0144(0x0004) (Edit)
	float                                              FogMaxOpacity;                                            // 0x0148(0x0004) (Edit)
	float                                              StartDistance;                                            // 0x014C(0x0004) (Edit)
	float                                              LightTerminatorAngle;                                     // 0x0150(0x0004) (Edit)
	float                                              OppositeLightBrightness;                                  // 0x0154(0x0004) (Edit)
	struct FColor                                      OppositeLightColor;                                       // 0x0158(0x0004) (Edit)
	float                                              LightInscatteringBrightness;                              // 0x015C(0x0004) (Edit)
	struct FColor                                      LightInscatteringColor;                                   // 0x0160(0x0004) (Edit)
	float                                              ExponentialHeightFogLocZ;                                 // 0x0164(0x0004) (Edit)
	float                                              ExponentialHeightFogInterpolateTime;                      // 0x0168(0x0004) (Edit)
	unsigned long                                      bFlagExponentialHeightFog : 1;                            // 0x016C(0x0004) (Edit)
};

// ScriptStruct BLGame.SharedTypeWaypointInfo.TransportConditionMinLevelUC
// 0x0004
struct FTransportConditionMinLevelUC
{
	int                                                MinLevel;                                                 // 0x0000(0x0004) (Edit)
};

// ScriptStruct BLGame.ABLDef.CEQuestEnumType
// 0x0010
struct FCEQuestEnumType
{
	struct FString                                     quest_name;                                               // 0x0000(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.SharedTypeWaypointInfo.TransportConditionCompletedQuestUC
// 0x0010
struct FTransportConditionCompletedQuestUC
{
	struct FCEQuestEnumType                            quest_id;                                                 // 0x0000(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.SharedTypeWaypointInfo.TransportConditionUC
// 0x0020
struct FTransportConditionUC
{
	TArray<struct FTransportConditionMinLevelUC>       MinLevel;                                                 // 0x0000(0x0010) (Edit, NeedCtorLink)
	TArray<struct FTransportConditionCompletedQuestUC> completed_quest;                                          // 0x0010(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.CEWaypointEnumType
// 0x0010
struct FCEWaypointEnumType
{
	struct FString                                     waypoint_name;                                            // 0x0000(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.SharedTypeWaypointInfo.TransportRouteInfoUC
// 0x0058
struct FTransportRouteInfoUC
{
	struct FTransportConditionUC                       required_condition;                                       // 0x0000(0x0020) (Edit, NeedCtorLink)
	struct FCEWaypointEnumType                         departure_waypoint;                                       // 0x0020(0x0010) (Edit, NeedCtorLink)
	struct FCEWaypointEnumType                         arrival_waypoint;                                         // 0x0030(0x0010) (Edit, NeedCtorLink)
	TEnumAsByte<ECETransportType>                      transport_type;                                           // 0x0040(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0041(0x0003) MISSED OFFSET
	float                                              trip_distance;                                            // 0x0044(0x0004) (Edit)
	float                                              trip_time;                                                // 0x0048(0x0004) (Edit)
	float                                              warp_in_time;                                             // 0x004C(0x0004) (Edit)
	float                                              warp_out_time;                                            // 0x0050(0x0004) (Edit)
	int                                                fare;                                                     // 0x0054(0x0004) (Edit)
};

// ScriptStruct BLGame.BLTransportRoute.RotationAdjustInfo
// 0x0014
struct FRotationAdjustInfo
{
	struct FRotator                                    Amount;                                                   // 0x0000(0x000C) (Edit)
	float                                              BlendInTime;                                              // 0x000C(0x0004) (Edit)
	float                                              BlendOutTime;                                             // 0x0010(0x0004) (Edit)
};

// ScriptStruct BLGame.BLTransportRoute.CrossingLevelsInfo
// 0x0010
struct FCrossingLevelsInfo
{
	TArray<struct FName>                               PackageNames;                                             // 0x0000(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLTransportRoute.TransportRouteEventTime
// 0x0010
struct FTransportRouteEventTime
{
	TEnumAsByte<ETransportRouteEventTimeType>          EventType;                                                // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                TargetIndex;                                              // 0x0004(0x0004) (Edit)
	float                                              TimeFactor;                                               // 0x0008(0x0004) (Edit)
	float                                              ActualTime;                                               // 0x000C(0x0004) (Edit)
};

// ScriptStruct BLGame.BLTransportRoute.TransportRouteAnimEvent
// 0x0020
struct FTransportRouteAnimEvent
{
	struct FTransportRouteEventTime                    EventTime;                                                // 0x0000(0x0010) (Edit)
	struct FName                                       AnimSeq;                                                  // 0x0010(0x0008) (Edit)
	float                                              BlendInTime;                                              // 0x0018(0x0004) (Edit)
	float                                              PlayRate;                                                 // 0x001C(0x0004) (Edit)
};

// ScriptStruct BLGame.BLTransportRoute.TransportEffect
// 0x0028
struct FTransportEffect
{
	class UParticleSystem*                             Particle;                                                 // 0x0000(0x0008) (Edit)
	unsigned long                                      bAttach : 1;                                              // 0x0008(0x0004) (Edit)
	struct FName                                       BoneSocketName;                                           // 0x000C(0x0008) (Edit)
	struct FVector                                     LocationOffset;                                           // 0x0014(0x000C) (Edit)
	class UAkEvent*                                    AkSoundEvent;                                             // 0x0020(0x0008) (Edit)
};

// ScriptStruct BLGame.BLTransportRoute.TransportRouteEffectEvent
// 0x0038
struct FTransportRouteEffectEvent
{
	struct FTransportRouteEventTime                    EventTime;                                                // 0x0000(0x0010) (Edit)
	struct FTransportEffect                            Effect;                                                   // 0x0010(0x0028) (Edit)
};

// ScriptStruct BLGame.BLTransportRoute.TransportRouteWarpEvent
// 0x0011
struct FTransportRouteWarpEvent
{
	struct FTransportRouteEventTime                    EventTime;                                                // 0x0000(0x0010) (Edit)
	TEnumAsByte<ETransportWarpEventType>               WarpEvent;                                                // 0x0010(0x0001) (Edit)
};

// ScriptStruct BLGame.ABLDef.VectorInfoUC
// 0x000C
struct FVectorInfoUC
{
	float                                              X;                                                        // 0x0000(0x0004) (Edit)
	float                                              Y;                                                        // 0x0004(0x0004) (Edit)
	float                                              Z;                                                        // 0x0008(0x0004) (Edit)
};

// ScriptStruct BLGame.ABLDef.CEWorldMapEnumType
// 0x0010
struct FCEWorldMapEnumType
{
	struct FString                                     worldmap_name;                                            // 0x0000(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.SharedTypeWaypointInfo.WaypointInfoUC
// 0x0051
struct FWaypointInfoUC
{
	struct FTransportConditionUC                       required_condition;                                       // 0x0000(0x0020) (Edit, NeedCtorLink)
	struct FVectorInfoUC                               Location;                                                 // 0x0020(0x000C) (Edit)
	int                                                Id;                                                       // 0x002C(0x0004) (Edit)
	struct FCEWorldMapEnumType                         worldmap_id;                                              // 0x0030(0x0010) (Edit, NeedCtorLink)
	struct FString                                     Name;                                                     // 0x0040(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TEnumAsByte<ECEWaypointType>                       waypoint_type;                                            // 0x0050(0x0001) (Edit)
};

// ScriptStruct BLGame.ABLSDLTypes.LONGLONGWrapper
// 0x0008
struct FLONGLONGWrapper
{
	struct FQWord                                      Value;                                                    // 0x0000(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.BLWorldMapWaypointManager.DestinationData
// 0x000C
struct FDestinationData
{
	int                                                Dest_id;                                                  // 0x0000(0x0004)
	struct FLONGLONGWrapper                            GameGuardValueWrapper;                                    // 0x0004(0x0008)
};

// ScriptStruct BLGame.BoneDeformationTemplate.SingleBoneDeformingInfo
// 0x0009
struct FSingleBoneDeformingInfo
{
	struct FName                                       BoneName;                                                 // 0x0000(0x0008) (Edit)
	TEnumAsByte<EBoneDeformApplication>                Application;                                              // 0x0008(0x0001) (Edit)
};

// ScriptStruct BLGame.BoneDeformationTemplate.BoneDeformingPartsInfo
// 0x0020
struct FBoneDeformingPartsInfo
{
	TEnumAsByte<EBoneDeformCategory>                   Category;                                                 // 0x0000(0x0001) (Edit)
	TEnumAsByte<EBoneDeformPart>                       Part;                                                     // 0x0001(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	float                                              MinValue;                                                 // 0x0004(0x0004) (Edit)
	float                                              MaxValue;                                                 // 0x0008(0x0004) (Edit)
	float                                              BaseValue;                                                // 0x000C(0x0004) (Edit)
	TArray<struct FSingleBoneDeformingInfo>            BoneDeforms;                                              // 0x0010(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.FriendData
// 0x0038
struct FFriendData
{
	struct FQWord                                      FriendUniqueID;                                           // 0x0000(0x0008) (AlwaysInit)
	int                                                IsLogin;                                                  // 0x0008(0x0004) (AlwaysInit)
	struct FQWord                                      LastLogoutDate;                                           // 0x000C(0x0008) (AlwaysInit)
	int                                                friendSid;                                                // 0x0014(0x0004) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Level;                                                    // 0x0028(0x0004) (AlwaysInit)
	int                                                ClassType;                                                // 0x002C(0x0004) (AlwaysInit)
	int                                                PVPCasteCid;                                              // 0x0030(0x0004) (AlwaysInit)
	int                                                LocationCId;                                              // 0x0034(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.GFxUI_PopupMenu.PopupMenuItemData
// 0x0018
struct FPopupMenuItemData
{
	TEnumAsByte<EPopupMenuItem>                        Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     Label;                                                    // 0x0004(0x0010) (NeedCtorLink)
	unsigned long                                      IsTitle : 1;                                              // 0x0014(0x0004)
	unsigned long                                      IsDisable : 1;                                            // 0x0014(0x0004)
};

// ScriptStruct BLGame.ABLDef.RevivalDialogData
// 0x0030
struct FRevivalDialogData
{
	TEnumAsByte<ERevivalState>                         RevivalState;                                             // 0x0000(0x0001)
	TEnumAsByte<EDialogStyle>                          DialogStyle;                                              // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                TimeOut;                                                  // 0x0004(0x0004)
	int                                                SidExecutor;                                              // 0x0008(0x0004)
	struct FString                                     ExecutorName;                                             // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SidTarget;                                                // 0x001C(0x0004)
	unsigned char                                      ButtonFlags;                                              // 0x0020(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0021(0x0003) MISSED OFFSET
	unsigned long                                      IsToken : 1;                                              // 0x0024(0x0004)
	unsigned long                                      bUsePremiumRevival : 1;                                   // 0x0024(0x0004)
	int                                                RemainPremiumRevivalCount;                                // 0x0028(0x0004)
	unsigned long                                      bOccupationWarRevival_Base : 1;                           // 0x002C(0x0004)
};

// ScriptStruct BLGame.CraftManager.CraftFilter
// 0x001C
struct FCraftFilter
{
	int                                                MinLevel;                                                 // 0x0000(0x0004)
	int                                                MaxLevel;                                                 // 0x0004(0x0004)
	TEnumAsByte<ECEItemGradeType>                      ItemGrade;                                                // 0x0008(0x0001)
	TEnumAsByte<ECECraftCategory1Type>                 ItemCategory1Type;                                        // 0x0009(0x0001)
	TEnumAsByte<ECECraftCategory2Type>                 ItemCategory2Type;                                        // 0x000A(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x000B(0x0001) MISSED OFFSET
	int                                                EssentialMaterial;                                        // 0x000C(0x0004)
	unsigned long                                      bEnableEquip : 1;                                         // 0x0010(0x0004)
	unsigned long                                      bEnableCraft : 1;                                         // 0x0010(0x0004)
	unsigned long                                      bEnableTierBarrier : 1;                                   // 0x0010(0x0004)
	int                                                CurrentPage;                                              // 0x0014(0x0004)
	int                                                MaxPage;                                                  // 0x0018(0x0004)
};

// ScriptStruct BLGame.DecorationEffectInfo.DecorationEffect
// 0x002C
struct FDecorationEffect
{
	class UParticleSystem*                             Particle;                                                 // 0x0000(0x0008) (Edit)
	TEnumAsByte<EDECORATION_PARTICLE_ATTACH_TYPE>      AttachType;                                               // 0x0008(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	struct FName                                       AttachName;                                               // 0x000C(0x0008) (Edit)
	struct FVector                                     LocationOffset;                                           // 0x0014(0x000C) (Edit)
	struct FRotator                                    RotationOffset;                                           // 0x0020(0x000C) (Edit)
};

// ScriptStruct BLGame.ABLSDLTypes.FlashShopItemData
// 0x000C
struct FFlashShopItemData
{
	int                                                FlashShopCId;                                             // 0x0000(0x0004) (AlwaysInit)
	int                                                ProductCId;                                               // 0x0004(0x0004) (AlwaysInit)
	int                                                Amount;                                                   // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.FlashShop.FlashShopCategoryItemInfo
// 0x000C
struct FFlashShopCategoryItemInfo
{
	int                                                ShopProductCid;                                           // 0x0000(0x0004)
	int                                                ItemCid;                                                  // 0x0004(0x0004)
	unsigned long                                      bZeroAmount : 1;                                          // 0x0008(0x0004)
	unsigned long                                      bNotEnoughLumena : 1;                                     // 0x0008(0x0004)
	unsigned long                                      bPermanentLock : 1;                                       // 0x0008(0x0004)
	unsigned long                                      bLevelLock : 1;                                           // 0x0008(0x0004)
};

// ScriptStruct BLGame.FlashShop.FlashShopBuyInfo
// 0x0020
struct FFlashShopBuyInfo
{
	int                                                BuyShopCid;                                               // 0x0000(0x0004)
	int                                                BuyProductCid;                                            // 0x0004(0x0004)
	int                                                BuyPrice;                                                 // 0x0008(0x0004)
	int                                                BuyCount;                                                 // 0x000C(0x0004)
	struct FString                                     BuyItemLocalName;                                         // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.LevelStreamingByPlayerWorld.WorldCondition
// 0x0008
struct FWorldCondition
{
	TEnumAsByte<ECEWorldMapType>                       WorldType;                                                // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                WorldCid;                                                 // 0x0004(0x0004) (Edit)
};

// ScriptStruct BLGame.LevelStreamingTubeDungeonLevel.BoundsInfo
// 0x00C0
struct FBoundsInfo
{
	struct FKConvexElem                                Convex;                                                   // 0x0000(0x007C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x007C(0x0004) MISSED OFFSET
	struct FMatrix                                     Origin;                                                   // 0x0080(0x0040)
};

// ScriptStruct BLGame.ABLSDLTypes.LumenaShopItemData
// 0x000C
struct FLumenaShopItemData
{
	int                                                LumenaShopCId;                                            // 0x0000(0x0004) (AlwaysInit)
	int                                                ProductCId;                                               // 0x0004(0x0004) (AlwaysInit)
	int                                                Amount;                                                   // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.LumenaShopResetInfo
// 0x000C
struct FLumenaShopResetInfo
{
	int                                                WeeklyResetDay;                                           // 0x0000(0x0004) (AlwaysInit)
	int                                                WeeklyResetTime;                                          // 0x0004(0x0004) (AlwaysInit)
	int                                                DailyResetTime;                                           // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.LumenaShop.LumenaShopCategoryItemInfo
// 0x000C
struct FLumenaShopCategoryItemInfo
{
	int                                                ShopProductCid;                                           // 0x0000(0x0004)
	int                                                ItemCid;                                                  // 0x0004(0x0004)
	unsigned long                                      bZeroAmount : 1;                                          // 0x0008(0x0004)
	unsigned long                                      bNotEnoughContentToken : 1;                               // 0x0008(0x0004)
	unsigned long                                      bPermanentLock : 1;                                       // 0x0008(0x0004)
	unsigned long                                      bLevelLock : 1;                                           // 0x0008(0x0004)
};

// ScriptStruct BLGame.LumenaShop.LumenaShopBuyInfo
// 0x0024
struct FLumenaShopBuyInfo
{
	int                                                BuyShopCid;                                               // 0x0000(0x0004)
	int                                                BuyProductCid;                                            // 0x0004(0x0004)
	int                                                BuyCoinType;                                              // 0x0008(0x0004)
	int                                                BuyPrice;                                                 // 0x000C(0x0004)
	int                                                BuyCount;                                                 // 0x0010(0x0004)
	struct FString                                     BuyItemLocalName;                                         // 0x0014(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.MissionData
// 0x0030
struct FMissionData
{
	int                                                MissionCId;                                               // 0x0000(0x0004) (AlwaysInit)
	unsigned char                                      MissionSlot;                                              // 0x0004(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	int                                                MissionState;                                             // 0x0008(0x0004) (AlwaysInit)
	int                                                MissionOptionCId;                                         // 0x000C(0x0004) (AlwaysInit)
	int                                                MissionLevel;                                             // 0x0010(0x0004) (AlwaysInit)
	float                                              SuccessRatio;                                             // 0x0014(0x0004) (AlwaysInit)
	int                                                TotalMinuteToComplete;                                    // 0x0018(0x0004) (AlwaysInit)
	int                                                ConstTotalMinuteToComplete;                               // 0x001C(0x0004) (AlwaysInit)
	TArray<struct FQWord>                              RegisterFellowUniqueIDList;                               // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.RockWallLadderVolume.ClimbHold
// 0x0010
struct FClimbHold
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C)
	unsigned long                                      bIsPreempted : 1;                                         // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.RPProductInfoData
// 0x001C
struct FRPProductInfoData
{
	int                                                ProductID;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                ProductType;                                              // 0x0004(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0008(0x0004) (AlwaysInit)
	int                                                WorldMapCId;                                              // 0x000C(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0010(0x000C) (AlwaysInit)
};

// ScriptStruct BLGame.WebSessionManager.RegisterItemInfo
// 0x000C
struct FRegisterItemInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                Sid;                                                      // 0x0004(0x0004)
	int                                                Amount;                                                   // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLDef.DialogTextInfo
// 0x0014
struct FDialogTextInfo
{
	int                                                NPC_Cid;                                                  // 0x0000(0x0004)
	struct FString                                     Text;                                                     // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.ShowQuestRewardItemInfo
// 0x000C
struct FShowQuestRewardItemInfo
{
	int                                                Index;                                                    // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemId;                                                   // 0x0004(0x0004) (AlwaysInit)
	int                                                COUNT;                                                    // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ShowQuestRewardInfo
// 0x0020
struct FShowQuestRewardInfo
{
	TArray<struct FShowQuestRewardItemInfo>            fixedReward;                                              // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FShowQuestRewardItemInfo>            selectiveReward;                                          // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.TalkDialogShowQuestInfo
// 0x0028
struct FTalkDialogShowQuestInfo
{
	int                                                showQuestType;                                            // 0x0000(0x0004) (AlwaysInit)
	int                                                questId;                                                  // 0x0004(0x0004) (AlwaysInit)
	struct FShowQuestRewardInfo                        rewardInfo;                                               // 0x0008(0x0020) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.TalkSelectionInfo
// 0x0008
struct FTalkSelectionInfo
{
	int                                                SelectionIndex;                                           // 0x0000(0x0004) (AlwaysInit)
	int                                                selectionType;                                            // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.TalkDialogInfo
// 0x0040
struct FTalkDialogInfo
{
	int                                                dialogId;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                secondaryNpcType;                                         // 0x0004(0x0004) (AlwaysInit)
	struct FTalkDialogShowQuestInfo                    showQuestInfo;                                            // 0x0008(0x0028) (AlwaysInit, NeedCtorLink)
	TArray<struct FTalkSelectionInfo>                  selectionInfo;                                            // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.CustomCameraInfo
// 0x001C
struct FCustomCameraInfo
{
	struct FVector                                     CameraTarget;                                             // 0x0000(0x000C) (Edit)
	struct FRotator                                    CameraRotation;                                           // 0x000C(0x000C) (Edit)
	float                                              CameraDistFromTarget;                                     // 0x0018(0x0004) (Edit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MonologInfoData
// 0x0010 (0x0044 - 0x0034)
struct FMonologInfoData : public FContentInfoData
{
	TArray<struct FString>                             TextList;                                                 // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ActionController.MonologAssetAndInfo
// 0x004C
struct FMonologAssetAndInfo
{
	struct FMonologInfoData                            InfoData;                                                 // 0x0000(0x0044) (NeedCtorLink)
	class UMonologAsset*                               Asset;                                                    // 0x0044(0x0008)
};

// ScriptStruct BLGame.ActionController.DialogCamSetting
// 0x0018
struct FDialogCamSetting
{
	float                                              TargetOffset_Default;                                     // 0x0000(0x0004)
	float                                              TargetOffset_Full;                                        // 0x0004(0x0004)
	float                                              WidthScreenSpace;                                         // 0x0008(0x0004)
	float                                              UpperScreenSpace;                                         // 0x000C(0x0004)
	float                                              BottomScreenSpace_Default;                                // 0x0010(0x0004)
	float                                              BottomScreenSpace_Medium;                                 // 0x0014(0x0004)
};

// ScriptStruct BLGame.ActionController.NPCIDInfo
// 0x0018
struct FNPCIDInfo
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (NeedCtorLink)
	int                                                Sid;                                                      // 0x0010(0x0004)
	int                                                Cid;                                                      // 0x0014(0x0004)
};

// ScriptStruct BLGame.ActionController.TalkerIDInfo
// 0x0030
struct FTalkerIDInfo
{
	struct FNPCIDInfo                                  MainNpcId;                                                // 0x0000(0x0018) (NeedCtorLink)
	struct FNPCIDInfo                                  SecondNpcId;                                              // 0x0018(0x0018) (NeedCtorLink)
};

// ScriptStruct BLGame.ActionController.PCDialogInfo
// 0x0058
struct FPCDialogInfo
{
	int                                                DialogCid;                                                // 0x0000(0x0004) (Transient)
	class UDialogAsset*                                DAsset;                                                   // 0x0004(0x0008) (Transient)
	struct FTalkDialogShowQuestInfo                    QuestInfo;                                                // 0x000C(0x0028) (Transient, NeedCtorLink)
	TArray<struct FTalkSelectionInfo>                  selectionInfo;                                            // 0x0034(0x0010) (Transient, NeedCtorLink)
	float                                              ActionIgnoreTime;                                         // 0x0044(0x0004) (Transient)
	class ABLNpc*                                      MainTalker;                                               // 0x0048(0x0008) (Transient)
	class ABLNpc*                                      SecondTalker;                                             // 0x0050(0x0008) (Transient)
};

// ScriptStruct BLGame.AimController.AimOffsetInfo
// 0x000C
struct FAimOffsetInfo
{
	int                                                Step;                                                     // 0x0000(0x0004) (Edit)
	int                                                CamDist;                                                  // 0x0004(0x0004) (Edit)
	float                                              AimOffset;                                                // 0x0008(0x0004) (Edit)
};

// ScriptStruct BLGame.AimController.AimProjectionInfo
// 0x000C
struct FAimProjectionInfo
{
	float                                              AspectRatio;                                              // 0x0000(0x0004)
	float                                              HalfFOV;                                                  // 0x0004(0x0004)
	float                                              NearClippingPlane;                                        // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLCameraBase.ZoomStepDistFocus
// 0x0028
struct FZoomStepDistFocus
{
	int                                                Step;                                                     // 0x0000(0x0004) (Edit)
	float                                              Dist;                                                     // 0x0004(0x0004) (Edit)
	float                                              Focus;                                                    // 0x0008(0x0004) (Edit)
	unsigned long                                      DOF : 1;                                                  // 0x000C(0x0004) (Edit)
	float                                              BlurAmount;                                               // 0x0010(0x0004) (Edit)
	float                                              FocusInnerRadius;                                         // 0x0014(0x0004) (Edit)
	float                                              BlurKernelSize;                                           // 0x0018(0x0004) (Edit)
	int                                                FOV;                                                      // 0x001C(0x0004) (Edit)
	int                                                MinCamPCPitch;                                            // 0x0020(0x0004) (Edit)
	int                                                MaxCamPCPitch;                                            // 0x0024(0x0004) (Edit)
};

// ScriptStruct BLGame.BLCameraBase.BLCameraInfo
// 0x0028
struct FBLCameraInfo
{
	float                                              FOV;                                                      // 0x0000(0x0004) (Transient)
	struct FVector                                     Position;                                                 // 0x0004(0x000C) (Transient)
	struct FVector                                     Target;                                                   // 0x0010(0x000C) (Transient)
	struct FRotator                                    Rotation;                                                 // 0x001C(0x000C) (Transient)
};

// ScriptStruct BLGame.BLCamera.TDamperModelParam
// 0x0008
struct FTDamperModelParam
{
	float                                              C;                                                        // 0x0000(0x0004)
	float                                              F;                                                        // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLCamera.BLFOVChangeInfo
// 0x0014
struct FBLFOVChangeInfo
{
	float                                              StartFOV;                                                 // 0x0000(0x0004) (Transient)
	float                                              EndFOV;                                                   // 0x0004(0x0004) (Transient)
	float                                              FOVDelta;                                                 // 0x0008(0x0004) (Transient)
	float                                              DelayTime;                                                // 0x000C(0x0004) (Transient)
	unsigned long                                      bDoingChageFOV : 1;                                       // 0x0010(0x0004) (Transient)
	unsigned long                                      bOnMode : 1;                                              // 0x0010(0x0004) (Transient)
};

// ScriptStruct BLGame.BLCamera.BLCameraInterpInfo
// 0x00C0
struct FBLCameraInterpInfo
{
	struct FBLCameraInfo                               RestoreInfo;                                              // 0x0000(0x0028) (Transient)
	struct FBLCameraInfo                               StartInfo;                                                // 0x0028(0x0028) (Transient)
	struct FBLCameraInfo                               DestInfo;                                                 // 0x0050(0x0028) (Transient)
	float                                              TotalTime;                                                // 0x0078(0x0004) (Transient)
	float                                              AccumTime;                                                // 0x007C(0x0004) (Transient)
	struct FInterpCurveVector                          MoveCurve;                                                // 0x0080(0x0014) (Transient, NeedCtorLink)
	struct FInterpCurveVector                          RotationCurve;                                            // 0x0094(0x0014) (Transient, NeedCtorLink)
	struct FInterpCurveFloat                           bFocusOnTargetCurve;                                      // 0x00A8(0x0014) (Transient, NeedCtorLink)
	unsigned long                                      bWillEnd : 1;                                             // 0x00BC(0x0004) (Transient)
};

// ScriptStruct BLGame.BLCamera.BLCamera_WorldMapModeInfo
// 0x0068
struct FBLCamera_WorldMapModeInfo
{
	float                                              DefaultCamDistance;                                       // 0x0000(0x0004) (Transient)
	float                                              MinZoomDist;                                              // 0x0004(0x0004) (Transient)
	float                                              MaxZoomDist;                                              // 0x0008(0x0004) (Transient)
	struct FVector                                     TargetLoc;                                                // 0x000C(0x000C) (Transient)
	struct FBLCameraInfo                               RestoreCameraInfo;                                        // 0x0018(0x0028) (Transient)
	struct FBLCameraInfo                               WorldMapCameraInfo;                                       // 0x0040(0x0028) (Transient)
};

// ScriptStruct BLGame.ABLDef.BLSkillNodeData
// 0x000E
struct FBLSkillNodeData
{
	int                                                NodeCid;                                                  // 0x0000(0x0004)
	int                                                StanceCid;                                                // 0x0004(0x0004)
	int                                                StanceSkillCid;                                           // 0x0008(0x0004)
	TEnumAsByte<EBLSkillNodeManageType>                ManageType;                                               // 0x000C(0x0001)
	TEnumAsByte<EBLSkillInfoType>                      NodeType;                                                 // 0x000D(0x0001)
};

// ScriptStruct BLGame.ABLDef.BLSkillTreeData
// 0x0040
struct FBLSkillTreeData
{
	int                                                TreeIndex;                                                // 0x0000(0x0004)
	int                                                StanceGemCount;                                           // 0x0004(0x0004)
	int                                                NonStanceGemCount;                                        // 0x0008(0x0004)
	int                                                ParameterGemCount;                                        // 0x000C(0x0004)
	TArray<struct FBLSkillNodeData>                    StanceNodeList;                                           // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FBLSkillNodeData>                    NonStanceNodeList;                                        // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FBLSkillNodeData>                    ParameterNodeList;                                        // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.ChallengeTowerLimitedCountInfoData
// 0x0010
struct FChallengeTowerLimitedCountInfoData
{
	int                                                Cid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                LimitCount;                                               // 0x0004(0x0004) (AlwaysInit)
	int                                                MaxAdditionalLimitCount;                                  // 0x0008(0x0004) (AlwaysInit)
	int                                                AdditionalLimitCount;                                     // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ChallengeTowerResultData
// 0x0008
struct FChallengeTowerResultData
{
	int                                                CompleteRound;                                            // 0x0000(0x0004) (AlwaysInit)
	int                                                ElapsedTimeToSeconds;                                     // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ChallengeTowerPersonalRecordData
// 0x000C
struct FChallengeTowerPersonalRecordData
{
	int                                                Cid;                                                      // 0x0000(0x0004) (AlwaysInit)
	struct FChallengeTowerResultData                   ResultData;                                               // 0x0004(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ChallengeTowerMemberInfo
// 0x0024
struct FChallengeTowerMemberInfo
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     GuildName;                                                // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Class;                                                    // 0x0020(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ChallengeTowerRankData
// 0x0018
struct FChallengeTowerRankData
{
	struct FChallengeTowerResultData                   ResultData;                                               // 0x0000(0x0008) (AlwaysInit)
	TArray<struct FChallengeTowerMemberInfo>           MemberInfoList;                                           // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.ChallengeTowerAttentionNPCData
// 0x0010
struct FChallengeTowerAttentionNPCData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                HP;                                                       // 0x0008(0x0004) (AlwaysInit)
	int                                                MaxHP;                                                    // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ChallengeTowerRoundResultInfoData
// 0x0010
struct FChallengeTowerRoundResultInfoData
{
	int                                                IsComplete;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                Round;                                                    // 0x0004(0x0004) (AlwaysInit)
	int                                                Grade;                                                    // 0x0008(0x0004) (AlwaysInit)
	int                                                RemainTimeToSeconds;                                      // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.TutorialOrderProgressInfo
// 0x0008
struct FTutorialOrderProgressInfo
{
	int                                                tutorialOrderCid;                                         // 0x0000(0x0004) (AlwaysInit)
	int                                                State;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CustomRevivalData
// 0x0024
struct FCustomRevivalData
{
	int                                                customRevivalSid;                                         // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     spawnerName;                                              // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FVector                                     Location;                                                 // 0x0014(0x000C) (AlwaysInit)
	int                                                revivalPointType;                                         // 0x0020(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CitadelOwnerGuildData
// 0x0030
struct FCitadelOwnerGuildData
{
	int                                                citadelCid;                                               // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     GuildName;                                                // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     guildLeaderName;                                          // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	struct FGuildMarkData                              GuildMarkData;                                            // 0x0024(0x000C) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.RealmOwnerGuildData
// 0x0030
struct FRealmOwnerGuildData
{
	int                                                RealmType;                                                // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     GuildName;                                                // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     guildLeaderName;                                          // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	struct FGuildMarkData                              GuildMarkData;                                            // 0x0024(0x000C) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.OrderObjectiveData
// 0x0008
struct FOrderObjectiveData
{
	int                                                COUNT;                                                    // 0x0000(0x0004) (AlwaysInit)
	int                                                ObjectiveState;                                           // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.OrderProgressInfo
// 0x001C
struct FOrderProgressInfo
{
	int                                                orderId;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                State;                                                    // 0x0004(0x0004) (AlwaysInit)
	int                                                Priority;                                                 // 0x0008(0x0004) (AlwaysInit)
	TArray<struct FOrderObjectiveData>                 orderObjectivesInfo;                                      // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.DuelResultData
// 0x0008
struct FDuelResultData
{
	int                                                ClassType;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                win;                                                      // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ColosseumMemberRegisterInfo
// 0x0008
struct FColosseumMemberRegisterInfo
{
	int                                                MemberSid;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                State;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ColosseumConfirmRegisterInfo
// 0x0020
struct FColosseumConfirmRegisterInfo
{
	TArray<struct FColosseumMemberRegisterInfo>        Union_MemberState;                                        // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FColosseumMemberRegisterInfo>        Hieron_MemberState;                                       // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.TrapData
// 0x002C
struct FTrapData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                SummonerPawnSid;                                          // 0x0008(0x0004) (AlwaysInit)
	int                                                Phase;                                                    // 0x000C(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0010(0x000C) (AlwaysInit)
	struct FRotator                                    Rotation;                                                 // 0x001C(0x000C) (AlwaysInit)
	int                                                ActivatedAuraCid;                                         // 0x0028(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.RiotControlStateData
// 0x0020
struct FRiotControlStateData
{
	int                                                StateType;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                Duration;                                                 // 0x0004(0x0004) (AlwaysInit)
	struct FVector                                     ToLocation;                                               // 0x0008(0x000C) (AlwaysInit)
	struct FRotator                                    ToRotation;                                               // 0x0014(0x000C) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCInfoData
// 0x003C (0x0070 - 0x0034)
struct FPCInfoData : public FContentInfoData
{
	unsigned char                                      ShakeOnVA;                                                // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	struct FPCInfoKey                                  KeyValue;                                                 // 0x0038(0x0004)
	float                                              CollisionCylinderRadius;                                  // 0x003C(0x0004)
	float                                              CollisionCylinderHeight;                                  // 0x0040(0x0004)
	float                                              BaseRunForwardSpeed;                                      // 0x0044(0x0004)
	float                                              BaseRunBackwardSpeed;                                     // 0x0048(0x0004)
	float                                              BaseWalkForwardSpeed;                                     // 0x004C(0x0004)
	float                                              BaseWalkBackwardSpeed;                                    // 0x0050(0x0004)
	float                                              BaseSwimForwardSpeed;                                     // 0x0054(0x0004)
	float                                              BaseSwimBackwardSpeed;                                    // 0x0058(0x0004)
	float                                              BaseFullRunForwardSpeed;                                  // 0x005C(0x0004)
	float                                              JumpAbility;                                              // 0x0060(0x0004)
	float                                              MaxStepHeight;                                            // 0x0064(0x0004)
	float                                              GradeAbility;                                             // 0x0068(0x0004)
	float                                              AimTargetMaxDistance;                                     // 0x006C(0x0004)
};

// ScriptStruct BLGame.LobbyPC.CharacterEnvironmentSetting
// 0x0030
struct FCharacterEnvironmentSetting
{
	struct FName                                       Tag;                                                      // 0x0000(0x0008)
	TArray<class ALight*>                              LightLists;                                               // 0x0008(0x0010) (NeedCtorLink)
	class APlayerStart*                                SpwnPlayerStart;                                          // 0x0018(0x0008)
	TArray<class ASkeletalMeshActor*>                  MeshActors;                                               // 0x0020(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.LobbyPC.CustomizeFileInfoStruct
// 0x0024
struct FCustomizeFileInfoStruct
{
	int                                                Index;                                                    // 0x0000(0x0004)
	struct FString                                     Filename;                                                 // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     FullPath;                                                 // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.LobbyPC.LobbyCCCameraSettingType
// 0x0018
struct FLobbyCCCameraSettingType
{
	struct FName                                       TargetBone;                                               // 0x0000(0x0008)
	float                                              CamDistance;                                              // 0x0008(0x0004)
	float                                              CamFOV;                                                   // 0x000C(0x0004)
	float                                              Shift;                                                    // 0x0010(0x0004)
	float                                              ZOffset;                                                  // 0x0014(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.PlayerEnvironmentData
// 0x0008
struct FPlayerEnvironmentData
{
	int                                                playerEnvironmentType;                                    // 0x0000(0x0004) (AlwaysInit)
	int                                                Value;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.BLTargetSelectComponent.TargetBaseData
// 0x0010
struct FTargetBaseData
{
	class ABLPawnBase*                                 PawnBase;                                                 // 0x0000(0x0008)
	float                                              Dist;                                                     // 0x0008(0x0004)
	int                                                Cid;                                                      // 0x000C(0x0004)
};

// ScriptStruct BLGame.BLTargetSelectComponent.TargetSelectData
// 0x000E (0x001E - 0x0010)
struct FTargetSelectData : public FTargetBaseData
{
	float                                              TabScore;                                                 // 0x0010(0x0004)
	float                                              RateResult;                                               // 0x0014(0x0004)
	float                                              Angle;                                                    // 0x0018(0x0004)
	TEnumAsByte<EFriendlyTargetType>                   FriendlyTargetType;                                       // 0x001C(0x0001)
	TEnumAsByte<EHostileTargetType>                    HostileTargetType;                                        // 0x001D(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftSpotInfoData
// 0x0014 (0x0048 - 0x0034)
struct FCraftSpotInfoData : public FContentInfoData
{
	TArray<TEnumAsByte<ECEV2CraftCategoryType>>        Prop_craft_category;                                      // 0x0034(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	float                                              Craftable_distance;                                       // 0x0044(0x0004) (Transient)
};

// ScriptStruct BLGame.BLTargetSelectComponent.TargetCraftSpotData
// 0x004C (0x005C - 0x0010)
struct FTargetCraftSpotData : public FTargetBaseData
{
	struct FCraftSpotInfoData                          InfoData;                                                 // 0x0010(0x0048) (NeedCtorLink)
	int                                                Sid;                                                      // 0x0058(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.AttackHandResult
// 0x0008
struct FAttackHandResult
{
	int                                                DecidedAttackChance;                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Damage;                                                   // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AttackTargetResult
// 0x0014
struct FAttackTargetResult
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	struct FAttackHandResult                           AttackMainHandResult;                                     // 0x0004(0x0008) (AlwaysInit)
	struct FAttackHandResult                           AttackOffHandResult;                                      // 0x000C(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AttackHandHitTimeResult
// 0x0010
struct FAttackHandHitTimeResult
{
	int                                                Hand;                                                     // 0x0000(0x0004) (AlwaysInit)
	int                                                HitTiming;                                                // 0x0004(0x0004) (AlwaysInit)
	int                                                DamageDividePerHitTiming;                                 // 0x0008(0x0004) (AlwaysInit)
	int                                                ImpactDelay;                                              // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AttackResult
// 0x0020
struct FAttackResult
{
	TArray<struct FAttackTargetResult>                 AttackTargetResults;                                      // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FAttackHandHitTimeResult>            AttackHandHitTimeResults;                                 // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillDamageInfo
// 0x0008
struct FSkillDamageInfo
{
	int                                                DamageType;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                Damage;                                                   // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.RiotControlData
// 0x0018
struct FRiotControlData
{
	int                                                RiotContolType;                                           // 0x0000(0x0004) (AlwaysInit)
	int                                                RiotAppliedType;                                          // 0x0004(0x0004) (AlwaysInit)
	TArray<struct FRiotControlStateData>               RiotControlSequenceData;                                  // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillResult
// 0x0030
struct FSkillResult
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                AttackChance;                                             // 0x0004(0x0004) (AlwaysInit)
	TArray<struct FSkillDamageInfo>                    DamageList;                                               // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	struct FRiotControlData                            RiotControlApplyData;                                     // 0x0018(0x0018) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLTypes.SkillRequestInfo
// 0x00A8
struct FSkillRequestInfo
{
	class USkillAsset*                                 Asset;                                                    // 0x0000(0x0008)
	class USkillAsset*                                 PrepareAsset;                                             // 0x0008(0x0008)
	int                                                SkillID;                                                  // 0x0010(0x0004)
	int                                                ChargeInvokeSkillID;                                      // 0x0014(0x0004)
	TEnumAsByte<ECETargetingType>                      TargetingType;                                            // 0x0018(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	int                                                TargetID;                                                 // 0x001C(0x0004)
	struct FVector                                     TargetLocation;                                           // 0x0020(0x000C)
	float                                              ServerCastingTime;                                        // 0x002C(0x0004)
	float                                              ServerFiringTime;                                         // 0x0030(0x0004)
	float                                              OriginalCastingTime;                                      // 0x0034(0x0004)
	float                                              OriginalFiringTime;                                       // 0x0038(0x0004)
	float                                              CastingRemainTime;                                        // 0x003C(0x0004)
	TArray<struct FSkillResult>                        ResultList;                                               // 0x0040(0x0010) (NeedCtorLink)
	class UClass*                                      BSM;                                                      // 0x0050(0x0008)
	class UBroadwayInfo*                               CastingBroadway;                                          // 0x0058(0x0008)
	class UBroadwayInfo*                               Broadway;                                                 // 0x0060(0x0008)
	class UBroadwayInfo*                               NextBroadway;                                             // 0x0068(0x0008)
	TEnumAsByte<ESkillSyncStep>                        SkillStep;                                                // 0x0070(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0071(0x0003) MISSED OFFSET
	unsigned long                                      bChannelingSkill : 1;                                     // 0x0074(0x0004)
	float                                              ChannelingSkillRemainTime;                                // 0x0078(0x0004)
	float                                              ChannelingSkillTotalTime;                                 // 0x007C(0x0004)
	unsigned long                                      bChannelingSkillTickFinishCheck : 1;                      // 0x0080(0x0004)
	unsigned long                                      bIgnoreMoveInput : 1;                                     // 0x0080(0x0004)
	unsigned long                                      bCanceledByMoving : 1;                                    // 0x0080(0x0004)
	float                                              IgnoreMoveInputBreakTime;                                 // 0x0084(0x0004)
	int                                                ResultKey;                                                // 0x0088(0x0004)
	unsigned long                                      bAbleRush : 1;                                            // 0x008C(0x0004)
	unsigned long                                      bChargeSkill : 1;                                         // 0x008C(0x0004)
	int                                                CurrentChargeStep;                                        // 0x0090(0x0004)
	TArray<float>                                      ChargeTimes;                                              // 0x0094(0x0010) (NeedCtorLink)
	float                                              CurrentStepRemainingTime;                                 // 0x00A4(0x0004)
};

// ScriptStruct BLGame.BLTypes.ActionSyncInfo
// 0x0144
struct FActionSyncInfo
{
	int                                                TargetID;                                                 // 0x0000(0x0004)
	struct FVector                                     Location;                                                 // 0x0004(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x0010(0x000C)
	struct FVector                                     Velocity;                                                 // 0x001C(0x000C)
	float                                              ApproachRadius;                                           // 0x0028(0x0004)
	TEnumAsByte<EActionSyncStep>                       Step;                                                     // 0x002C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	struct FDouble                                     InitSeconds;                                              // 0x0030(0x0008)
	struct FDouble                                     PrevMovedTime;                                            // 0x0038(0x0008)
	struct FVector                                     PrevLocation;                                             // 0x0040(0x000C)
	struct FVector                                     PrevVelocity;                                             // 0x004C(0x000C)
	float                                              DelaySeconds;                                             // 0x0058(0x0004)
	float                                              NetworkLatency;                                           // 0x005C(0x0004)
	struct FName                                       BSM;                                                      // 0x0060(0x0008)
	struct FAttackResult                               ServerAttackResult;                                       // 0x0068(0x0020) (NeedCtorLink)
	unsigned long                                      bFiredAttack : 1;                                         // 0x0088(0x0004)
	unsigned long                                      bJump : 1;                                                // 0x0088(0x0004)
	unsigned long                                      bIsRootMotion : 1;                                        // 0x0088(0x0004)
	TEnumAsByte<EMoveSpeedType>                        MoveSpeed;                                                // 0x008C(0x0001)
	TEnumAsByte<EMoveState>                            MoveState;                                                // 0x008D(0x0001)
	TEnumAsByte<EPawnPhysics>                          PawnPhysics;                                              // 0x008E(0x0001)
	unsigned char                                      UnknownData01[0x1];                                       // 0x008F(0x0001) MISSED OFFSET
	unsigned long                                      bDoAttack : 1;                                            // 0x0090(0x0004)
	TEnumAsByte<ESkillSyncStep>                        SkillStep;                                                // 0x0094(0x0001)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0095(0x0003) MISSED OFFSET
	struct FSkillRequestInfo                           SkillInfo;                                                // 0x0098(0x00A8) (NeedCtorLink)
	unsigned long                                      bWhenArrivedZeroMovement : 1;                             // 0x0140(0x0004)
};

// ScriptStruct BLGame.MsgCommandDecider.MsgCommandData
// 0x0048
struct FMsgCommandData
{
	struct FString                                     PrefixType;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CommandName;                                              // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             AliasCommandNames;                                        // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ProcessCmd;                                               // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ArgCount;                                                 // 0x0040(0x0004)
	unsigned long                                      bLooseParsing : 1;                                        // 0x0044(0x0004)
};

// ScriptStruct BLGame.MsgCommandDecider.MsgCommandDelegate
// 0x0020
struct FMsgCommandDelegate
{
	struct FScriptDelegate                             DelegateFunc;                                             // 0x0000(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData00[0x4];                                       // 0x0000(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FString                                     ProcessCmd;                                               // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.MsgCommandDecider.SocialActionCommandData
// 0x0024
struct FSocialActionCommandData
{
	struct FString                                     PrefixType;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             CommandNames;                                             // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SocialActionCid;                                          // 0x0020(0x0004)
};

// ScriptStruct BLGame.MsgCommandDecider.SocialActionTriggerData
// 0x0014
struct FSocialActionTriggerData
{
	TArray<struct FString>                             TriggerNames;                                             // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SocialActionCid;                                          // 0x0010(0x0004)
};

// ScriptStruct BLGame.BLPlayerInput.ButtonInfo
// 0x0020
struct FButtonInfo
{
	struct FString                                     ButtonName;                                               // 0x0000(0x0010) (NeedCtorLink)
	TArray<struct FString>                             KeyList;                                                  // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.OnlineKeyEventBinder.KeyActionBind
// 0x001C
struct FKeyActionBind
{
	struct FName                                       KeyName;                                                  // 0x0000(0x0008)
	struct FName                                       ActionName;                                               // 0x0008(0x0008)
	unsigned long                                      Control : 1;                                              // 0x0010(0x0004)
	unsigned long                                      Shift : 1;                                                // 0x0010(0x0004)
	unsigned long                                      Alt : 1;                                                  // 0x0010(0x0004)
	unsigned long                                      bLMButton : 1;                                            // 0x0010(0x0004)
	unsigned long                                      bRMButton : 1;                                            // 0x0010(0x0004)
	unsigned long                                      bDoubleClick : 1;                                         // 0x0010(0x0004)
	TEnumAsByte<EPC_STATE>                             PCState;                                                  // 0x0014(0x0001)
	TEnumAsByte<EWorldMap_State>                       EnableInWorldMap;                                         // 0x0015(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0016(0x0002) MISSED OFFSET
	int                                                IndexPriority;                                            // 0x0018(0x0004) (Transient)
};

// ScriptStruct BLGame.OnlineKeyEventBinder.ActionFuncBind
// 0x0018
struct FActionFuncBind
{
	struct FName                                       ActionName;                                               // 0x0000(0x0008)
	struct FString                                     FuncCommand;                                              // 0x0008(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.CustomizeUISettingInfo
// 0x000C
struct FCustomizeUISettingInfo
{
	TEnumAsByte<ECECustomizeType>                      CustomizeType;                                            // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                RawData;                                                  // 0x0004(0x0004) (Edit)
	struct FColor                                      ColorValue;                                               // 0x0008(0x0004) (Edit)
};

// ScriptStruct BLGame.BLNPCLocationReviser.NPCLocationReviseInfo
// 0x0024
struct FNPCLocationReviseInfo
{
	int                                                NpcSid;                                                   // 0x0000(0x0004)
	struct FVector                                     ServerSpawnLocation;                                      // 0x0004(0x000C)
	struct FVector                                     LastUpdatedLocation;                                      // 0x0010(0x000C)
	float                                              CheckTimer;                                               // 0x001C(0x0004)
	float                                              RemainTimer;                                              // 0x0020(0x0004)
};

// ScriptStruct BLGame.BLPawnBase.BodyStance
// 0x0024
struct FBodyStance
{
	struct FName                                       FullBodySeq;                                              // 0x0000(0x0008)
	struct FName                                       StandBodySeq;                                             // 0x0008(0x0008)
	struct FName                                       StandUpperBodySeq;                                        // 0x0010(0x0008)
	struct FName                                       RunUpperBodySeq;                                          // 0x0018(0x0008)
	unsigned long                                      bEarlyAnimEndNotify : 1;                                  // 0x0020(0x0004)
};

// ScriptStruct BLGame.ABLDef.BlessSpecialMoveInfo
// 0x0018
struct FBlessSpecialMoveInfo
{
	struct FName                                       SpecialMoveName;                                          // 0x0000(0x0008) (Edit)
	class UClass*                                      SpecialMoveClass;                                         // 0x0008(0x0008) (Edit)
	class UBSM_Base*                                   SpecialMoveInstance;                                      // 0x0010(0x0008) (Edit)
};

// ScriptStruct BLGame.ABLDef.BLSpecialMoveStruct
// 0x0024
struct FBLSpecialMoveStruct
{
	struct FName                                       SpecialMoveName;                                          // 0x0000(0x0008)
	class ABLPawnBase*                                 InteractionPawn;                                          // 0x0008(0x0008)
	class AActor*                                      InteractionActor;                                         // 0x0010(0x0008)
	int                                                Flags;                                                    // 0x0018(0x0004)
	class UBSM_BaseParameter*                          SpecialMoveParameter;                                     // 0x001C(0x0008)
};

// ScriptStruct BLGame.ABLSDLTypes.AbnormalStatusDurationData
// 0x0010
struct FAbnormalStatusDurationData
{
	int                                                Cid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                CasterSID;                                                // 0x0004(0x0004) (AlwaysInit)
	float                                              DurationSeconds;                                          // 0x0008(0x0004) (AlwaysInit)
	float                                              RemainingDurationSeconds;                                 // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.PreloadingAsset.PreloadingClassData
// 0x0068
struct FPreloadingClassData
{
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	unsigned long                                      IsFloatingWeapon : 1;                                     // 0x0004(0x0004) (Edit)
	class UAnimSet*                                    WeaponAnimSet;                                            // 0x0008(0x0008) (Edit)
	class UAnimNotifySet*                              WeaponAnimNotifySet;                                      // 0x0010(0x0008) (Edit)
	class USkeletalMesh*                               WeaponSkeletalMeshR;                                      // 0x0018(0x0008) (Edit)
	struct FName                                       SheatheBoneNameR;                                         // 0x0020(0x0008) (Edit)
	struct FRotator                                    SheatheRotateR;                                           // 0x0028(0x000C) (Edit)
	struct FVector                                     SheatheLocationR;                                         // 0x0034(0x000C) (Edit)
	class USkeletalMesh*                               WeaponSkeletalMeshL;                                      // 0x0040(0x0008) (Edit)
	struct FName                                       SheatheBoneNameL;                                         // 0x0048(0x0008) (Edit)
	struct FRotator                                    SheatheRotateL;                                           // 0x0050(0x000C) (Edit)
	struct FVector                                     SheatheLocationL;                                         // 0x005C(0x000C) (Edit)
};

// ScriptStruct BLGame.PreloadingAsset.PreloadingPawnData
// 0x002C
struct FPreloadingPawnData
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0000(0x0001) (Edit)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0001(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	class USkeletalMesh*                               BodySkeletalMesh;                                         // 0x0004(0x0008) (Edit)
	class UAnimTree*                                   AnimTree;                                                 // 0x000C(0x0008) (Edit)
	class UAnimSet*                                    AnimSet;                                                  // 0x0014(0x0008) (Edit)
	TArray<struct FPreloadingClassData>                ClassData;                                                // 0x001C(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.BLPawn.AnimSeqWeightInfo
// 0x000C
struct FAnimSeqWeightInfo
{
	struct FName                                       AnimSeqName;                                              // 0x0000(0x0008)
	float                                              Weight;                                                   // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.ParamData
// 0x0008
struct FParamData
{
	int                                                Type;                                                     // 0x0000(0x0004) (AlwaysInit)
	float                                              Value;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.VoluntaryActionInfoData
// 0x0034 (0x0068 - 0x0034)
struct FVoluntaryActionInfoData : public FContentInfoData
{
	TEnumAsByte<ECEVoluntaryActionType>                ActionType;                                               // 0x0034(0x0001) (Const)
	TEnumAsByte<ECEAbleUnableType>                     AllowMove;                                                // 0x0035(0x0001) (Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	struct FString                                     TooltipTemplate;                                          // 0x0038(0x0010) (Const, AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEEquipSlotType>>              InvokableItemEquipSlotTypes;                              // 0x0048(0x0010) (Const, AlwaysInit, NeedCtorLink)
	float                                              InstantTypeTerm;                                          // 0x0058(0x0004) (Const)
	int                                                InitialConsumeEnergy;                                     // 0x005C(0x0004) (Const)
	int                                                PeriodicConsumeEnergy;                                    // 0x0060(0x0004) (Const)
	int                                                IconIndex;                                                // 0x0064(0x0004) (Const)
};

// ScriptStruct BLGame.ABLDef.EquipSet
// 0x00B4
struct FEquipSet
{
	int                                                MainHand;                                                 // 0x0000(0x0004) (Edit)
	class UItemAsset*                                  MainHandItem;                                             // 0x0004(0x0008) (Edit, EditConst, EditInline)
	int                                                OffHand;                                                  // 0x000C(0x0004) (Edit)
	class UItemAsset*                                  OffHandItem;                                              // 0x0010(0x0008) (Edit, EditConst, EditInline)
	int                                                head;                                                     // 0x0018(0x0004) (Edit)
	class UItemAsset*                                  HeadItem;                                                 // 0x001C(0x0008) (Edit, EditConst, EditInline)
	int                                                Chest;                                                    // 0x0024(0x0004) (Edit)
	class UItemAsset*                                  ChestItem;                                                // 0x0028(0x0008) (Edit, EditConst, EditInline)
	int                                                Belt;                                                     // 0x0030(0x0004) (Edit)
	class UItemAsset*                                  BeltItem;                                                 // 0x0034(0x0008) (Edit, EditConst, EditInline)
	int                                                Legging;                                                  // 0x003C(0x0004) (Edit)
	class UItemAsset*                                  LeggingItem;                                              // 0x0040(0x0008) (Edit, EditConst, EditInline)
	int                                                Boots;                                                    // 0x0048(0x0004) (Edit)
	class UItemAsset*                                  BootsItem;                                                // 0x004C(0x0008) (Edit, EditConst, EditInline)
	int                                                Shoulder;                                                 // 0x0054(0x0004) (Edit)
	class UItemAsset*                                  ShoulderItem;                                             // 0x0058(0x0008) (Edit, EditConst, EditInline)
	int                                                Glove;                                                    // 0x0060(0x0004) (Edit)
	class UItemAsset*                                  GloveItem;                                                // 0x0064(0x0008) (Edit, EditConst, EditInline)
	int                                                Cloak;                                                    // 0x006C(0x0004) (Edit)
	class UItemAsset*                                  CloakItem;                                                // 0x0070(0x0008) (Edit, EditConst, EditInline)
	int                                                Underwear;                                                // 0x0078(0x0004) (Edit)
	class UItemAsset*                                  UnderwearItem;                                            // 0x007C(0x0008) (Edit, EditConst, EditInline)
	int                                                NecklaceLong;                                             // 0x0084(0x0004) (Edit)
	class UItemAsset*                                  NecklaceLongItem;                                         // 0x0088(0x0008) (Edit, EditConst, EditInline)
	int                                                NecklaceShort;                                            // 0x0090(0x0004) (Edit)
	class UItemAsset*                                  NecklaceShortItem;                                        // 0x0094(0x0008) (Edit, EditConst, EditInline)
	int                                                EarringLeft;                                              // 0x009C(0x0004) (Edit)
	class UItemAsset*                                  EarringLeftItem;                                          // 0x00A0(0x0008) (Edit, EditConst, EditInline)
	int                                                EarringRight;                                             // 0x00A8(0x0004) (Edit)
	class UItemAsset*                                  EarringRightItem;                                         // 0x00AC(0x0008) (Edit, EditConst, EditInline)
};

// ScriptStruct BLGame.BLPawn.ImportantActionSyncInfo
// 0x001C
struct FImportantActionSyncInfo
{
	struct FVector                                     ImportantActionLocation;                                  // 0x0000(0x000C) (Transient)
	struct FRotator                                    ImportantActionRotation;                                  // 0x000C(0x000C) (Transient)
	int                                                ImportantActionId;                                        // 0x0018(0x0004) (Transient)
};

// ScriptStruct BLGame.BLTypes.NormalAttackResult
// 0x0009
struct FNormalAttackResult
{
	int                                                Sid;                                                      // 0x0000(0x0004)
	int                                                Damage;                                                   // 0x0004(0x0004)
	TEnumAsByte<ECEAttackChanceType>                   AttackChance;                                             // 0x0008(0x0001)
};

// ScriptStruct BLGame.BLTypes.AttackRequestInfo
// 0x0028
struct FAttackRequestInfo
{
	int                                                TargetID;                                                 // 0x0000(0x0004)
	class UBroadwayInfo*                               Broadway;                                                 // 0x0004(0x0008)
	float                                              AttackTime;                                               // 0x000C(0x0004)
	float                                              OriginalAttackTime;                                       // 0x0010(0x0004)
	class UClass*                                      BSM;                                                      // 0x0014(0x0008)
	struct FNormalAttackResult                         Result;                                                   // 0x001C(0x000C)
};

// ScriptStruct BLGame.BLTypes.VoluntaryActionRequestInfo
// 0x0014
struct FVoluntaryActionRequestInfo
{
	int                                                VoluntaryActionID;                                        // 0x0000(0x0004) (Transient)
	class UBroadwayInfo*                               Broadway;                                                 // 0x0004(0x0008) (Transient)
	unsigned long                                      bHoldType : 1;                                            // 0x000C(0x0004) (Transient)
	unsigned long                                      bMovable : 1;                                             // 0x000C(0x0004) (Transient)
	float                                              LimitTimer;                                               // 0x0010(0x0004) (Transient)
};

// ScriptStruct BLGame.BLTypes.SocialActionRequestInfo
// 0x000C
struct FSocialActionRequestInfo
{
	int                                                SocialActionID;                                           // 0x0000(0x0004) (Transient)
	class UBroadwayInfo*                               Broadway;                                                 // 0x0004(0x0008) (Transient)
};

// ScriptStruct BLGame.BLPawn.AnimationFreezeInfo
// 0x000C
struct FAnimationFreezeInfo
{
	float                                              Timer;                                                    // 0x0000(0x0004)
	float                                              FreezedTime;                                              // 0x0004(0x0004)
	float                                              RemainTime;                                               // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLTypes.DelaySkillFiringInfo
// 0x0018
struct FDelaySkillFiringInfo
{
	int                                                SkillID;                                                  // 0x0000(0x0004)
	float                                              ServerFiringTime;                                         // 0x0004(0x0004)
	float                                              OriginalFiringTime;                                       // 0x0008(0x0004)
	unsigned long                                      bChanneling : 1;                                          // 0x000C(0x0004)
	unsigned long                                      bIgnoreMoveInput : 1;                                     // 0x000C(0x0004)
	unsigned long                                      bChancledByMoving : 1;                                    // 0x000C(0x0004)
	float                                              IgnoreMoveInputBreakTime;                                 // 0x0010(0x0004)
	float                                              RegisteredTime;                                           // 0x0014(0x0004)
};

// ScriptStruct BLGame.ABLDef.IndexVectorParameter
// 0x0010
struct FIndexVectorParameter
{
	int                                                Index;                                                    // 0x0000(0x0004)
	struct FVector                                     Point;                                                    // 0x0004(0x000C)
};

// ScriptStruct BLGame.ABLDef.IndexRotationParameter
// 0x0020
struct FIndexRotationParameter
{
	int                                                Index;                                                    // 0x0000(0x0004)
	unsigned char                                      UnknownData00[0xC];                                       // 0x0004(0x000C) MISSED OFFSET
	struct FQuat                                       Rotation;                                                 // 0x0010(0x0010)
};

// ScriptStruct BLGame.BLPawn.BoneDeformationCacheData
// 0x0040
struct FBoneDeformationCacheData
{
	TArray<struct FIndexVectorParameter>               CharacterizeBoneTranslation;                              // 0x0000(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FIndexRotationParameter>             CharacterizeBoneRotation;                                 // 0x0010(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FIndexVectorParameter>               CharacterizeBoneScale;                                    // 0x0020(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FIndexVectorParameter>               CharacterizeBoneScaledTranslationScale;                   // 0x0030(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLNpcBase.MoveToAction
// 0x002C
struct FMoveToAction
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C)
	float                                              Speed;                                                    // 0x000C(0x0004)
	struct FVector                                     ServerLocation;                                           // 0x0010(0x000C)
	struct FRotator                                    ServerRotation;                                           // 0x001C(0x000C)
	unsigned long                                      bReached : 1;                                             // 0x0028(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.HateActorData
// 0x0008
struct FHateActorData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                aggroPoint;                                               // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.ObjectiveNPCInfo
// 0x0005
struct FObjectiveNPCInfo
{
	int                                                NpcCid;                                                   // 0x0000(0x0004)
	TEnumAsByte<ECEQuestType>                          QuestType;                                                // 0x0004(0x0001)
};

// ScriptStruct BLGame.ABLDef.GradeFXData
// 0x0010
struct FGradeFXData
{
	struct FName                                       SocketName;                                               // 0x0000(0x0008) (Edit)
	class UParticleSystem*                             FX;                                                       // 0x0008(0x0008) (Edit)
};

// ScriptStruct BLGame.ABLSDLTypes.PetData
// 0x0028
struct FPetData
{
	int                                                PetSId;                                                   // 0x0000(0x0004) (AlwaysInit)
	int                                                PetCId;                                                   // 0x0004(0x0004) (AlwaysInit)
	int                                                OwnerSid;                                                 // 0x0008(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x000C(0x000C) (AlwaysInit)
	struct FRotator                                    Rotation;                                                 // 0x0018(0x000C) (AlwaysInit)
	int                                                Grade;                                                    // 0x0024(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountChangeParamData
// 0x000C
struct FMountChangeParamData
{
	TEnumAsByte<ECEMountParamType>                     MountParamType;                                           // 0x0000(0x0001)
	TEnumAsByte<ECEParamChangeType>                    MountParamChangeType;                                     // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	float                                              Amount1;                                                  // 0x0004(0x0004)
	float                                              Amount2;                                                  // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountSkillInfoData
// 0x0084 (0x00B8 - 0x0034)
struct FMountSkillInfoData : public FContentInfoData
{
	TEnumAsByte<ECEMountActiveSkillInterfaceType>      MountActiveSkillInterfaceType;                            // 0x0034(0x0001)
	unsigned char                                      ActivateAble;                                             // 0x0035(0x0001)
	TEnumAsByte<ECEMountSkillBindingType>              KeyBindingType;                                           // 0x0036(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	TArray<int>                                        ActiveAbnormalStatusList;                                 // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        PassiveAbnormalStatusList;                                // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        UnmountAbnormalStatusList;                                // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FMountChangeParamData>               PassiveChangeParamList;                                   // 0x0068(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FMountChangeParamData>               ActiveChangeParamList;                                    // 0x0078(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IconIndex;                                                // 0x0088(0x0004)
	int                                                SkillGroupCid;                                            // 0x008C(0x0004)
	int                                                SkillGrade;                                               // 0x0090(0x0004)
	int                                                InitialConsume;                                           // 0x0094(0x0004)
	int                                                PeriodicConsume;                                          // 0x0098(0x0004)
	float                                              ApplyMoment;                                              // 0x009C(0x0004)
	float                                              ActionTerm;                                               // 0x00A0(0x0004)
	struct FString                                     TooltipTemplate;                                          // 0x00A4(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              SkillCoolTime;                                            // 0x00B4(0x0004)
};

// ScriptStruct BLGame.BLTypes.MountRepInfo
// 0x0038
struct FMountRepInfo
{
	int                                                PrepareMountCid;                                          // 0x0000(0x0004)
	float                                              PrepareCastingTotalTime;                                  // 0x0004(0x0004)
	int                                                MountCId;                                                 // 0x0008(0x0004)
	struct FQWord                                      MountUid;                                                 // 0x000C(0x0008)
	int                                                MountLookCid;                                             // 0x0014(0x0004)
	int                                                MountLevel;                                               // 0x0018(0x0004)
	TEnumAsByte<ECECompanionGradeType>                 MountGrade;                                               // 0x001C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
	int                                                MountSkillCid_WW;                                         // 0x0020(0x0004)
	int                                                MountSkillCid_C;                                          // 0x0024(0x0004)
	int                                                MountFatigue;                                             // 0x0028(0x0004)
	int                                                MountFatigueMax;                                          // 0x002C(0x0004)
	unsigned long                                      IsFlyable : 1;                                            // 0x0030(0x0004)
	int                                                AppliedMountLookCid;                                      // 0x0034(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2MountAnimInfoData
// 0x0240 (0x0274 - 0x0034)
struct FV2MountAnimInfoData : public FContentInfoData
{
	struct FString                                     Idle;                                                     // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RunF;                                                     // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RunFStart;                                                // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RunFStop;                                                 // 0x0064(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RunB;                                                     // 0x0074(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RunJumpUp;                                                // 0x0084(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RunJumpLoop;                                              // 0x0094(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RunJumpLand;                                              // 0x00A4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     IdleRotLStart;                                            // 0x00B4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     IdleRotLLoop;                                             // 0x00C4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     IdleRotRStart;                                            // 0x00D4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     IdleRotRLoop;                                             // 0x00E4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDBrake;                                                 // 0x00F4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDRotL;                                                  // 0x0104(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDRotR;                                                  // 0x0114(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDRotPoseL;                                              // 0x0124(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDRotPoseR;                                              // 0x0134(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     JumpLand;                                                 // 0x0144(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountIdleSpineBackward;                                // 0x0154(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountIdleSpineForward;                                 // 0x0164(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountIdleArmUpward;                                    // 0x0174(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountIdleArmDownward;                                  // 0x0184(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountIdleArmFold;                                      // 0x0194(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountIdleLegNarrower;                                  // 0x01A4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountIdleLegWider;                                     // 0x01B4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountRunFSpineBackward;                                // 0x01C4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountRunFSpineForward;                                 // 0x01D4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountRunFArmUpward;                                    // 0x01E4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountRunFArmDownward;                                  // 0x01F4(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountRunFArmFold;                                      // 0x0204(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountRunFLegNarrower;                                  // 0x0214(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ADDMountRunFLegWider;                                     // 0x0224(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     FlyingIdle;                                               // 0x0234(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     FlyingFFlutter;                                           // 0x0244(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     FlyingB;                                                  // 0x0254(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Special;                                                  // 0x0264(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountLookInfoData
// 0x0044 (0x0078 - 0x0034)
struct FMountLookInfoData : public FContentInfoData
{
	unsigned char                                      MountAnimType;                                            // 0x0034(0x0001)
	TEnumAsByte<ECEMountSpineMethodType>               IdleSpineMethod;                                          // 0x0035(0x0001)
	TEnumAsByte<ECEMountArmMethodType>                 IdleArmMethod;                                            // 0x0036(0x0001)
	TEnumAsByte<ECEMountLegMethodType>                 IdleLegMethod;                                            // 0x0037(0x0001)
	TEnumAsByte<ECEMountSpineMethodType>               RunFSpineMethod;                                          // 0x0038(0x0001)
	TEnumAsByte<ECEMountArmMethodType>                 RunFArmMethod;                                            // 0x0039(0x0001)
	TEnumAsByte<ECEMountLegMethodType>                 RunFLegMethod;                                            // 0x003A(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x003B(0x0001) MISSED OFFSET
	int                                                IconIndex;                                                // 0x003C(0x0004)
	int                                                NPC_Cid;                                                  // 0x0040(0x0004)
	int                                                GradeFXCid;                                               // 0x0044(0x0004)
	float                                              BaseRunForwardSpeed;                                      // 0x0048(0x0004)
	float                                              BaseRunBackwardSpeed;                                     // 0x004C(0x0004)
	float                                              BaseFlyingForwardSpeed;                                   // 0x0050(0x0004)
	float                                              BaseFlyingBackwardSpeed;                                  // 0x0054(0x0004)
	float                                              IdleSpineValue;                                           // 0x0058(0x0004)
	float                                              IdleArmValue;                                             // 0x005C(0x0004)
	float                                              IdleArmFoldValue;                                         // 0x0060(0x0004)
	float                                              IdleLegValue;                                             // 0x0064(0x0004)
	float                                              RunFSpineValue;                                           // 0x0068(0x0004)
	float                                              RunFArmValue;                                             // 0x006C(0x0004)
	float                                              RunFArmFoldValue;                                         // 0x0070(0x0004)
	float                                              RunFLegValue;                                             // 0x0074(0x0004)
};

// ScriptStruct BLGame.BLVehiclePawn.DriverDataToRestore
// 0x0010
struct FDriverDataToRestore
{
	unsigned long                                      bColideActor : 1;                                         // 0x0000(0x0004)
	unsigned long                                      bBlockActors : 1;                                         // 0x0000(0x0004)
	unsigned long                                      bIgnoreEncroachers : 1;                                   // 0x0000(0x0004)
	unsigned long                                      bCollideWorld : 1;                                        // 0x0000(0x0004)
	class AActor*                                      Base;                                                     // 0x0004(0x0008)
	unsigned long                                      bHardAttach : 1;                                          // 0x000C(0x0004)
	unsigned long                                      bHidden : 1;                                              // 0x000C(0x0004)
	unsigned long                                      bNoEncroachCheck : 1;                                     // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.WaypointProgressInfo
// 0x0014
struct FWaypointProgressInfo
{
	float                                              ElapsedTimeInSeconds;                                     // 0x0000(0x0004) (AlwaysInit)
	TArray<int>                                        RouteArray;                                               // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.PCGuildData
// 0x0038
struct FPCGuildData
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MarkURL;                                                  // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	struct FGuildMarkData                              GuildMarkData;                                            // 0x0020(0x000C) (AlwaysInit)
	int                                                GuildWarLastSeasonWinCount;                               // 0x002C(0x0004) (AlwaysInit)
	int                                                IsRO;                                                     // 0x0030(0x0004) (AlwaysInit)
	int                                                IsCO;                                                     // 0x0034(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.OtherPCData
// 0x0154
struct FOtherPCData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0004(0x000C) (AlwaysInit)
	struct FRotator                                    Rotation;                                                 // 0x0010(0x000C) (AlwaysInit)
	struct FPawnStateData                              PawnStateData;                                            // 0x001C(0x0014) (AlwaysInit)
	struct FPawnParamData                              PawnParamData;                                            // 0x0030(0x0048) (AlwaysInit, NeedCtorLink)
	struct FPawnMovePhysicsData                        PawnMovePhysicsData;                                      // 0x0078(0x0024) (AlwaysInit)
	TArray<struct FAbnormalStatusData>                 AbnormalStatusDataList;                                   // 0x009C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FEquipedItemData>                    EquipmentItemDataList;                                    // 0x00AC(0x0010) (AlwaysInit, NeedCtorLink)
	struct FWaypointProgressInfo                       WaypointProgressInfo;                                     // 0x00BC(0x0014) (AlwaysInit, NeedCtorLink)
	struct FCustomizeData                              CustomizeData;                                            // 0x00D0(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        AuraList;                                                 // 0x00E0(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                burdenCid;                                                // 0x00F0(0x0004) (AlwaysInit)
	int                                                mount_id;                                                 // 0x00F4(0x0004) (AlwaysInit)
	int                                                mount_flying;                                             // 0x00F8(0x0004) (AlwaysInit)
	int                                                IsEnemy;                                                  // 0x00FC(0x0004) (AlwaysInit)
	struct FPCGuildData                                GuildData;                                                // 0x0100(0x0038) (AlwaysInit, NeedCtorLink)
	int                                                RXP;                                                      // 0x0138(0x0004) (AlwaysInit)
	int                                                LimitedRank;                                              // 0x013C(0x0004) (AlwaysInit)
	int                                                AdjustLevel;                                              // 0x0140(0x0004) (AlwaysInit)
	int                                                CurrentPetSId;                                            // 0x0144(0x0004) (AlwaysInit)
	int                                                ShowCostume;                                              // 0x0148(0x0004) (AlwaysInit)
	int                                                mount_grade;                                              // 0x014C(0x0004) (AlwaysInit)
	int                                                mount_level;                                              // 0x0150(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PawnParam1st
// 0x0020
struct FPawnParam1st
{
	int                                                Strength;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                Agility;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                Intelligence;                                             // 0x0008(0x0004) (AlwaysInit)
	int                                                Wisdom;                                                   // 0x000C(0x0004) (AlwaysInit)
	int                                                Stamina;                                                  // 0x0010(0x0004) (AlwaysInit)
	int                                                Technique;                                                // 0x0014(0x0004) (AlwaysInit)
	int                                                Balance;                                                  // 0x0018(0x0004) (AlwaysInit)
	int                                                Quickness;                                                // 0x001C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PawnParam2nd
// 0x004C
struct FPawnParam2nd
{
	int                                                Armor;                                                    // 0x0000(0x0004) (AlwaysInit)
	int                                                SpellArmor;                                               // 0x0004(0x0004) (AlwaysInit)
	int                                                AttackPower;                                              // 0x0008(0x0004) (AlwaysInit)
	int                                                SpellPower;                                               // 0x000C(0x0004) (AlwaysInit)
	int                                                MainWeaponMinDamage;                                      // 0x0010(0x0004) (AlwaysInit)
	int                                                MainWeaponMaxDamage;                                      // 0x0014(0x0004) (AlwaysInit)
	float                                              MainWeaponAttackPeriod;                                   // 0x0018(0x0004) (AlwaysInit)
	int                                                WeaponSpellDamageMin;                                     // 0x001C(0x0004) (AlwaysInit)
	int                                                WeaponSpellDamageMax;                                     // 0x0020(0x0004) (AlwaysInit)
	int                                                HitRating;                                                // 0x0024(0x0004) (AlwaysInit)
	int                                                DodgeRating;                                              // 0x0028(0x0004) (AlwaysInit)
	int                                                ParryRating;                                              // 0x002C(0x0004) (AlwaysInit)
	int                                                BlockRating;                                              // 0x0030(0x0004) (AlwaysInit)
	int                                                BlockReduceRating;                                        // 0x0034(0x0004) (AlwaysInit)
	int                                                CriticalRating;                                           // 0x0038(0x0004) (AlwaysInit)
	float                                              CriticalPower;                                            // 0x003C(0x0004) (AlwaysInit)
	int                                                ResistRating;                                             // 0x0040(0x0004) (AlwaysInit)
	int                                                RCResistRating;                                           // 0x0044(0x0004) (AlwaysInit)
	int                                                HasteRating;                                              // 0x0048(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PawnParam3rd
// 0x0054
struct FPawnParam3rd
{
	float                                              HitChance;                                                // 0x0000(0x0004) (AlwaysInit)
	float                                              SpellHitChance;                                           // 0x0004(0x0004) (AlwaysInit)
	float                                              DodgeChance;                                              // 0x0008(0x0004) (AlwaysInit)
	float                                              ParryChance;                                              // 0x000C(0x0004) (AlwaysInit)
	int                                                ParryAmount;                                              // 0x0010(0x0004) (AlwaysInit)
	float                                              BlockChance;                                              // 0x0014(0x0004) (AlwaysInit)
	float                                              BlockReduce;                                              // 0x0018(0x0004) (AlwaysInit)
	float                                              SpellResistChance;                                        // 0x001C(0x0004) (AlwaysInit)
	float                                              RCResistChance;                                           // 0x0020(0x0004) (AlwaysInit)
	float                                              CriticalChance;                                           // 0x0024(0x0004) (AlwaysInit)
	float                                              CriticalModifier;                                         // 0x0028(0x0004) (AlwaysInit)
	float                                              SpellCriticalChance;                                      // 0x002C(0x0004) (AlwaysInit)
	float                                              ArmorReduce;                                              // 0x0030(0x0004) (AlwaysInit)
	float                                              SpellArmorReduce;                                         // 0x0034(0x0004) (AlwaysInit)
	float                                              Haste;                                                    // 0x0038(0x0004) (AlwaysInit)
	float                                              AutoAttackPeriod;                                         // 0x003C(0x0004) (AlwaysInit)
	float                                              HPRegen;                                                  // 0x0040(0x0004) (AlwaysInit)
	float                                              CostRegen;                                                // 0x0044(0x0004) (AlwaysInit)
	float                                              SkillValueAmplification;                                  // 0x0048(0x0004) (AlwaysInit)
	float                                              SkillReceiveAmplification;                                // 0x004C(0x0004) (AlwaysInit)
	float                                              RepairCostModifier;                                       // 0x0050(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PCAbilityData
// 0x0008
struct FPCAbilityData
{
	float                                              JumbAbility;                                              // 0x0000(0x0004) (AlwaysInit)
	float                                              HillClimbingAbility;                                      // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CurrentPCStoryInfo
// 0x0010
struct FCurrentPCStoryInfo
{
	int                                                StoryCid;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                PlotIndex;                                                // 0x0004(0x0004) (AlwaysInit)
	int                                                lastRewardStoryQuestCid;                                  // 0x0008(0x0004) (AlwaysInit)
	int                                                currentOnGoingStoryQuestCid;                              // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PCStoryInfo
// 0x0020
struct FPCStoryInfo
{
	TArray<int>                                        CompleteStoryCid;                                         // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FCurrentPCStoryInfo                         CurrentPCStoryInfo;                                       // 0x0010(0x0010) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.MonsterHuntingProgressInfo
// 0x001C
struct FMonsterHuntingProgressInfo
{
	int                                                monsterBookCId;                                           // 0x0000(0x0004) (AlwaysInit)
	int                                                stageIdx;                                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                isRepeatStage;                                            // 0x0008(0x0004) (AlwaysInit)
	TArray<int>                                        count_objectives;                                         // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.AllClearMonsterBookInfo
// 0x0008
struct FAllClearMonsterBookInfo
{
	int                                                monsterBookCId;                                           // 0x0000(0x0004) (AlwaysInit)
	int                                                freeRepeatable;                                           // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AvailableMonsterBookRewardInfo
// 0x0008
struct FAvailableMonsterBookRewardInfo
{
	int                                                monsterBookCId;                                           // 0x0000(0x0004) (AlwaysInit)
	int                                                stageIdx;                                                 // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.MonsterBookProgressInfo
// 0x0040
struct FMonsterBookProgressInfo
{
	TArray<struct FMonsterHuntingProgressInfo>         huntingList;                                              // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        openedLocationList;                                       // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FAllClearMonsterBookInfo>            allClearHuntingList;                                      // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FAvailableMonsterBookRewardInfo>     availableRewardList;                                      // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.PCData
// 0x02CC
struct FPCData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                WorldType;                                                // 0x0004(0x0004) (AlwaysInit)
	int                                                WorldMapCId;                                              // 0x0008(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x000C(0x000C) (AlwaysInit)
	struct FRotator                                    Rotation;                                                 // 0x0018(0x000C) (AlwaysInit)
	struct FPawnStateData                              PawnStateData;                                            // 0x0024(0x0014) (AlwaysInit)
	struct FPawnParamData                              PawnParamData;                                            // 0x0038(0x0048) (AlwaysInit, NeedCtorLink)
	struct FPawnParam1st                               PawnParam1st;                                             // 0x0080(0x0020) (AlwaysInit)
	struct FPawnParam2nd                               PawnParam2nd;                                             // 0x00A0(0x004C) (AlwaysInit)
	struct FPawnParam3rd                               PawnParam3rd;                                             // 0x00EC(0x0054) (AlwaysInit)
	struct FPawnMovePhysicsData                        PawnMovePhysicsData;                                      // 0x0140(0x0024) (AlwaysInit)
	struct FPCAbilityData                              PCAbilityData;                                            // 0x0164(0x0008) (AlwaysInit)
	TArray<struct FAbnormalStatusData>                 AbnormalStatusDataList;                                   // 0x016C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FEquipedItemData>                    EquipmentItemDataList;                                    // 0x017C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestProgressInfo>                  QuestProgressInfoList;                                    // 0x018C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<unsigned char>                              ResolvedQuestInfo;                                        // 0x019C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FWaypointProgressInfo                       WaypointProgressInfo;                                     // 0x01AC(0x0014) (AlwaysInit, NeedCtorLink)
	struct FPCStoryInfo                                PCStoryInfo;                                              // 0x01C0(0x0020) (AlwaysInit, NeedCtorLink)
	struct FMonsterBookProgressInfo                    MonsterBookProgressInfo;                                  // 0x01E0(0x0040) (AlwaysInit, NeedCtorLink)
	struct FCustomizeData                              CustomizeData;                                            // 0x0220(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ShowCostume;                                              // 0x0230(0x0004) (AlwaysInit)
	TArray<int>                                        completeQuestLocationList;                                // 0x0234(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                mount_id;                                                 // 0x0244(0x0004) (AlwaysInit)
	int                                                mount_flying;                                             // 0x0248(0x0004) (AlwaysInit)
	int                                                destination_id;                                           // 0x024C(0x0004) (AlwaysInit)
	int                                                AllowChannelTransferInCombatState;                        // 0x0250(0x0004) (AlwaysInit)
	struct FQWord                                      RXP;                                                      // 0x0254(0x0008) (AlwaysInit)
	int                                                LimitedRank;                                              // 0x025C(0x0004) (AlwaysInit)
	int                                                AdjustLevel;                                              // 0x0260(0x0004) (AlwaysInit)
	int                                                inventoryExpansionSlotCount;                              // 0x0264(0x0004) (AlwaysInit)
	float                                              accumulatedMountGradeUpFailureChance;                     // 0x0268(0x0004) (AlwaysInit)
	float                                              accumulatedPetGradeUpFailureChance;                       // 0x026C(0x0004) (AlwaysInit)
	float                                              accumulatedFellowGradeUpFailureChance;                    // 0x0270(0x0004) (AlwaysInit)
	TArray<struct FDuelResultData>                     duelResultDataList;                                       // 0x0274(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                partyMatchingPositionType;                                // 0x0284(0x0004) (AlwaysInit)
	TArray<struct FOrderProgressInfo>                  OrderProgressInfoList;                                    // 0x0288(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SPLevel;                                                  // 0x0298(0x0004) (AlwaysInit)
	int                                                SPExp;                                                    // 0x029C(0x0004) (AlwaysInit)
	int                                                TamingLevel;                                              // 0x02A0(0x0004) (AlwaysInit)
	int                                                TamingExp;                                                // 0x02A4(0x0004) (AlwaysInit)
	int                                                CompanionSlot;                                            // 0x02A8(0x0004) (AlwaysInit)
	int                                                LookChangeType;                                           // 0x02AC(0x0004) (AlwaysInit)
	struct FQWord                                      LookChangeExpireTime;                                     // 0x02B0(0x0008) (AlwaysInit)
	int                                                PartnerType;                                              // 0x02B8(0x0004) (AlwaysInit)
	int                                                StanceGem;                                                // 0x02BC(0x0004) (AlwaysInit)
	int                                                NonStanceGem;                                             // 0x02C0(0x0004) (AlwaysInit)
	int                                                ParameterGem;                                             // 0x02C4(0x0004) (AlwaysInit)
	int                                                DayExchangeGem;                                           // 0x02C8(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.BLTypes.SkillDeckSwapRquestInfo
// 0x001C
struct FSkillDeckSwapRquestInfo
{
	TEnumAsByte<ESkillDeckSwapStep>                    SkillDeckSwapStep;                                        // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     CastingText;                                              // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              CastingTotalTime;                                         // 0x0014(0x0004)
	float                                              CastingRemainTime;                                        // 0x0018(0x0004)
};

// ScriptStruct BLGame.ABLDef.PlayerPreviewCameraInfo
// 0x0014
struct FPlayerPreviewCameraInfo
{
	float                                              RotateSpeed;                                              // 0x0000(0x0004)
	float                                              FocusPointRatio;                                          // 0x0004(0x0004)
	float                                              TopBottomViewOffset;                                      // 0x0008(0x0004)
	float                                              PreviewFOV;                                               // 0x000C(0x0004)
	int                                                PreviewCameraPitch;                                       // 0x0010(0x0004)
};

// ScriptStruct BLGame.BLPlayerPreview.PreviewCompressValInfo
// 0x0008
struct FPreviewCompressValInfo
{
	int                                                CostumeShowConfig;                                        // 0x0000(0x0004)
	unsigned long                                      bNeedSetPreivew : 1;                                      // 0x0004(0x0004)
	unsigned long                                      bNeedUpdateEquipItemData : 1;                             // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLProp.BLPropTriggerIgnoreHandIeInfo
// 0x0005
struct FBLPropTriggerIgnoreHandIeInfo
{
	int                                                StateId;                                                  // 0x0000(0x0004)
	TEnumAsByte<EBLPropCmdType>                        PropCmdType;                                              // 0x0004(0x0001)
};

// ScriptStruct BLGame.BLProp.SpawnDecalTriggerData
// 0x001C
struct FSpawnDecalTriggerData
{
	unsigned long                                      DespawnPrevDecalAll : 1;                                  // 0x0000(0x0004)
	float                                              Width;                                                    // 0x0004(0x0004)
	float                                              Height;                                                   // 0x0008(0x0004)
	class UDecalComponent*                             DecalComp;                                                // 0x000C(0x0008) (ExportObject, Component, EditInline)
	class UMaterialInstanceTimeVarying*                ParentMITV;                                               // 0x0014(0x0008)
};

// ScriptStruct BLGame.BLProp.ComponentAdjustOffsetData
// 0x001C
struct FComponentAdjustOffsetData
{
	struct FVector                                     Translation;                                              // 0x0000(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x000C(0x000C)
	float                                              Scale;                                                    // 0x0018(0x0004)
};

// ScriptStruct BLGame.BLProp.ParticleTriggerHandleData
// 0x002C
struct FParticleTriggerHandleData
{
	class UParticleSystem*                             PS;                                                       // 0x0000(0x0008)
	class UParticleSystemComponent*                    PSC;                                                      // 0x0008(0x0008) (ExportObject, Component, EditInline)
	struct FComponentAdjustOffsetData                  AdjustOffset;                                             // 0x0010(0x001C)
};

// ScriptStruct BLGame.BLProp.StaticMeshTriggerHandleData
// 0x0024
struct FStaticMeshTriggerHandleData
{
	class UStaticMesh*                                 SM;                                                       // 0x0000(0x0008)
	struct FComponentAdjustOffsetData                  AdjustOffset;                                             // 0x0008(0x001C)
};

// ScriptStruct BLGame.BLProp.MtrlCtrlTriggerHandleData
// 0x002C
struct FMtrlCtrlTriggerHandleData
{
	class UMaterialInstanceConstant*                   MIC;                                                      // 0x0000(0x0008)
	struct FName                                       ParamType;                                                // 0x0008(0x0008)
	struct FName                                       ParamName;                                                // 0x0010(0x0008)
	struct FLinearColor                                vecParamVal;                                              // 0x0018(0x0010)
	float                                              fParamVal;                                                // 0x0028(0x0004)
};

// ScriptStruct BLGame.BLProp.SkeletalMeshTriggerHandleData
// 0x0038
struct FSkeletalMeshTriggerHandleData
{
	class USkeletalMesh*                               SKM;                                                      // 0x0000(0x0008)
	struct FName                                       AnimSeqName;                                              // 0x0008(0x0008)
	class UAnimSet*                                    AnimSet;                                                  // 0x0010(0x0008)
	struct FComponentAdjustOffsetData                  AdjustOffset;                                             // 0x0018(0x001C)
	unsigned long                                      bLooping : 1;                                             // 0x0034(0x0004)
};

// ScriptStruct BLGame.BLProp.SoundPlayTrigerData
// 0x0008
struct FSoundPlayTrigerData
{
	class UAkEvent*                                    SoundEvent;                                               // 0x0000(0x0008)
};

// ScriptStruct BLGame.BLProp.BLPropTriggerHandIeInfo
// 0x00E4
struct FBLPropTriggerHandIeInfo
{
	int                                                StateId;                                                  // 0x0000(0x0004)
	TEnumAsByte<EBLPropCmdType>                        PropCmdType;                                              // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	int                                                DespawnTargetStateId;                                     // 0x0008(0x0004)
	struct FParticleTriggerHandleData                  Particle;                                                 // 0x000C(0x002C) (Component)
	struct FStaticMeshTriggerHandleData                StaticMesh;                                               // 0x0038(0x0024)
	struct FMtrlCtrlTriggerHandleData                  MICData;                                                  // 0x005C(0x002C)
	struct FSkeletalMeshTriggerHandleData              SkeletalMesh;                                             // 0x0088(0x0038)
	struct FSoundPlayTrigerData                        Sound;                                                    // 0x00C0(0x0008)
	struct FSpawnDecalTriggerData                      Decal;                                                    // 0x00C8(0x001C) (Component)
};

// ScriptStruct BLGame.PropAsset.AdjustOffsetData
// 0x0020
struct FAdjustOffsetData
{
	float                                              TranslationAdjustZ;                                       // 0x0000(0x0004) (Edit, EditConst, Deprecated)
	struct FVector                                     Translation;                                              // 0x0004(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x0010(0x000C) (Edit)
	float                                              Scale;                                                    // 0x001C(0x0004) (Edit)
};

// ScriptStruct BLGame.PropAsset.SpawnDecalTrigger
// 0x0014
struct FSpawnDecalTrigger
{
	unsigned long                                      DespawnPrevDecalAll : 1;                                  // 0x0000(0x0004) (Edit)
	float                                              Width;                                                    // 0x0004(0x0004) (Edit)
	float                                              Height;                                                   // 0x0008(0x0004) (Edit)
	class UMaterialInstanceTimeVarying*                MITV;                                                     // 0x000C(0x0008) (Edit)
};

// ScriptStruct BLGame.PropAsset.SkeletalMeshChangeTrigger
// 0x003C
struct FSkeletalMeshChangeTrigger
{
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0000(0x0008) (Edit)
	class UAnimSet*                                    AnimSet;                                                  // 0x0008(0x0008) (Edit)
	struct FName                                       SeqName;                                                  // 0x0010(0x0008) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x0018(0x0004) (Edit)
	struct FAdjustOffsetData                           AdjustData;                                               // 0x001C(0x0020) (Edit)
};

// ScriptStruct BLGame.PropAsset.StaticMeshChangeTrigger
// 0x0028
struct FStaticMeshChangeTrigger
{
	class UStaticMesh*                                 StaticMesh;                                               // 0x0000(0x0008) (Edit)
	struct FAdjustOffsetData                           AdjustData;                                               // 0x0008(0x0020) (Edit)
};

// ScriptStruct BLGame.PropAsset.ParticleSystemSpawnTriger
// 0x0028
struct FParticleSystemSpawnTriger
{
	class UParticleSystem*                             Particle;                                                 // 0x0000(0x0008) (Edit)
	struct FAdjustOffsetData                           AdjustData;                                               // 0x0008(0x0020) (Edit)
};

// ScriptStruct BLGame.BoneDeformationTemplate.BoneDeformRelativeParameter
// 0x0008
struct FBoneDeformRelativeParameter
{
	TEnumAsByte<EBoneDeformPart>                       Part;                                                     // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Value;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.ROGuildStatueData
// 0x0060
struct FROGuildStatueData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ShowCostume;                                              // 0x0014(0x0004) (AlwaysInit)
	int                                                RealmType;                                                // 0x0018(0x0004) (AlwaysInit)
	int                                                GenderType;                                               // 0x001C(0x0004) (AlwaysInit)
	int                                                ClassType;                                                // 0x0020(0x0004) (AlwaysInit)
	int                                                RaceType;                                                 // 0x0024(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0028(0x000C) (AlwaysInit)
	struct FRotator                                    Rotation;                                                 // 0x0034(0x000C) (AlwaysInit)
	struct FCustomizeData                              CustomizeData;                                            // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FROGuildStatueItemData>              ROGuildStatueItemDataList;                                // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.FontConfigSizeAndColor
// 0x0008
struct FFontConfigSizeAndColor
{
	int                                                FontSize;                                                 // 0x0000(0x0004)
	struct FColor                                      FontColor;                                                // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLTrap.BLTrapTriggerIgnoreHandIeInfo
// 0x0005
struct FBLTrapTriggerIgnoreHandIeInfo
{
	int                                                Phase;                                                    // 0x0000(0x0004)
	TEnumAsByte<EBLTrapCmdType>                        TrapCmdType;                                              // 0x0004(0x0001)
};

// ScriptStruct BLGame.BLTrap.TrapDecalTriggerData
// 0x001C
struct FTrapDecalTriggerData
{
	unsigned long                                      DespawnPrevDecalAll : 1;                                  // 0x0000(0x0004)
	float                                              Width;                                                    // 0x0004(0x0004)
	float                                              Height;                                                   // 0x0008(0x0004)
	class UDecalComponent*                             DecalComp;                                                // 0x000C(0x0008) (ExportObject, Component, EditInline)
	class UMaterialInstanceTimeVarying*                ParentMITV;                                               // 0x0014(0x0008)
};

// ScriptStruct BLGame.BLTrap.TrapAdjustOffsetData
// 0x001C
struct FTrapAdjustOffsetData
{
	struct FVector                                     Translation;                                              // 0x0000(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x000C(0x000C)
	float                                              Scale;                                                    // 0x0018(0x0004)
};

// ScriptStruct BLGame.BLTrap.TrapParticleTriggerData
// 0x002C
struct FTrapParticleTriggerData
{
	class UParticleSystem*                             PS;                                                       // 0x0000(0x0008)
	class UParticleSystemComponent*                    PSC;                                                      // 0x0008(0x0008) (ExportObject, Component, EditInline)
	struct FTrapAdjustOffsetData                       AdjustOffset;                                             // 0x0010(0x001C)
};

// ScriptStruct BLGame.BLTrap.TrapStaticMeshTriggerData
// 0x0028
struct FTrapStaticMeshTriggerData
{
	class UStaticMesh*                                 SM;                                                       // 0x0000(0x0008)
	struct FTrapAdjustOffsetData                       AdjustOffset;                                             // 0x0008(0x001C)
	unsigned long                                      bHide : 1;                                                // 0x0024(0x0004)
};

// ScriptStruct BLGame.BLTrap.TrapSkeletalMeshTriggerData
// 0x0038
struct FTrapSkeletalMeshTriggerData
{
	class USkeletalMesh*                               SKM;                                                      // 0x0000(0x0008)
	struct FName                                       AnimSeqName;                                              // 0x0008(0x0008)
	class UAnimSet*                                    AnimSet;                                                  // 0x0010(0x0008)
	struct FTrapAdjustOffsetData                       AdjustOffset;                                             // 0x0018(0x001C)
	unsigned long                                      bLooping : 1;                                             // 0x0034(0x0004)
	unsigned long                                      bHide : 1;                                                // 0x0034(0x0004)
};

// ScriptStruct BLGame.BLTrap.TrapSoundTriggerData
// 0x0008
struct FTrapSoundTriggerData
{
	class UAkEvent*                                    SoundEvent;                                               // 0x0000(0x0008)
};

// ScriptStruct BLGame.BLTrap.BLTrapTriggerHandIeInfo
// 0x00BC
struct FBLTrapTriggerHandIeInfo
{
	int                                                Phase;                                                    // 0x0000(0x0004)
	TEnumAsByte<EBLTrapCmdType>                        TrapCmdType;                                              // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	struct FTrapParticleTriggerData                    Particle;                                                 // 0x0008(0x002C) (Component)
	int                                                DespawnParticleTargetPhase;                               // 0x0034(0x0004)
	struct FTrapStaticMeshTriggerData                  StaticMesh;                                               // 0x0038(0x0028)
	struct FTrapSkeletalMeshTriggerData                SkeletalMesh;                                             // 0x0060(0x0038)
	struct FTrapSoundTriggerData                       Sound;                                                    // 0x0098(0x0008)
	struct FTrapDecalTriggerData                       Decal;                                                    // 0x00A0(0x001C) (Component)
};

// ScriptStruct BLGame.TrapAsset.TrapAdjustOffset
// 0x001C
struct FTrapAdjustOffset
{
	struct FVector                                     Translation;                                              // 0x0000(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x000C(0x000C) (Edit)
	float                                              Scale;                                                    // 0x0018(0x0004) (Edit)
};

// ScriptStruct BLGame.TrapAsset.TrapSpawnDecalTrigger
// 0x0014
struct FTrapSpawnDecalTrigger
{
	unsigned long                                      DespawnPrevDecalAll : 1;                                  // 0x0000(0x0004) (Edit)
	float                                              Width;                                                    // 0x0004(0x0004) (Edit)
	float                                              Height;                                                   // 0x0008(0x0004) (Edit)
	class UMaterialInstanceTimeVarying*                MITV;                                                     // 0x000C(0x0008) (Edit)
};

// ScriptStruct BLGame.TrapAsset.TrapSkeletalMeshChangeTrigger
// 0x003C
struct FTrapSkeletalMeshChangeTrigger
{
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0000(0x0008) (Edit)
	class UAnimSet*                                    AnimSet;                                                  // 0x0008(0x0008) (Edit)
	struct FName                                       SeqName;                                                  // 0x0010(0x0008) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x0018(0x0004) (Edit)
	struct FTrapAdjustOffset                           AdjustData;                                               // 0x001C(0x001C) (Edit)
	unsigned long                                      bHideSkeletalMesh : 1;                                    // 0x0038(0x0004) (Edit)
};

// ScriptStruct BLGame.TrapAsset.TrapStaticMeshChangeTrigger
// 0x0028
struct FTrapStaticMeshChangeTrigger
{
	class UStaticMesh*                                 StaticMesh;                                               // 0x0000(0x0008) (Edit)
	struct FTrapAdjustOffset                           AdjustData;                                               // 0x0008(0x001C) (Edit)
	unsigned long                                      bHideStaticMesh : 1;                                      // 0x0024(0x0004) (Edit)
};

// ScriptStruct BLGame.TrapAsset.TrapParticleTrigger
// 0x0024
struct FTrapParticleTrigger
{
	class UParticleSystem*                             Particle;                                                 // 0x0000(0x0008) (Edit)
	struct FTrapAdjustOffset                           AdjustData;                                               // 0x0008(0x001C) (Edit)
};

// ScriptStruct BLGame.ABLDef.PropAdjustData
// 0x001C
struct FPropAdjustData
{
	struct FVector                                     Translation;                                              // 0x0000(0x000C) (Edit)
	struct FRotator                                    Rotation;                                                 // 0x000C(0x000C) (Edit)
	float                                              Scale;                                                    // 0x0018(0x0004) (Edit)
};

// ScriptStruct BLGame.ABLDef.PropEffectData_SpawnParticle
// 0x0024
struct FPropEffectData_SpawnParticle
{
	class UParticleSystem*                             Particle;                                                 // 0x0000(0x0008) (Edit)
	struct FPropAdjustData                             AdjustData;                                               // 0x0008(0x001C) (Edit)
};

// ScriptStruct BLGame.ABLDef.PropEffectDataSet_Possibility
// 0x0014
struct FPropEffectDataSet_Possibility
{
	TEnumAsByte<EPropEffectTriggerType_Possibility>    TriggerType;                                              // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<struct FPropEffectData_SpawnParticle>       SpawnParticleData;                                        // 0x0004(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.DesignatedSignData
// 0x000C
struct FDesignatedSignData
{
	int                                                TargetSId;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                SignIdx;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                Mark;                                                     // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SignDataInfo
// 0x0014
struct FSignDataInfo
{
	int                                                SignDataType;                                             // 0x0000(0x0004) (AlwaysInit)
	TArray<struct FDesignatedSignData>                 SignDataList;                                             // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLTargetSign.SignInfo
// 0x0008
struct FSignInfo
{
	int                                                SignIndex;                                                // 0x0000(0x0004)
	int                                                IconIndex;                                                // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLTypes.AccessoryInfo
// 0x0014
struct FAccessoryInfo
{
	class USkeletalMesh*                               AccessoryMesh;                                            // 0x0000(0x0008) (Edit)
	struct FName                                       MergeBoneName;                                            // 0x0008(0x0008) (Edit)
	unsigned long                                      Flipping : 1;                                             // 0x0010(0x0004) (Edit)
};

// ScriptStruct BLGame.BLTypes.BasePartInfo
// 0x000C
struct FBasePartInfo
{
	TEnumAsByte<EEquipmentDisplaySlotType>             PartID;                                                   // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0004(0x0008) (Edit)
};

// ScriptStruct BLGame.CharacterBoneDeformationModule.BoneDeformingInfo
// 0x000D
struct FBoneDeformingInfo
{
	struct FName                                       BoneName;                                                 // 0x0000(0x0008)
	float                                              Value;                                                    // 0x0008(0x0004)
	TEnumAsByte<EBoneDeformApplication>                ApplyFunction;                                            // 0x000C(0x0001)
};

// ScriptStruct BLGame.BoneDeformationTemplate.BoneDeformAbsoluteParameter
// 0x0008
struct FBoneDeformAbsoluteParameter
{
	TEnumAsByte<EBoneDeformPart>                       Part;                                                     // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Value;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.DecorationEffectInfo.SoftAttachedDecorationEffectInfo
// 0x0034
struct FSoftAttachedDecorationEffectInfo
{
	class UParticleSystemComponent*                    PSC;                                                      // 0x0000(0x0008) (ExportObject, Component, EditInline)
	struct FDecorationEffect                           DecoEffect;                                               // 0x0008(0x002C)
};

// ScriptStruct BLGame.ABLSDLTypes.PickDropItemInfo
// 0x0008
struct FPickDropItemInfo
{
	int                                                dropItemType;                                             // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PickDropContentTokenInfo
// 0x0008
struct FPickDropContentTokenInfo
{
	int                                                dropItemType;                                             // 0x0000(0x0004) (AlwaysInit)
	int                                                ContentTokenType;                                         // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.EachDropItemInfo
// 0x000C
struct FEachDropItemInfo
{
	int                                                dropItemType;                                             // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                Amount;                                                   // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.EachDropContentTokenInfo
// 0x0010
struct FEachDropContentTokenInfo
{
	int                                                dropItemType;                                             // 0x0000(0x0004) (AlwaysInit)
	int                                                ContentTokenType;                                         // 0x0004(0x0004) (AlwaysInit)
	struct FQWord                                      Amount;                                                   // 0x0008(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.LootController.InteractTargetInfo
// 0x0008
struct FInteractTargetInfo
{
	TEnumAsByte<EINTERACT_TARGET_TYPE>                 TargetType;                                               // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                TargetID;                                                 // 0x0004(0x0004)
};

// ScriptStruct BLGame.LootController.InteractionTimeInfo
// 0x0008
struct FInteractionTimeInfo
{
	float                                              AutoCompleteTotalTime;                                    // 0x0000(0x0004)
	float                                              AccumTime;                                                // 0x0004(0x0004)
};

// ScriptStruct BLGame.MeshTexturePaintTemplate.MeshPaintBrush
// 0x0034
struct FMeshPaintBrush
{
	class UTexture2D*                                  MaskTexture;                                              // 0x0000(0x0008)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0008(0x0008) MISSED OFFSET
	struct FVector4                                    ClippingUV;                                               // 0x0010(0x0010)
	int                                                Channel;                                                  // 0x0020(0x0004)
	struct FVector2D                                   TargetUVPos;                                              // 0x0024(0x0008)
	struct FVector2D                                   TargetUVSize;                                             // 0x002C(0x0008)
};

// ScriptStruct BLGame.MeshTexturePaintTemplate.MeshPaintBrushShapeInfo
// 0x0034
struct FMeshPaintBrushShapeInfo
{
	struct FName                                       BrushShapeName;                                           // 0x0000(0x0008) (Edit)
	struct FName                                       BrushMaskName;                                            // 0x0008(0x0008) (Edit)
	TEnumAsByte<ETextureColorChannel>                  Channel;                                                  // 0x0010(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	int                                                Index;                                                    // 0x0014(0x0004) (Edit)
	int                                                LegendIndex;                                              // 0x0018(0x0004) (Edit)
	struct FVector2D                                   TargetUVSize;                                             // 0x001C(0x0008) (Edit)
	struct FIntPoint                                   MaskCount;                                                // 0x0024(0x0008) (Edit)
	struct FVector2D                                   MaskTableMaxCoordinate;                                   // 0x002C(0x0008) (Edit)
};

// ScriptStruct BLGame.MeshTexturePaintTemplate.MeshPaintBrushInfo
// 0x005C
struct FMeshPaintBrushInfo
{
	struct FName                                       BrushName;                                                // 0x0000(0x0008) (Edit, EditConst)
	struct FVector2D                                   TargetUVPos;                                              // 0x0008(0x0008) (Edit)
	struct FVector2D                                   TargetUVSize;                                             // 0x0010(0x0008) (Edit)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0018(0x0008) MISSED OFFSET
	struct FVector4                                    Blending;                                                 // 0x0020(0x0010) (Edit)
	float                                              ColorKeepingRate;                                         // 0x0030(0x0004) (Edit)
	unsigned long                                      bPaintDecalcomanie : 1;                                   // 0x0034(0x0004) (Edit)
	TEnumAsByte<EMeshPaintBrushControl>                PaintControl;                                             // 0x0038(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	struct FIntPoint                                   MouseDragStep;                                            // 0x003C(0x0008) (Edit)
	TArray<struct FMeshPaintBrushShapeInfo>            Shapes;                                                   // 0x0044(0x0010) (Edit, NeedCtorLink)
	float                                              DirectPaintBrushRadius;                                   // 0x0054(0x0004) (Edit)
	float                                              DirectPaintBrushFalloff;                                  // 0x0058(0x0004) (Edit)
};

// ScriptStruct BLGame.MeshTexturePaintTemplate.MeshPaintBrushMask
// 0x0018
struct FMeshPaintBrushMask
{
	struct FName                                       BrushMaskName;                                            // 0x0000(0x0008) (Edit)
	class UTexture2D*                                  MaskTexture;                                              // 0x0008(0x0008) (Edit)
	struct FIntPoint                                   MaskCount;                                                // 0x0010(0x0008) (Edit)
};

// ScriptStruct BLGame.MeshTexturePaintTemplate.MeshPaintBrushInfoAndColor
// 0x0010 (0x006C - 0x005C)
struct FMeshPaintBrushInfoAndColor : public FMeshPaintBrushInfo
{
	struct FLinearColor                                PaintingColor;                                            // 0x005C(0x0010) (Edit)
};

// ScriptStruct BLGame.ABLSDLTypes.AbnormalStatusHitResult
// 0x0008
struct FAbnormalStatusHitResult
{
	int                                                ChanceType;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                Damage;                                                   // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AbnormalStatusEffectResult
// 0x0020
struct FAbnormalStatusEffectResult
{
	int                                                CasterSID;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                TargetSId;                                                // 0x0004(0x0004) (AlwaysInit)
	int                                                AbnormalStatusCid;                                        // 0x0008(0x0004) (AlwaysInit)
	int                                                IsDeal;                                                   // 0x000C(0x0004) (AlwaysInit)
	TArray<struct FAbnormalStatusHitResult>            HitResult;                                                // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ParameterChange
// 0x0008
struct FParameterChange
{
	TEnumAsByte<ECEParamType>                          ParamType;                                                // 0x0000(0x0001)
	TEnumAsByte<ECEParamChangeType>                    ParamChangeType;                                          // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	float                                              Value;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLDef.AbnormalSkillParamOverrideInfo_Mobility
// 0x0005
struct FAbnormalSkillParamOverrideInfo_Mobility
{
	int                                                SkillCid;                                                 // 0x0000(0x0004) (Const)
	TEnumAsByte<ECESkillMobilityType>                  MobilityType;                                             // 0x0004(0x0001) (Const)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AbnormalStatusInfoData
// 0x0040 (0x0074 - 0x0034)
struct FAbnormalStatusInfoData : public FContentInfoData
{
	TEnumAsByte<ECEBuffDebuffType>                     BuffDebuffType;                                           // 0x0034(0x0001)
	TEnumAsByte<ECEIconShowType>                       IconShowType;                                             // 0x0035(0x0001)
	TEnumAsByte<ECEAbnormalStatusIconRaidShowType>     IconRaidShowType;                                         // 0x0036(0x0001)
	unsigned char                                      IsTargetUnconscious;                                      // 0x0037(0x0001)
	TArray<struct FParameterChange>                    ParameterChangeInfo;                                      // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FAbnormalSkillParamOverrideInfo_Mobility> SkillParamOverrideInfoList_Mobility;                      // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IconIndex;                                                // 0x0058(0x0004)
	int                                                Duration;                                                 // 0x005C(0x0004)
	int                                                AbnormalStatusGroupCid;                                   // 0x0060(0x0004)
	TArray<int>                                        ImmuneList;                                               // 0x0064(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ActionApplyResultComponent.DamageResultInfo
// 0x0022
struct FDamageResultInfo
{
	int                                                TargetID;                                                 // 0x0000(0x0004)
	TArray<struct FSkillDamageInfo>                    DamageList;                                               // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ResultKey;                                                // 0x0014(0x0004)
	float                                              RecievedLocalTime;                                        // 0x0018(0x0004)
	float                                              ApplyTime;                                                // 0x001C(0x0004)
	TEnumAsByte<ECEAttackChanceType>                   AttackChance;                                             // 0x0020(0x0001)
	TEnumAsByte<ERiotAppliedType>                      RiotAppliedType;                                          // 0x0021(0x0001)
};

// ScriptStruct BLGame.ActionApplyResultComponent.ActionApplyResult
// 0x004C
struct FActionApplyResult
{
	int                                                Sid;                                                      // 0x0000(0x0004)
	int                                                AttackChance;                                             // 0x0004(0x0004)
	TArray<struct FSkillDamageInfo>                    DamageList;                                               // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              RecievedLocalTime;                                        // 0x0018(0x0004)
	float                                              ApplyTime;                                                // 0x001C(0x0004)
	struct FRiotControlData                            RiotControl;                                              // 0x0020(0x0018) (NeedCtorLink)
	struct FRCApplyInfo                                RiotControlInfo;                                          // 0x0038(0x0010)
	unsigned long                                      bSendHitByEvent : 1;                                      // 0x0048(0x0004)
};

// ScriptStruct BLGame.ActionApplyResultComponent.ActionApplyInfo
// 0x0010
struct FActionApplyInfo
{
	TArray<struct FActionApplyResult>                  Results;                                                  // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ActionApplyResultComponent.ActionApplyInfoSet
// 0x0020
struct FActionApplyInfoSet
{
	int                                                ResultKey;                                                // 0x0000(0x0004)
	int                                                ActionCid;                                                // 0x0004(0x0004)
	float                                              RemoveTimer;                                              // 0x0008(0x0004)
	TEnumAsByte<EActionApplyState>                     State;                                                    // 0x000C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	TArray<struct FActionApplyInfo>                    ApplyInfos;                                               // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ActionApplyResultComponent.FiringRateInfo
// 0x000C
struct FFiringRateInfo
{
	int                                                SkillCid;                                                 // 0x0000(0x0004)
	float                                              FiringRate;                                               // 0x0004(0x0004)
	int                                                RemoveTimer;                                              // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillResultTargetInfo
// 0x0014
struct FSkillResultTargetInfo
{
	int                                                ApplyMoment;                                              // 0x0000(0x0004) (AlwaysInit)
	TArray<int>                                        Targets;                                                  // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ActionApplyResultComponent.HitEventInfo
// 0x0010
struct FHitEventInfo
{
	int                                                ResultKey;                                                // 0x0000(0x0004)
	int                                                ApplyInfoIndex;                                           // 0x0004(0x0004)
	float                                              RecievedLocalTime;                                        // 0x0008(0x0004)
	float                                              ApplyTime;                                                // 0x000C(0x0004)
};

// ScriptStruct BLGame.ActionApplyResultComponent.HitServerNotifyEventInfo
// 0x0014
struct FHitServerNotifyEventInfo
{
	int                                                ResultKey;                                                // 0x0000(0x0004)
	int                                                ApplyInfoIndex;                                           // 0x0004(0x0004)
	float                                              RecievedLocalTime;                                        // 0x0008(0x0004)
	float                                              ApplyTime;                                                // 0x000C(0x0004)
	unsigned long                                      bIndexType : 1;                                           // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLDef.OnHeadTagIconData
// 0x0018
struct FOnHeadTagIconData
{
	TEnumAsByte<EOnHeadTagIconType>                    Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Index;                                                    // 0x0004(0x0004)
	struct FString                                     ObjectiveProgressStr;                                     // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.PawnDLEManager.DLEInstantUpdateTypeInfo
// 0x0008
struct FDLEInstantUpdateTypeInfo
{
	TEnumAsByte<EDLEInstantUpdateType>                 UpdateType;                                               // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              RemoveTimer;                                              // 0x0004(0x0004)
};

// ScriptStruct BLGame.PawnDLEManager.DLEInstantUpdateInfo
// 0x001C
struct FDLEInstantUpdateInfo
{
	class ABLPawnBase*                                 InstantUpdatePawn;                                        // 0x0000(0x0008)
	unsigned long                                      bSetted : 1;                                              // 0x0008(0x0004)
	TArray<struct FDLEInstantUpdateTypeInfo>           TypeList;                                                 // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.BLPawnParamData
// 0x0040
struct FBLPawnParamData
{
	struct FString                                     Name;                                                     // 0x0000(0x0010) (NeedCtorLink)
	TEnumAsByte<ECERaceType>                           Race;                                                     // 0x0010(0x0001)
	TEnumAsByte<ECEClassType>                          Class;                                                    // 0x0011(0x0001)
	TEnumAsByte<ECEGenderType>                         Gender;                                                   // 0x0012(0x0001)
	TEnumAsByte<ECERealmType>                          Realm;                                                    // 0x0013(0x0001)
	int                                                AdjustLevel;                                              // 0x0014(0x0004)
	int                                                Level;                                                    // 0x0018(0x0004)
	int                                                LevelExpRangeMin;                                         // 0x001C(0x0004)
	int                                                LevelExpRangeMax;                                         // 0x0020(0x0004)
	int                                                Exp;                                                      // 0x0024(0x0004)
	int                                                HP;                                                       // 0x0028(0x0004)
	int                                                MP;                                                       // 0x002C(0x0004)
	int                                                Energy;                                                   // 0x0030(0x0004)
	int                                                MaxHP;                                                    // 0x0034(0x0004)
	int                                                MaxMP;                                                    // 0x0038(0x0004)
	int                                                MaxEnergy;                                                // 0x003C(0x0004)
};

// ScriptStruct BLGame.PawnRepInfo.UpdateParamInfo
// 0x0024
struct FUpdateParamInfo
{
	TEnumAsByte<ECEParamType>                          Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UProperty*                                   Prop;                                                     // 0x0004(0x0008)
	class UProperty*                                   PropInner;                                                // 0x000C(0x0008)
	struct FScriptDelegate                             Delegate;                                                 // 0x0014(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                                       // 0x0014(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
};

// ScriptStruct BLGame.ABLSDLTypes.NPCQuestInfo
// 0x0008
struct FNPCQuestInfo
{
	int                                                questId;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                Status;                                                   // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.PlayerRepInfo.EnumRedirectInfo
// 0x0010
struct FEnumRedirectInfo
{
	struct FName                                       PropertyName;                                             // 0x0000(0x0008) (Const)
	class UObject*                                     EnumInfo;                                                 // 0x0008(0x0008)
};

// ScriptStruct BLGame.ABLSDLTypes.CombatFlairActivateData
// 0x0008
struct FCombatFlairActivateData
{
	int                                                Index;                                                    // 0x0000(0x0004) (AlwaysInit)
	int                                                Activate;                                                 // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.FaceMorphData
// 0x0038
struct FFaceMorphData
{
	int                                                ForeheadType;                                             // 0x0000(0x0004)
	float                                              ForeheadValue;                                            // 0x0004(0x0004)
	int                                                EyeType;                                                  // 0x0008(0x0004)
	float                                              EyeValue;                                                 // 0x000C(0x0004)
	int                                                NoseType;                                                 // 0x0010(0x0004)
	float                                              NoseValue;                                                // 0x0014(0x0004)
	int                                                MouthType;                                                // 0x0018(0x0004)
	float                                              MouthValue;                                               // 0x001C(0x0004)
	int                                                JawType;                                                  // 0x0020(0x0004)
	float                                              JawValue;                                                 // 0x0024(0x0004)
	int                                                CheekType;                                                // 0x0028(0x0004)
	float                                              CheekValue;                                               // 0x002C(0x0004)
	int                                                EarType;                                                  // 0x0030(0x0004)
	float                                              EarValue;                                                 // 0x0034(0x0004)
};

// ScriptStruct BLGame.ABLDef.PlayerRankData
// 0x0065
struct FPlayerRankData
{
	int                                                SettleRankCid;                                            // 0x0000(0x0004)
	int                                                SettleRXP;                                                // 0x0004(0x0004)
	struct FString                                     SettleRankName;                                           // 0x0008(0x0010) (NeedCtorLink)
	int                                                SettleRankRemainRXP;                                      // 0x0018(0x0004)
	TEnumAsByte<ECETargetStateWidgetType>              SettleRankTargetStateWidgetType;                          // 0x001C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
	int                                                CurrentRankCid;                                           // 0x0020(0x0004)
	struct FString                                     CurrentRankName;                                          // 0x0024(0x0010) (NeedCtorLink)
	int                                                CurrentRXP;                                               // 0x0034(0x0004)
	int                                                NextRankCid;                                              // 0x0038(0x0004)
	struct FString                                     NextRankName;                                             // 0x003C(0x0010) (NeedCtorLink)
	int                                                NextRankRemainRXP;                                        // 0x004C(0x0004)
	int                                                LimitedRankCid;                                           // 0x0050(0x0004)
	struct FString                                     LimitedRankName;                                          // 0x0054(0x0010) (NeedCtorLink)
	TEnumAsByte<ECETargetStateWidgetType>              LimitedRankTargetStateWidgetType;                         // 0x0064(0x0001)
};

// ScriptStruct BLGame.ABLDef.PartyEffectCraftModifier
// 0x0014
struct FPartyEffectCraftModifier
{
	float                                              SmithExpModifier;                                         // 0x0000(0x0004)
	float                                              HandiWorkExpModifider;                                    // 0x0004(0x0004)
	float                                              SmeltExpModifier;                                         // 0x0008(0x0004)
	float                                              CookExpModifier;                                          // 0x000C(0x0004)
	float                                              AlchemyExpModifier;                                       // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.PropData
// 0x0038
struct FPropData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0008(0x000C) (AlwaysInit)
	struct FRotator                                    Rotation;                                                 // 0x0014(0x000C) (AlwaysInit)
	int                                                State;                                                    // 0x0020(0x0004) (AlwaysInit)
	TArray<int>                                        AuraList;                                                 // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IsVisible;                                                // 0x0034(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AuraData
// 0x000C
struct FAuraData
{
	int                                                Cid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Activated;                                                // 0x0004(0x0004) (AlwaysInit)
	int                                                OperatorSid;                                              // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.SpawnEffectInfo.SpawnEffectData
// 0x003C
struct FSpawnEffectData
{
	class UParticleSystem*                             SpawnEmitter;                                             // 0x0000(0x0008) (Edit)
	TEnumAsByte<ESPAWN_EMITTER_LOC_TYPE>               SpawnEmitterLocType;                                      // 0x0008(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	struct FName                                       SpawnEmitterAttachName;                                   // 0x000C(0x0008) (Edit)
	struct FVector                                     SpawnEmitterLocOffset;                                    // 0x0014(0x000C) (Edit)
	class UAkEvent*                                    AkSoundEvent;                                             // 0x0020(0x0008) (Edit)
	class UMaterialInstanceTimeVarying*                SpawnDecalMITV;                                           // 0x0028(0x0008) (Edit)
	struct FVector                                     SpawnDecalMITVScale;                                      // 0x0030(0x000C) (Edit)
};

// ScriptStruct BLGame.BLEnvironmentPreloadManager.NPCCacheData
// 0x002C
struct FNPCCacheData
{
	class UPawnAsset*                                  PawnAssetCaches;                                          // 0x0000(0x0008) (Transient)
	TArray<class USkillAsset*>                         SkillAssetCaches;                                         // 0x0008(0x0010) (NeedCtorLink)
	TArray<class UBLEquipmentItemEquipInfo*>           EquipCaches;                                              // 0x0018(0x0010) (Transient, NeedCtorLink)
	unsigned long                                      bCachedPawnAsset : 1;                                     // 0x0028(0x0004) (Transient)
	unsigned long                                      bCachedSkillAsset : 1;                                    // 0x0028(0x0004) (Transient)
	unsigned long                                      bCachedEquipAsset : 1;                                    // 0x0028(0x0004) (Transient)
};

// ScriptStruct BLGame.BLInterpTrackCinematicScript.CinematicScriptTrackKey
// 0x0018
struct FCinematicScriptTrackKey
{
	float                                              Time;                                                     // 0x0000(0x0004) (Edit)
	float                                              Length;                                                   // 0x0004(0x0004) (Edit)
	struct FName                                       CinematicScriptSection;                                   // 0x0008(0x0008) (Edit)
	struct FName                                       CinematicScriptID;                                        // 0x0010(0x0008) (Edit)
};

// ScriptStruct BLGame.BLInterpTrackInstFloatMaterialParam.FloatMaterialParamData
// 0x000C
struct FFloatMaterialParamData
{
	class UMaterialInstanceConstant*                   MIC;                                                      // 0x0000(0x0008) (Const)
	float                                              ResetFloat;                                               // 0x0008(0x0004) (Const)
};

// ScriptStruct BLGame.BLMsgKernel.ProcInterfaceGroup
// 0x0014
struct FProcInterfaceGroup
{
	int                                                GroupID;                                                  // 0x0000(0x0004)
	TArray<class UBLMSGProcInterface*>                 MsgProc;                                                  // 0x0004(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.BLPortraitView.PortraitCollectionInfo
// 0x006C
struct FPortraitCollectionInfo
{
	unsigned long                                      bOverrideAnim : 1;                                        // 0x0000(0x0004)
	TArray<class UAnimSet*>                            AnimSetList;                                              // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     AnimSeqName;                                              // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              DirectionalLightBrightness;                               // 0x0024(0x0004)
	struct FColor                                      DirectionalLightColor;                                    // 0x0028(0x0004)
	struct FRotator                                    DirectionalLightDirection;                                // 0x002C(0x000C)
	float                                              SkyLightBrightness;                                       // 0x0038(0x0004)
	struct FColor                                      SkyLightColor;                                            // 0x003C(0x0004)
	float                                              SkyLightLowerBrightness;                                  // 0x0040(0x0004)
	struct FColor                                      SkyLightLowerColor;                                       // 0x0044(0x0004)
	float                                              FOVAngle;                                                 // 0x0048(0x0004)
	struct FVector                                     CameraLocation;                                           // 0x004C(0x000C)
	struct FRotator                                    CameraRotation;                                           // 0x0058(0x000C)
	class UPawnAsset*                                  PortraitPawnAsset;                                        // 0x0064(0x0008)
};

// ScriptStruct BLGame.BLSkeletalMeshActor.BLAttachInfo
// 0x0028
struct FBLAttachInfo
{
	struct FName                                       Socket;                                                   // 0x0000(0x0008) (Edit)
	class USkeletalMesh*                               Mesh;                                                     // 0x0008(0x0008) (Edit)
	TArray<class UAnimSet*>                            AnimSets;                                                 // 0x0010(0x0010) (Edit, NeedCtorLink)
	class UPhysicsAsset*                               Physics;                                                  // 0x0020(0x0008) (Edit)
};

// ScriptStruct BLGame.BLTODInterpolator.MaterialInstanceWrapped
// 0x0008
struct FMaterialInstanceWrapped
{
	class UMaterialInstance*                           Inst;                                                     // 0x0000(0x0008)
};

// ScriptStruct BLGame.BLTypes.CustomizeModuleDefElem
// 0x000F
struct FCustomizeModuleDefElem
{
	TEnumAsByte<ECustomizeModuleType>                  ModuleType;                                               // 0x0000(0x0001)
	TEnumAsByte<ECustomizeValueType>                   ValueType;                                                // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	struct FName                                       MaterialParamName;                                        // 0x0004(0x0008)
	TEnumAsByte<EBoneDeformPart>                       BoneDeformPart;                                           // 0x000C(0x0001)
	TEnumAsByte<EEquipmentDisplaySlotType>             PartID;                                                   // 0x000D(0x0001)
	TEnumAsByte<ECECustomizeType>                      PairCustomizeType;                                        // 0x000E(0x0001)
};

// ScriptStruct BLGame.BLTypes.CustomizeSubMenuDefElem
// 0x001C
struct FCustomizeSubMenuDefElem
{
	TEnumAsByte<ECustomizeActionScriptMenuEnum>        LargeCategory;                                            // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                CameraMode;                                               // 0x0004(0x0004)
	unsigned long                                      bIsHasWhispyHairCheckBox : 1;                             // 0x0008(0x0004)
	TArray<TEnumAsByte<ECECustomizeType>>              RandomAndResetList;                                       // 0x000C(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.GameHUD.CameraAnimInfo
// 0x0020
struct FCameraAnimInfo
{
	class UCameraAnim*                                 Anim;                                                     // 0x0000(0x0008) (Const)
	struct FVector                                     InitialLoc;                                               // 0x0008(0x000C) (Const)
	struct FRotator                                    InitialRot;                                               // 0x0014(0x000C) (Const)
};

// ScriptStruct BLGame.DesignParameters.DialogCancel_MonologueIDs
// 0x0020
struct FDialogCancel_MonologueIDs
{
	TArray<int>                                        DialogCanceledByPlayerCombat_MonologueIDs;                // 0x0000(0x0010) (NeedCtorLink)
	TArray<int>                                        DialogCanceledByTalkerCombat_MonologueIDs;                // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.DevelopmentDesign.MacroCommand
// 0x0014
struct FMacroCommand
{
	int                                                Id;                                                       // 0x0000(0x0004)
	struct FString                                     Command;                                                  // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.NirvanicPointLightComponent.NirvanicLightSettings_ForTOD
// 0x001C
struct FNirvanicLightSettings_ForTOD
{
	TEnumAsByte<ETODTimePhase>                         TimePhaseForThisSettings;                                 // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              TimePhaseTransitionSeconds;                               // 0x0004(0x0004) (Edit)
	unsigned long                                      bTODEnabled : 1;                                          // 0x0008(0x0004) (Edit)
	float                                              TODLightBrightness;                                       // 0x000C(0x0004) (Edit)
	struct FColor                                      TODLightColor;                                            // 0x0010(0x0004) (Edit)
	float                                              TODIndirectLightBrightness;                               // 0x0014(0x0004) (Edit)
	struct FColor                                      TODIndirectLightColor;                                    // 0x0018(0x0004) (Edit)
};

// ScriptStruct BLGame.BLAnim_TurnInPlace.RotTransitionInfo
// 0x000C
struct FRotTransitionInfo
{
	float                                              RotationOffset;                                           // 0x0000(0x0004) (Edit)
	struct FName                                       TransName;                                                // 0x0004(0x0008) (Edit)
};

// ScriptStruct BLGame.BLAnim_TurnInPlace_Player.TIP_Transition
// 0x0010
struct FTIP_Transition
{
	struct FName                                       TransName;                                                // 0x0000(0x0008) (Edit)
	struct FName                                       AnimName;                                                 // 0x0008(0x0008) (Edit)
};

// ScriptStruct BLGame.BLAnimCopycatOfBaseMesh.AnimSequenceBlendInfo
// 0x0018
struct FAnimSequenceBlendInfo
{
	class UAnimNodeSequence*                           OriginalNode;                                             // 0x0000(0x0008)
	float                                              Weight;                                                   // 0x0008(0x0004)
	class UAnimSequence*                               AnimSeq;                                                  // 0x000C(0x0008)
	int                                                LinkupIndex;                                              // 0x0014(0x0004)
};

// ScriptStruct BLGame.BLAnimNodeSequenceStatus.CharacterStatusSequence
// 0x000C
struct FCharacterStatusSequence
{
	TEnumAsByte<EBLCombatStatus>                       CharacterStatus;                                          // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FName                                       AnimName;                                                 // 0x0004(0x0008) (Edit)
};

// ScriptStruct BLGame.ABLDef.BLTransportRouteAnimBlendInfo
// 0x0010
struct FBLTransportRouteAnimBlendInfo
{
	struct FName                                       AnimSeqName;                                              // 0x0000(0x0008)
	float                                              Time;                                                     // 0x0008(0x0004)
	float                                              Weight;                                                   // 0x000C(0x0004)
};

// ScriptStruct BLGame.BLDummyNPC.DummyNPCAttackDamageInfo
// 0x0004
struct FDummyNPCAttackDamageInfo
{
	int                                                Damage;                                                   // 0x0000(0x0004) (Edit)
};

// ScriptStruct BLGame.BLDummyNPC.DummyNPCAttackInfo
// 0x001C
struct FDummyNPCAttackInfo
{
	int                                                SkillID;                                                  // 0x0000(0x0004) (Edit)
	int                                                ChanceToSelect;                                           // 0x0004(0x0004) (Edit)
	float                                              ChancePercentage;                                         // 0x0008(0x0004)
	TArray<struct FDummyNPCAttackDamageInfo>           DamageList;                                               // 0x000C(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.BLDummyServer.ClientSkillData
// 0x0024
struct FClientSkillData
{
	struct FString                                     Desciption;                                               // 0x0000(0x0010) (Edit, EditConst, AlwaysInit, NeedCtorLink)
	class USkillAsset*                                 SAsset;                                                   // 0x0010(0x0008) (Edit)
	float                                              CastingTime;                                              // 0x0018(0x0004) (Edit)
	float                                              AttackRange;                                              // 0x001C(0x0004) (Edit)
	float                                              ProjVelocity;                                             // 0x0020(0x0004) (Edit)
};

// ScriptStruct BLGame.BLDummyServer.DummyServerSkillActionInfo
// 0x0058
struct FDummyServerSkillActionInfo
{
	int                                                SkillCid;                                                 // 0x0000(0x0004)
	class USkillAsset*                                 SAsset;                                                   // 0x0004(0x0008)
	TEnumAsByte<ECETargetingType>                      TargetingType;                                            // 0x000C(0x0001)
	TEnumAsByte<ECESkillFiringType>                    FiringType;                                               // 0x000D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x000E(0x0002) MISSED OFFSET
	struct FVector                                     TargetLocation;                                           // 0x0010(0x000C)
	float                                              ServerCastingTime;                                        // 0x001C(0x0004)
	float                                              ServerOriginalCastingTime;                                // 0x0020(0x0004)
	TArray<struct FSkillResult>                        SkillResultList;                                          // 0x0024(0x0010) (Transient, NeedCtorLink)
	float                                              ServerFiringTime;                                         // 0x0034(0x0004)
	float                                              ServerOriginalFiringTime;                                 // 0x0038(0x0004)
	float                                              ApplyTime;                                                // 0x003C(0x0004)
	TArray<float>                                      LaunchMomentList;                                         // 0x0040(0x0010) (NeedCtorLink)
	unsigned long                                      bChanneling : 1;                                          // 0x0050(0x0004)
	unsigned long                                      bIgnoreMoveInput : 1;                                     // 0x0050(0x0004)
	unsigned long                                      bCanceledByMoving : 1;                                    // 0x0050(0x0004)
	float                                              IgnoreMoveInputBreakTime;                                 // 0x0054(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillDeckData
// 0x0028
struct FSkillDeckData
{
	int                                                DeckIdx;                                                  // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     DeckName;                                                 // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        CombatSkillCidList;                                       // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SkillAutoFiringCid;                                       // 0x0024(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.BLSkillDeckSizeInfo
// 0x000C
struct FBLSkillDeckSizeInfo
{
	int                                                MaxSkillDeckSize;                                         // 0x0000(0x0004)
	int                                                UnlockSkillDeckSize;                                      // 0x0004(0x0004)
	unsigned long                                      bUnlockCashSkillDeck : 1;                                 // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLDef.BLSkillDeckSlotInfo
// 0x0024
struct FBLSkillDeckSlotInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                SkillCid;                                                 // 0x0004(0x0004)
	int                                                ChangeSkillCid;                                           // 0x0008(0x0004)
	int                                                ActiveIconIndex;                                          // 0x000C(0x0004)
	int                                                DeactiveIconIndex;                                        // 0x0010(0x0004)
	TEnumAsByte<EBLSkillInfoType>                      SkillInfoType;                                            // 0x0014(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	unsigned long                                      bLock : 1;                                                // 0x0018(0x0004)
	int                                                RequireLevel;                                             // 0x001C(0x0004)
	int                                                RequireSPLevel;                                           // 0x0020(0x0004)
};

// ScriptStruct BLGame.ABLDef.BLSkillDeckInfo
// 0x009C
struct FBLSkillDeckInfo
{
	int                                                TacticsIndex;                                             // 0x0000(0x0004)
	struct FString                                     TitleName;                                                // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                AutoFiringSkillCid;                                       // 0x0014(0x0004)
	unsigned long                                      bValidTactic : 1;                                         // 0x0018(0x0004)
	int                                                UseStanceCid;                                             // 0x001C(0x0004)
	int                                                CandidateStanceCid;                                       // 0x0020(0x0004)
	struct FBLSkillDeckSlotInfo                        StanceSlot_2;                                             // 0x0024(0x0024)
	struct FBLSkillDeckSlotInfo                        StanceSlot_3;                                             // 0x0048(0x0024)
	TArray<struct FBLSkillDeckSlotInfo>                StanceSkillSlot_2;                                        // 0x006C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FBLSkillDeckSlotInfo>                StanceSkillSlot_3;                                        // 0x007C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FBLSkillDeckSlotInfo>                NonStanceSlotList;                                        // 0x008C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.BLSkillGemInfo
// 0x0040
struct FBLSkillGemInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                RequireLevel;                                             // 0x0004(0x0004)
	int                                                RequireSPLevel;                                           // 0x0008(0x0004)
	int                                                GemCost;                                                  // 0x000C(0x0004)
	int                                                GoldCost;                                                 // 0x0010(0x0004)
	unsigned long                                      Activated : 1;                                            // 0x0014(0x0004)
	int                                                ActiveIconIndex;                                          // 0x0018(0x0004)
	int                                                DeactiveIconIndex;                                        // 0x001C(0x0004)
	int                                                SkillChangeInfoCid;                                       // 0x0020(0x0004)
	int                                                ParentNodeCid;                                            // 0x0024(0x0004)
	int                                                ChildNodeCid;                                             // 0x0028(0x0004)
	int                                                SelectionOriginNodeCid;                                   // 0x002C(0x0004)
	TArray<int>                                        SelectionNodeCidList;                                     // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.BLParameterNode
// 0x0010
struct FBLParameterNode
{
	TArray<struct FBLSkillGemInfo>                     GemNode;                                                  // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BLStanceSkillQTEInfo
// 0x0009
struct FBLStanceSkillQTEInfo
{
	TEnumAsByte<ECEStanceQTEType>                      StanceQTEType;                                            // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                StanceSkillCodeName;                                      // 0x0004(0x0004)
	TEnumAsByte<ECEQTEKeyType>                         QTEKeyType;                                               // 0x0008(0x0001)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillDeckUnlockData
// 0x000C
struct FSkillDeckUnlockData
{
	int                                                MaxSkillDeckSize;                                         // 0x0000(0x0004) (AlwaysInit)
	int                                                UnlockSkillDeckSize;                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                UnlockCashSkillDeck;                                      // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CombatSkillTreeNodeData
// 0x0014
struct FCombatSkillTreeNodeData
{
	int                                                PageType;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                StanceCid;                                                // 0x0004(0x0004) (AlwaysInit)
	int                                                QTESkillCId;                                              // 0x0008(0x0004) (AlwaysInit)
	int                                                NodeCid;                                                  // 0x000C(0x0004) (AlwaysInit)
	int                                                ActionType;                                               // 0x0010(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CombatSkillTreeData
// 0x0028
struct FCombatSkillTreeData
{
	int                                                TreeIdx;                                                  // 0x0000(0x0004) (AlwaysInit)
	TArray<struct FCombatSkillTreeNodeData>            NodeList;                                                 // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                UseStanceGemCount;                                        // 0x0014(0x0004) (AlwaysInit)
	int                                                UseNonStanceGemCount;                                     // 0x0018(0x0004) (AlwaysInit)
	int                                                UseParameterGemCount;                                     // 0x001C(0x0004) (AlwaysInit)
	int                                                CurrentStanceCId;                                         // 0x0020(0x0004) (AlwaysInit)
	int                                                CandidateStanceCid;                                       // 0x0024(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.BLChangedNodeData
// 0x002C
struct FBLChangedNodeData
{
	int                                                StanceCid;                                                // 0x0000(0x0004)
	int                                                StanceSkillCid;                                           // 0x0004(0x0004)
	int                                                NodeCid;                                                  // 0x0008(0x0004)
	int                                                ParentNodeCid;                                            // 0x000C(0x0004)
	int                                                ChildNodeCid;                                             // 0x0010(0x0004)
	int                                                OriginNodeCid;                                            // 0x0014(0x0004)
	int                                                SkillChangeInfoCid;                                       // 0x0018(0x0004)
	int                                                GemCost;                                                  // 0x001C(0x0004)
	struct FQWord                                      GoldCost;                                                 // 0x0020(0x0008)
	unsigned long                                      Add : 1;                                                  // 0x0028(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.GemExchangedItemData
// 0x0008
struct FGemExchangedItemData
{
	int                                                ItemCid;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemCount;                                                // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.BLSkillQTEHUDManager.BLQTEHUDInfo
// 0x0024
struct FBLQTEHUDInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                SkillCid;                                                 // 0x0004(0x0004)
	TEnumAsByte<ECEQTEKeyType>                         QTEKeyType;                                               // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	unsigned long                                      bHold : 1;                                                // 0x000C(0x0004)
	int                                                EnableIconIndex;                                          // 0x0010(0x0004)
	int                                                DisableIconIndex;                                         // 0x0014(0x0004)
	unsigned long                                      bLock : 1;                                                // 0x0018(0x0004)
	int                                                RequireLevel;                                             // 0x001C(0x0004)
	int                                                RequireSPLevel;                                           // 0x0020(0x0004)
};

// ScriptStruct BLGame.BLSkillQTEHUDManager.BLGaugeInfo
// 0x000C
struct FBLGaugeInfo
{
	TEnumAsByte<EBLGaugePlayType>                      GaugePlayType;                                            // 0x0000(0x0001)
	TEnumAsByte<EBLGaugeColorType>                     GaugeColorType;                                           // 0x0001(0x0001)
	TEnumAsByte<EBLGaugeUseType>                       GaugeUseType;                                             // 0x0002(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	float                                              PrepareTime;                                              // 0x0004(0x0004)
	float                                              TotalPrepareTime;                                         // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillTreeNodeData
// 0x0008
struct FSkillTreeNodeData
{
	int                                                NodeCid;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                Level;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillTreeData
// 0x0018
struct FSkillTreeData
{
	int                                                TreeIdx;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                UsedSP;                                                   // 0x0004(0x0004) (AlwaysInit)
	TArray<struct FSkillTreeNodeData>                  NodeList;                                                 // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLUIManager.DungeonEntranceUIData
// 0x0028
struct FDungeonEntranceUIData
{
	int                                                DungeonGroupCid;                                          // 0x0000(0x0004)
	int                                                NormalDungeonRequiredLevel;                               // 0x0004(0x0004)
	int                                                HeroDungeonRequiredLevel;                                 // 0x0008(0x0004)
	unsigned long                                      bIsMultiDungeon : 1;                                      // 0x000C(0x0004)
	int                                                DungeonType;                                              // 0x0010(0x0004)
	struct FString                                     DungeonGroupName;                                         // 0x0014(0x0010) (NeedCtorLink)
	unsigned long                                      bFixDisable : 1;                                          // 0x0024(0x0004)
	unsigned long                                      bDisabled : 1;                                            // 0x0024(0x0004)
	unsigned long                                      bRegistrationWaintingStateNormal : 1;                     // 0x0024(0x0004)
	unsigned long                                      bRegistrationWaintingStateHero : 1;                       // 0x0024(0x0004)
	unsigned long                                      bRegistrationDisabled : 1;                                // 0x0024(0x0004)
	unsigned long                                      bWaitingListDisabled : 1;                                 // 0x0024(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DungeonEntranceGroupInfoData
// 0x000C (0x0040 - 0x0034)
struct FDungeonEntranceGroupInfoData : public FContentInfoData
{
	unsigned char                                      IsRaid;                                                   // 0x0034(0x0001)
	unsigned char                                      IsSolo;                                                   // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                NormalDungeonCid;                                         // 0x0038(0x0004)
	int                                                HeroDungeonCid;                                           // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.DungeonEntranceData
// 0x0008
struct FDungeonEntranceData
{
	int                                                DungeonEntranceCId;                                       // 0x0000(0x0004) (AlwaysInit)
	int                                                IsHeroEntrance;                                           // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.BLUIManager.CustomDialogEventData
// 0x001C
struct FCustomDialogEventData
{
	TEnumAsByte<EDialogType>                           Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                DialogValue;                                              // 0x0004(0x0004)
	int                                                SelectValue;                                              // 0x0008(0x0004)
	struct FString                                     StringValue;                                              // 0x000C(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.BLUIManager.DialogData
// 0x0029
struct FDialogData
{
	int                                                UniqueKey;                                                // 0x0000(0x0004)
	TEnumAsByte<EDialogType>                           Type;                                                     // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	int                                                SidExecutor;                                              // 0x0008(0x0004)
	int                                                SidTarget;                                                // 0x000C(0x0004)
	int                                                IntValue;                                                 // 0x0010(0x0004)
	float                                              FloatValue;                                               // 0x0014(0x0004)
	struct FString                                     StringValue;                                              // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<EUIName>                               OwnerEnum;                                                // 0x0028(0x0001)
};

// ScriptStruct BLGame.BLUIManager.DialogDrawingParam
// 0x001D
struct FDialogDrawingParam
{
	TEnumAsByte<EDialogStyle>                          Style;                                                    // 0x0000(0x0001)
	TEnumAsByte<EDialogOption>                         Option;                                                   // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	struct FString                                     DialogText;                                               // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              TimeOut;                                                  // 0x0014(0x0004)
	unsigned long                                      IsModal : 1;                                              // 0x0018(0x0004)
	unsigned char                                      ButtonFlags;                                              // 0x001C(0x0001)
};

// ScriptStruct BLGame.ABLSDLTypes.PartyMemberPCData
// 0x0064
struct FPartyMemberPCData
{
	int                                                SlotIndex;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                IsLogout;                                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                Sid;                                                      // 0x0008(0x0004) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Race;                                                     // 0x001C(0x0004) (AlwaysInit)
	int                                                Class;                                                    // 0x0020(0x0004) (AlwaysInit)
	int                                                Level;                                                    // 0x0024(0x0004) (AlwaysInit)
	int                                                MaxHP;                                                    // 0x0028(0x0004) (AlwaysInit)
	int                                                HP;                                                       // 0x002C(0x0004) (AlwaysInit)
	int                                                MaxMP;                                                    // 0x0030(0x0004) (AlwaysInit)
	int                                                MP;                                                       // 0x0034(0x0004) (AlwaysInit)
	TArray<struct FCombatFlairData>                    ComabatFlair;                                             // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FAbnormalStatusData>                 AbnormalStatusDataList;                                   // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                AdjustLevel;                                              // 0x0058(0x0004) (AlwaysInit)
	int                                                partyMatchingPositionType;                                // 0x005C(0x0004) (AlwaysInit)
	int                                                isApplyRandomDungeon;                                     // 0x0060(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.BLUIManager.SendMailItem
// 0x0008
struct FSendMailItem
{
	unsigned long                                      Sending : 1;                                              // 0x0000(0x0004)
	int                                                Sid;                                                      // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLUIManager.CMailData
// 0x007C
struct FCMailData
{
	TEnumAsByte<EMailType>                             MailType;                                                 // 0x0000(0x0001)
	TEnumAsByte<EMailStateType>                        MailStateType;                                            // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                KeepFlag;                                                 // 0x0004(0x0004)
	int                                                ReturnFlag;                                               // 0x0008(0x0004)
	struct FString                                     SenderName;                                               // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SystemMailCId;                                            // 0x001C(0x0004)
	struct FString                                     Title;                                                    // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Content;                                                  // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	struct FQWord                                      SendTime;                                                 // 0x0040(0x0008)
	struct FQWord                                      ExpireTime;                                               // 0x0048(0x0008)
	struct FQWord                                      Gold;                                                     // 0x0050(0x0008)
	int                                                WorldType;                                                // 0x0058(0x0004)
	int                                                WorldWrapperCId;                                          // 0x005C(0x0004)
	struct FVector                                     Location;                                                 // 0x0060(0x000C)
	TArray<class UBLMailItem*>                         MailItemList;                                             // 0x006C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.RequestDelAlrimiData
// 0x000C
struct FRequestDelAlrimiData
{
	int                                                AlrimiType;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                FirstKey;                                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                SecondKey;                                                // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.RequestAddAlrimiData
// 0x0010
struct FRequestAddAlrimiData
{
	int                                                AlrimiType;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                FirstKey;                                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                SecondKey;                                                // 0x0008(0x0004) (AlwaysInit)
	int                                                IsNew;                                                    // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CustomizingItemData
// 0x0005
struct FCustomizingItemData
{
	int                                                Type;                                                     // 0x0000(0x0004) (AlwaysInit)
	unsigned char                                      Value;                                                    // 0x0004(0x0001) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CustomizingPurchaseItemData
// 0x0014
struct FCustomizingPurchaseItemData
{
	int                                                Cid;                                                      // 0x0000(0x0004) (AlwaysInit)
	TArray<struct FCustomizingItemData>                CustomizingItemDataList;                                  // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.VoiceInfoData
// 0x0000 (0x0034 - 0x0034)
struct FVoiceInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLDef.CreateRaceInfo
// 0x0024
struct FCreateRaceInfo
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<int>                                        ClassLists;                                               // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        GenderLists;                                              // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLUIManager.RealmDataInfo
// 0x0014
struct FRealmDataInfo
{
	TEnumAsByte<ECERealmType>                          RealmType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<struct FCreateRaceInfo>                     RaceLists;                                                // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.LocationInfoData
// 0x001C (0x0050 - 0x0034)
struct FLocationInfoData : public FContentInfoData
{
	TEnumAsByte<ECELocationLevelType>                  LocationLevelType;                                        // 0x0034(0x0001)
	TEnumAsByte<ECEZonePVPIconType>                    ZonePVPIconType;                                          // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                Parent;                                                   // 0x0038(0x0004)
	int                                                ScenarioSortPrimary;                                      // 0x003C(0x0004)
	TArray<TEnumAsByte<ECEMountType>>                  MountTypeList;                                            // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLUIManager.DialogPositionParam
// 0x000C
struct FDialogPositionParam
{
	TEnumAsByte<EDialogAlign>                          Align;                                                    // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                OffsetX;                                                  // 0x0004(0x0004)
	int                                                OffsetY;                                                  // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SystemMessageInfoData
// 0x0028 (0x005C - 0x0034)
struct FSystemMessageInfoData : public FContentInfoData
{
	TEnumAsByte<ECESystemMessageDisplayType>           DisplayType;                                              // 0x0034(0x0001)
	TEnumAsByte<ECESystemMessageOverlayType>           OverlayType;                                              // 0x0035(0x0001)
	TEnumAsByte<ECESystemMessagePendingType>           PendingType;                                              // 0x0036(0x0001)
	TEnumAsByte<ECESystemMessageChatChannelType>       ChatChannelType;                                          // 0x0037(0x0001)
	float                                              OverlayTime;                                              // 0x0038(0x0004)
	struct FString                                     Message;                                                  // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             ParamTypeList;                                            // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLUIManager.UIPendingData
// 0x0014
struct FUIPendingData
{
	TEnumAsByte<EUIPendingType>                        PendingType;                                              // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     PendingUIName;                                            // 0x0004(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.QuestCountDownInfo
// 0x0018
struct FQuestCountDownInfo
{
	int                                                questId;                                                  // 0x0000(0x0004)
	int                                                CountDown;                                                // 0x0004(0x0004)
	struct FString                                     QuestName;                                                // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.UIMainKeyNameData
// 0x0014
struct FUIMainKeyNameData
{
	int                                                Index;                                                    // 0x0000(0x0004)
	struct FString                                     MainKeyName;                                              // 0x0004(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillTreeUIIndex
// 0x000C
struct FSkillTreeUIIndex
{
	TEnumAsByte<ESkillTreeGroupsType>                  TreeGroupsType;                                           // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SkillGroupIndex;                                          // 0x0004(0x0004)
	int                                                SkillIndex;                                               // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillTreeUISlotData
// 0x0010
struct FSkillTreeUISlotData
{
	struct FSkillTreeUIIndex                           UIIndex;                                                  // 0x0000(0x000C)
	int                                                SkillTreeCid;                                             // 0x000C(0x0004)
};

// ScriptStruct BLGame.BLSkillTacticsUISlotSkill.SkillUISlotData
// 0x0050
struct FSkillUISlotData
{
	struct FString                                     Index;                                                    // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Sid;                                                      // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Cid;                                                      // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IconIndex;                                                // 0x0030(0x0004)
	int                                                Type;                                                     // 0x0034(0x0004)
	unsigned long                                      IsLock : 1;                                               // 0x0038(0x0004)
	unsigned long                                      IsNew : 1;                                                // 0x0038(0x0004)
	unsigned long                                      IsUse : 1;                                                // 0x0038(0x0004)
	unsigned long                                      isNone : 1;                                               // 0x0038(0x0004)
	struct FString                                     Stat;                                                     // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      VisibleMinus : 1;                                         // 0x004C(0x0004)
	unsigned long                                      VisiblePlus : 1;                                          // 0x004C(0x0004)
	unsigned long                                      DisableMinus : 1;                                         // 0x004C(0x0004)
	unsigned long                                      DisablePlus : 1;                                          // 0x004C(0x0004)
};

// ScriptStruct BLGame.PassiveSkillManager.PassiveSkillInfo
// 0x0034
struct FPassiveSkillInfo
{
	float                                              ElapsedTime;                                              // 0x0000(0x0004)
	TArray<int>                                        ApplyMomentTimes;                                         // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ApplyInfoIndex;                                           // 0x0014(0x0004)
	class UBLBroadwayPlayer*                           BwPlayer;                                                 // 0x0018(0x0008)
	int                                                SkillCid;                                                 // 0x0020(0x0004)
	int                                                ResultKey;                                                // 0x0024(0x0004)
	unsigned long                                      bReady : 1;                                               // 0x0028(0x0004)
	unsigned long                                      bPlaying : 1;                                             // 0x0028(0x0004)
	class USkillAsset*                                 Asset;                                                    // 0x002C(0x0008)
};

// ScriptStruct BLGame.BLAnimBlendByClimbing.ClimbingAppendageTransitionInfo
// 0x0030
struct FClimbingAppendageTransitionInfo
{
	class UAnimNodeHumanIKMarker*                      PrevMarker;                                               // 0x0000(0x0008)
	class UAnimNodeHumanIKMarker*                      NextMarker;                                               // 0x0008(0x0008)
	class UAnimNodeHumanIKBlend*                       Blender;                                                  // 0x0010(0x0008)
	float                                              HandOffBlendTime;                                         // 0x0018(0x0004)
	float                                              GripBlendTime;                                            // 0x001C(0x0004)
	class UAnimNodeSequence*                           NodeSeq;                                                  // 0x0020(0x0008)
	float                                              StartTime;                                                // 0x0028(0x0004)
	float                                              EndTime;                                                  // 0x002C(0x0004)
};

// ScriptStruct BLGame.BLAnimBlendByVehicleAnim.SeqNameToChildIndexInfo
// 0x000C
struct FSeqNameToChildIndexInfo
{
	struct FName                                       SeqName;                                                  // 0x0000(0x0008) (Edit)
	int                                                ChildIndex;                                               // 0x0008(0x0004) (Edit)
};

// ScriptStruct BLGame.BLAnimBlendByCustomAnim.BLCustomAnimBlendInfo
// 0x000C
struct FBLCustomAnimBlendInfo
{
	float                                              BlendWeight;                                              // 0x0000(0x0004)
	float                                              BlendWeightTarget;                                        // 0x0004(0x0004)
	float                                              BlendTimeToGo;                                            // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLAnimNodeFreeze.BoneAtomsSnapshotInfo
// 0x0014
struct FBoneAtomsSnapshotInfo
{
	float                                              SnapshotTime;                                             // 0x0000(0x0004) (Transient)
	TArray<struct FBoneAtom>                           BoneAtomsSnapshot;                                        // 0x0004(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLAnimNodeOffsetBlending.OffsetComponent
// 0x0050
struct FOffsetComponent
{
	struct FName                                       BoneName;                                                 // 0x0000(0x0008) (Edit)
	unsigned char                                      UnknownData00[0x8];                                       // 0x0008(0x0008) MISSED OFFSET
	struct FAimTransform                               Base;                                                     // 0x0010(0x0020) (Edit)
	struct FAimTransform                               Offset;                                                   // 0x0030(0x0020) (Edit)
};

// ScriptStruct BLGame.BLAnimNodeOffsetBlending.OffsetProfile
// 0x0038
struct FOffsetProfile
{
	TArray<struct FOffsetComponent>                    OffsetComponents;                                         // 0x0000(0x0010) (Edit, NeedCtorLink)
	struct FName                                       AnimName_Offset;                                          // 0x0010(0x0008) (Edit)
	TArray<unsigned char>                              RequiredBones;                                            // 0x0018(0x0010) (Transient, NeedCtorLink)
	TArray<unsigned char>                              CpntIndexLUT;                                             // 0x0028(0x0010) (Transient, NeedCtorLink)
};

// ScriptStruct BLGame.BLAnimNodeRemoveAnimation.AnimationRemoveInfo
// 0x0030
struct FAnimationRemoveInfo
{
	struct FName                                       BoneName;                                                 // 0x0000(0x0008) (Edit)
	unsigned long                                      bRemoveTranslation : 1;                                   // 0x0008(0x0004) (Edit)
	unsigned long                                      bRemoveRotation : 1;                                      // 0x0008(0x0004) (Edit)
	int                                                BoneIndex;                                                // 0x000C(0x0004) (Transient)
	struct FVector                                     BoneRefTranslation;                                       // 0x0010(0x000C) (Transient)
	unsigned char                                      UnknownData00[0x4];                                       // 0x001C(0x0004) MISSED OFFSET
	struct FQuat                                       BoneRefRotation;                                          // 0x0020(0x0010) (Transient)
};

// ScriptStruct BLGame.BLAnimNodeSequenceScalable.BoneAnimScaleInfo
// 0x0028
struct FBoneAnimScaleInfo
{
	struct FName                                       BoneName;                                                 // 0x0000(0x0008) (Edit)
	struct FVector                                     TranslationScale;                                         // 0x0008(0x000C) (Edit)
	unsigned long                                      bAbsoluteScale : 1;                                       // 0x0014(0x0004) (Edit)
	unsigned long                                      bIsOneOff : 1;                                            // 0x0014(0x0004) (Transient)
	int                                                BoneIndex;                                                // 0x0018(0x0004) (Transient)
	struct FVector                                     Origin;                                                   // 0x001C(0x000C) (Transient)
};

// ScriptStruct BLGame.BLAnimNodeSlot.BLChildRootMotionInfo
// 0x0004
struct FBLChildRootMotionInfo
{
	unsigned long                                      bIsRootMotionAnim : 1;                                    // 0x0000(0x0004) (Transient)
	unsigned long                                      bPlayingRootMotion : 1;                                   // 0x0000(0x0004) (Transient)
};

// ScriptStruct BLGame.BLAnimSequence_RandomSeqName.RandomSeqName
// 0x000C
struct FRandomSeqName
{
	float                                              Chance;                                                   // 0x0000(0x0004) (Edit)
	struct FName                                       SeqName;                                                  // 0x0004(0x0008) (Edit)
};

// ScriptStruct BLGame.MorphController.MorphInstance
// 0x0024
struct FMorphInstance
{
	float                                              Lifetime;                                                 // 0x0000(0x0004)
	struct FName                                       MorphTargetName;                                          // 0x0004(0x0008)
	struct FInterpCurveFloat                           MorphCurveData;                                           // 0x000C(0x0014) (NeedCtorLink)
	float                                              AccumTime;                                                // 0x0020(0x0004)
};

// ScriptStruct BLGame.BLBroadwayPlayer.BroadwayNodeInstance
// 0x0074
struct FBroadwayNodeInstance
{
	int                                                RefNodeID;                                                // 0x0000(0x0004)
	int                                                SelfID;                                                   // 0x0004(0x0004)
	int                                                ParentID;                                                 // 0x0008(0x0004)
	int                                                ChildID;                                                  // 0x000C(0x0004)
	int                                                SiblingID;                                                // 0x0010(0x0004)
	class ABLPawnBase*                                 CacheTargetPawn;                                          // 0x0014(0x0008)
	struct FName                                       AnimSeqInst;                                              // 0x001C(0x0008)
	int                                                AnimSeqKey;                                               // 0x0024(0x0004)
	float                                              AnimTime;                                                 // 0x0028(0x0004)
	class UParticleSystemComponent*                    EmitterInst;                                              // 0x002C(0x0008) (ExportObject, Component, EditInline)
	TEnumAsByte<EBAR_TriggerCondition>                 TriggerCondition;                                         // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<EBAR_HitCondition>>             AcceptHitConditions;                                      // 0x0038(0x0010) (NeedCtorLink)
	float                                              TimeOffsetCounter;                                        // 0x0048(0x0004)
	unsigned long                                      bActivated : 1;                                           // 0x004C(0x0004)
	unsigned long                                      bCanceled : 1;                                            // 0x004C(0x0004)
	unsigned long                                      bFinishSequencePlay : 1;                                  // 0x004C(0x0004)
	unsigned long                                      bUseRootMotion : 1;                                       // 0x004C(0x0004)
	unsigned long                                      bExplodeProjectile : 1;                                   // 0x004C(0x0004)
	unsigned long                                      bFinishedEmitter : 1;                                     // 0x004C(0x0004)
	int                                                MassTargetNumber;                                         // 0x0050(0x0004)
	int                                                ApplyInfoSetKey;                                          // 0x0054(0x0004)
	int                                                ApplyInfoIndex;                                           // 0x0058(0x0004)
	float                                              PreviousFOV;                                              // 0x005C(0x0004)
	float                                              PlayTime;                                                 // 0x0060(0x0004)
	class UWindPointSourceComponent*                   WindComponents;                                           // 0x0064(0x0008) (ExportObject, Component, EditInline)
	class UUDKExplosionLight*                          ImpactLight;                                              // 0x006C(0x0008) (ExportObject, Component, EditInline)
};

// ScriptStruct BLGame.BLBroadwayPlayer.SeqPlayInfo
// 0x0036
struct FSeqPlayInfo
{
	struct FName                                       Sequence;                                                 // 0x0000(0x0008)
	float                                              BlendIn;                                                  // 0x0008(0x0004)
	float                                              BlendOut;                                                 // 0x000C(0x0004)
	float                                              AnimRate;                                                 // 0x0010(0x0004)
	float                                              StandardDistanceToTarget;                                 // 0x0014(0x0004)
	unsigned long                                      bLoop : 1;                                                // 0x0018(0x0004)
	unsigned long                                      bEnable : 1;                                              // 0x0018(0x0004)
	unsigned long                                      bUseRootMotion : 1;                                       // 0x0018(0x0004)
	float                                              RootMotionMovableTime;                                    // 0x001C(0x0004)
	unsigned long                                      bAdjustRootMotionApproach : 1;                            // 0x0020(0x0004)
	float                                              RootMotionApproachDistMyRadiusMultiplier;                 // 0x0024(0x0004)
	float                                              RootMotionApproachDistTargetRadiusMultiplier;             // 0x0028(0x0004)
	float                                              RootMotionApproachAdditionalDist;                         // 0x002C(0x0004)
	unsigned long                                      bAdjustRootMotionHeight : 1;                              // 0x0030(0x0004)
	unsigned long                                      bIsFullBodyAnim : 1;                                      // 0x0030(0x0004)
	unsigned long                                      bUseMeshOrientedCam : 1;                                  // 0x0030(0x0004)
	TEnumAsByte<EMeshOrientedCamMode>                  MeshOrientedCamMode;                                      // 0x0034(0x0001)
	TEnumAsByte<EPhysics>                              PendingPhys;                                              // 0x0035(0x0001)
};

// ScriptStruct BLGame.BSM_RC_Base.RCStateAnimSequenceInfo
// 0x0014
struct FRCStateAnimSequenceInfo
{
	struct FName                                       AnimSequenceName;                                         // 0x0000(0x0008) (Transient)
	float                                              BlendInTime;                                              // 0x0008(0x0004) (Transient)
	float                                              BlendOutTime;                                             // 0x000C(0x0004) (Transient)
	unsigned long                                      bLoop : 1;                                                // 0x0010(0x0004) (Transient)
	unsigned long                                      bFitAnimLength : 1;                                       // 0x0010(0x0004) (Transient)
};

// ScriptStruct BLGame.BSM_RC_Base.RCStateInfo
// 0x0018
struct FRCStateInfo
{
	struct FRCStateAnimSequenceInfo                    AnimSequenceInfo;                                         // 0x0000(0x0014)
	unsigned long                                      bMovingState : 1;                                         // 0x0014(0x0004)
	unsigned long                                      bTraceLand : 1;                                           // 0x0014(0x0004)
};

// ScriptStruct BLGame.BSM_Skill_Base.BSMDebugInfo
// 0x0014
struct FBSMDebugInfo
{
	struct FString                                     Text;                                                     // 0x0000(0x0010) (NeedCtorLink)
	struct FColor                                      C;                                                        // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLDef.HitJudgmentResult
// 0x005C
struct FHitJudgmentResult
{
	class UBLAnimNotify_EffectiveJudgment*             JudgmentOption;                                           // 0x0000(0x0008)
	class UAnimNodeSequence*                           AnimSeqInstigator;                                        // 0x0008(0x0008)
	class AActor*                                      Assailant;                                                // 0x0010(0x0008)
	int                                                AttackPartIndex;                                          // 0x0018(0x0004)
	class UPhysicalMaterial*                           AttackPhysMat;                                            // 0x001C(0x0008)
	class AActor*                                      Victim;                                                   // 0x0024(0x0008)
	int                                                BeatenPhysIndex;                                          // 0x002C(0x0004)
	class UPhysicalMaterial*                           BeatenPhysMat;                                            // 0x0030(0x0008)
	struct FVector                                     ContactPosition;                                          // 0x0038(0x000C)
	struct FVector                                     ContactNormal;                                            // 0x0044(0x000C)
	struct FVector                                     ContactMomentum;                                          // 0x0050(0x000C)
};

// ScriptStruct BLGame.BSM_BaseParameter.ConditionalBroadway
// 0x001C
struct FConditionalBroadway
{
	TEnumAsByte<ECONDITIONAL_BROADWAY_TYPE>            ConditionalType;                                          // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UBroadwayInfo*                               Broadway;                                                 // 0x0004(0x0008) (Edit)
	class UBroadwayInfo*                               CastingBroadway;                                          // 0x000C(0x0008) (Edit)
	class UBroadwayInfo*                               NextBroadway;                                             // 0x0014(0x0008) (Edit)
};

// ScriptStruct BLGame.BSM_BaseParameter.ClassifiedBroadway
// 0x003C
struct FClassifiedBroadway
{
	class UBodyInfo*                                   BodyInfo;                                                 // 0x0000(0x0008) (Edit)
	struct FName                                       BodyInfoName;                                             // 0x0008(0x0008)
	TEnumAsByte<ECEItemEquipCategory>                  MainItem;                                                 // 0x0010(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	class UBroadwayInfo*                               Broadway;                                                 // 0x0014(0x0008) (Edit)
	class UBroadwayInfo*                               CastingBroadway;                                          // 0x001C(0x0008) (Edit)
	class UBroadwayInfo*                               NextBroadway;                                             // 0x0024(0x0008) (Edit)
	TArray<struct FConditionalBroadway>                ConditionalBroadways;                                     // 0x002C(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.BLAggregateEquipment.AttachmentEquipInfo
// 0x0028
struct FAttachmentEquipInfo
{
	TEnumAsByte<ECEEquipSlotType>                      AttachEquipSlotType;                                      // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class USkeletalMeshComponent*                      Mesh;                                                     // 0x0004(0x0008) (Edit, ExportObject, Component, EditInline)
	class USkeletalMeshComponent*                      DecorationMesh;                                           // 0x000C(0x0008) (Edit, ExportObject, Component, EditInline)
	unsigned long                                      bHideWhenSheathed : 1;                                    // 0x0014(0x0004) (Edit)
	unsigned long                                      bHasWeaponOnAnimSet : 1;                                  // 0x0014(0x0004) (Edit)
	class UAnimSet*                                    WeaponOnAnimSet;                                          // 0x0018(0x0008) (Edit)
	class UAnimSet*                                    WeaponOffAnimSet;                                         // 0x0020(0x0008) (Edit)
};

// ScriptStruct BLGame.BLEquipmentItemDeformingInfo.ReshapingAsset
// 0x0020
struct FReshapingAsset
{
	TArray<struct FKBoxElem>                           Area;                                                     // 0x0000(0x0010) (Edit, NeedCtorLink)
	TArray<struct FKSphylElem>                         Shape;                                                    // 0x0010(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.BLEquipmentItemDressInfo.TargetDressDeformingInfo
// 0x0018
struct FTargetDressDeformingInfo
{
	class UBLEquipmentItemDressInfo*                   TargetDressInfo;                                          // 0x0000(0x0008)
	struct FName                                       TargetDressInfoName;                                      // 0x0008(0x0008)
	class UBLEquipmentItemDeformingInfo*               DeformingInfo;                                            // 0x0010(0x0008)
};

// ScriptStruct BLGame.BLEquipmentItemDressInfo.TargetBasePartDeformingInfo
// 0x000C
struct FTargetBasePartDeformingInfo
{
	TEnumAsByte<EEquipmentDisplaySlotType>             TargetBasePart;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UBLEquipmentItemDeformingInfo*               DeformingInfo;                                            // 0x0004(0x0008) (Edit)
};

// ScriptStruct BLGame.BLEquipmentItemInfo.EquipInfoMapEntity
// 0x0014
struct FEquipInfoMapEntity
{
	class UBodyInfo*                                   TargetBodyInfo;                                           // 0x0000(0x0008)
	TEnumAsByte<ECEClassType>                          TargetClassType;                                          // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	class UBLEquipmentItemEquipInfo*                   EquipInfo;                                                // 0x000C(0x0008)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ShopInfoData
// 0x0024 (0x0058 - 0x0034)
struct FShopInfoData : public FContentInfoData
{
	unsigned char                                      bShowClassItemOnly;                                       // 0x0034(0x0001)
	unsigned char                                      bCanGift;                                                 // 0x0035(0x0001)
	unsigned char                                      bBuyConfirm;                                              // 0x0036(0x0001)
	TEnumAsByte<ECEContentTokenType>                   ShopContentTokenType;                                     // 0x0037(0x0001)
	TArray<TEnumAsByte<ECERealmType>>                  RealmOwnerTypes;                                          // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        CitadelOwnerIDs;                                          // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.LimitedItemData
// 0x0008
struct FLimitedItemData
{
	int                                                IsLimitedItem;                                            // 0x0000(0x0004) (AlwaysInit)
	int                                                RemainLimitedCount;                                       // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ShopItemData
// 0x0010
struct FShopItemData
{
	int                                                ItemCid;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemCount;                                                // 0x0004(0x0004) (AlwaysInit)
	struct FLimitedItemData                            LimitedItemData;                                          // 0x0008(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ShopData
// 0x0020
struct FShopData
{
	TArray<struct FShopItemData>                       ShopItems;                                                // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FItemData>                           RepurchaseItems;                                          // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.ShopTradeItemData
// 0x0028
struct FShopTradeItemData
{
	int                                                ItemSid;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemCid;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                DesignatedTabIndex;                                       // 0x0008(0x0004) (AlwaysInit)
	int                                                DesignatedSlotIndex;                                      // 0x000C(0x0004) (AlwaysInit)
	int                                                IsGift;                                                   // 0x0010(0x0004) (AlwaysInit)
	struct FString                                     GiftReceiver;                                             // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ItemCount;                                                // 0x0024(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLUIDef.UIInventoryTabData
// 0x000C
struct FUIInventoryTabData
{
	int                                                TabIndex;                                                 // 0x0000(0x0004)
	int                                                SlotCount;                                                // 0x0004(0x0004)
	int                                                SlotIndex_BlockedStart;                                   // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLPlayerInventory.ItemSlot
// 0x000C
struct FItemSlot
{
	unsigned long                                      bNewFlag : 1;                                             // 0x0000(0x0004)
	unsigned long                                      bCooldown : 1;                                            // 0x0000(0x0004)
	class UBLItem*                                     SlotItem;                                                 // 0x0004(0x0008)
};

// ScriptStruct BLGame.BLPlayerInventory.InventoryTab
// 0x0010
struct FInventoryTab
{
	TArray<struct FItemSlot>                           InventorySlots;                                           // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLPlayerInventory.EquipmentTab
// 0x0014
struct FEquipmentTab
{
	int                                                SlotMax;                                                  // 0x0000(0x0004)
	TArray<struct FItemSlot>                           EquipSlots;                                               // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLPlayerInventory.InventorySlotComponentTab
// 0x0004
struct FInventorySlotComponentTab
{
	int                                                ExpansionSlotCount;                                       // 0x0000(0x0004)
};

// ScriptStruct BLGame.BLPlayerInventory.InventoryExpansionPurchaseInfo
// 0x0024
struct FInventoryExpansionPurchaseInfo
{
	int                                                ExpansionCid;                                             // 0x0000(0x0004)
	TArray<int>                                        ExpansionLumenas;                                         // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        ExpansionTypes;                                           // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLPlayerInventory.InventorySplitInfo
// 0x0010
struct FInventorySplitInfo
{
	int                                                SplitItemSid;                                             // 0x0000(0x0004)
	int                                                SplitItemCid;                                             // 0x0004(0x0004)
	int                                                SplitMinNum;                                              // 0x0008(0x0004)
	int                                                SplitMaxNum;                                              // 0x000C(0x0004)
};

// ScriptStruct BLGame.RuneManager.SlateMaterialData
// 0x000C
struct FSlateMaterialData
{
	int                                                Sid;                                                      // 0x0000(0x0004)
	int                                                Cid;                                                      // 0x0004(0x0004)
	int                                                Amount;                                                   // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLDef.RecipeItemData
// 0x0018
struct FRecipeItemData
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                COUNT;                                                    // 0x0004(0x0004)
	struct FString                                     Description;                                              // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RecipeInfoData
// 0x0020 (0x0054 - 0x0034)
struct FRecipeInfoData : public FContentInfoData
{
	float                                              SuccessChance;                                            // 0x0034(0x0004)
	int                                                SuccessProductItem;                                       // 0x0038(0x0004)
	float                                              GreateSuccessChance;                                      // 0x003C(0x0004)
	int                                                GreateSuccessProductItem;                                 // 0x0040(0x0004)
	TArray<struct FRecipeItemData>                     RequiredItemList;                                         // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.RuneSlotData
// 0x0010
struct FRuneSlotData
{
	TEnumAsByte<ECERuneType>                           CategoryType;                                             // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                ItemCid;                                                  // 0x0004(0x0004)
	int                                                RuneCid;                                                  // 0x0008(0x0004)
	unsigned long                                      IsDisable : 1;                                            // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLDef.RuneEquipUIData
// 0x0018
struct FRuneEquipUIData
{
	int                                                EquipmentItemCid;                                         // 0x0000(0x0004)
	int                                                EquipmentItemSid;                                         // 0x0004(0x0004)
	TArray<struct FRuneSlotData>                       SlotList;                                                 // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.RuneManager.RuneSlateUIData
// 0x0014
struct FRuneSlateUIData
{
	int                                                ResultItemSid;                                            // 0x0000(0x0004)
	TArray<struct FSlateMaterialData>                  MaterialItemList;                                         // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RecipeBookInfoData
// 0x0010 (0x0044 - 0x0034)
struct FRecipeBookInfoData : public FContentInfoData
{
	TArray<struct FRecipeItemData>                     MaterialItemList;                                         // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.V2RuneManager.RuneCarveUIData
// 0x0014
struct FRuneCarveUIData
{
	int                                                SocketIndex;                                              // 0x0000(0x0004)
	TArray<int>                                        RuneCidList;                                              // 0x0004(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.MaterialController.MITVSchedule
// 0x0025
struct FMITVSchedule
{
	int                                                KeyIndex;                                                 // 0x0000(0x0004)
	int                                                Priority;                                                 // 0x0004(0x0004)
	float                                              CheckTimer;                                               // 0x0008(0x0004)
	float                                              Lifetime;                                                 // 0x000C(0x0004)
	unsigned long                                      bApplied : 1;                                             // 0x0010(0x0004)
	unsigned long                                      bDelete : 1;                                              // 0x0010(0x0004)
	class UMaterialInstanceTimeVarying*                MITV;                                                     // 0x0014(0x0008)
	class UMaterialInstanceTimeVarying*                MITVNextLoop;                                             // 0x001C(0x0008)
	TEnumAsByte<EMCApplyType>                          ApplyType;                                                // 0x0024(0x0001)
};

// ScriptStruct BLGame.MaterialController.BLMaterialSettingInfo
// 0x0028
struct FBLMaterialSettingInfo
{
	class UMaterialInterface*                          MI;                                                       // 0x0000(0x0008)
	struct FString                                     MaterialNameKey;                                          // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             KeepTextureParameterNameList;                             // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.MaterialController.BodyMatCachingKeyType
// 0x0030
struct FBodyMatCachingKeyType
{
	struct FString                                     BodyMeshName;                                             // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     HeadMeshName;                                             // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     NPCAssetName;                                             // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.MaterialController.EquipmentMatCachingKeyType
// 0x0010
struct FEquipmentMatCachingKeyType
{
	TArray<struct FString>                             EquipmentMeshName;                                        // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLCinematicMovieManager.MoviePlayInfo
// 0x0014
struct FMoviePlayInfo
{
	int                                                CinematicMovieId;                                         // 0x0000(0x0004)
	class ULevelStreamingKismet*                       Level;                                                    // 0x0004(0x0008)
	unsigned long                                      bCanSkip : 1;                                             // 0x000C(0x0004)
	unsigned long                                      bSkipped : 1;                                             // 0x000C(0x0004)
	unsigned long                                      bAutoPlay : 1;                                            // 0x000C(0x0004)
	unsigned long                                      bPlayed : 1;                                              // 0x000C(0x0004)
	unsigned long                                      EnableStartTimeFadeIn : 1;                                // 0x000C(0x0004)
	float                                              SkipFadeOutTimeChecker;                                   // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLDef.CustomzingMultiTextureResource
// 0x0010
struct FCustomzingMultiTextureResource
{
	struct FName                                       ParameterName;                                            // 0x0000(0x0008) (Edit)
	class UTexture2D*                                  TextureResource;                                          // 0x0008(0x0008) (Edit)
};

// ScriptStruct BLGame.BLPhysicalMaterialProperty.FOOT_STEP_EFFECT_INFO
// 0x0070
struct FFOOT_STEP_EFFECT_INFO
{
	class UParticleSystem*                             DustPS;                                                   // 0x0000(0x0008) (Edit)
	struct FVector                                     Dust_SmallScale;                                          // 0x0008(0x000C) (Edit)
	struct FVector                                     Dust_MediumScale;                                         // 0x0014(0x000C) (Edit)
	struct FVector                                     Dust_LargeScale;                                          // 0x0020(0x000C) (Edit)
	struct FVector                                     Dust_HugeScale;                                           // 0x002C(0x000C) (Edit)
	class UMaterialInstanceTimeVarying*                FootPrintMITV;                                            // 0x0038(0x0008) (Edit)
	struct FVector                                     FootPrint_SmallSize;                                      // 0x0040(0x000C) (Edit)
	struct FVector                                     FootPrint_MediumSize;                                     // 0x004C(0x000C) (Edit)
	struct FVector                                     FootPrint_LargeSize;                                      // 0x0058(0x000C) (Edit)
	struct FVector                                     FootPrint_HugeSize;                                       // 0x0064(0x000C) (Edit)
};

// ScriptStruct BLGame.BLPhysicalMaterialProperty.FOOT_STEP_EFFECT_INFO_SPECIAL
// 0x0084
struct FFOOT_STEP_EFFECT_INFO_SPECIAL
{
	class UPawnAsset*                                  PawnInfo;                                                 // 0x0000(0x0008) (Edit)
	struct FPCInfoKey                                  KeyValue;                                                 // 0x0008(0x0004)
	struct FName                                       AssetName;                                                // 0x000C(0x0008)
	struct FFOOT_STEP_EFFECT_INFO                      InfoSpeical;                                              // 0x0014(0x0070) (Edit)
};

// ScriptStruct BLGame.BLProjectile.ProjectileImpactLightInfo
// 0x0009
struct FProjectileImpactLightInfo
{
	class UObject*                                     ImpactLightCustom;                                        // 0x0000(0x0008) (Transient)
	TEnumAsByte<EBAR_ImpactLight>                      ImpactLightType;                                          // 0x0008(0x0001) (Transient)
};

// ScriptStruct BLGame.BLProjectile.ProjectileDestInfo
// 0x0090
struct FProjectileDestInfo
{
	TEnumAsByte<EBAR_TargetBase>                       LocationOrigin;                                           // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FName                                       SocketBoneName;                                           // 0x0004(0x0008)
	unsigned long                                      bHeightOffset : 1;                                        // 0x000C(0x0004)
	TEnumAsByte<EBAR_RotationBase>                     RotationBase;                                             // 0x0010(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	float                                              SocketInsideRatio;                                        // 0x0014(0x0004)
	struct FVector                                     LocationOffset;                                           // 0x0018(0x000C)
	struct FRotator                                    RotationOffset;                                           // 0x0024(0x000C)
	int                                                OriginPawnID;                                             // 0x0030(0x0004)
	int                                                PlayPawnID;                                               // 0x0034(0x0004)
	struct FVector                                     PlayStartLocation;                                        // 0x0038(0x000C)
	struct FVector                                     FinalLocation;                                            // 0x0044(0x000C)
	struct FRotator                                    FinalRotation;                                            // 0x0050(0x000C)
	struct FVector                                     FinalLocationOffset;                                      // 0x005C(0x000C)
	struct FVector                                     LatestCalcLocation;                                       // 0x0068(0x000C)
	struct FRotator                                    LatestCalcRotation;                                       // 0x0074(0x000C)
	unsigned long                                      bPointTargetType : 1;                                     // 0x0080(0x0004)
	struct FVector                                     PointTargetLocation;                                      // 0x0084(0x000C)
};

// ScriptStruct BLGame.BLProjectile.ProjectileSpeedInfo
// 0x0010
struct FProjectileSpeedInfo
{
	float                                              Speed;                                                    // 0x0000(0x0004)
	float                                              MaxSpeed;                                                 // 0x0004(0x0004)
	float                                              AccelRate;                                                // 0x0008(0x0004)
	float                                              ServerFlyingTime;                                         // 0x000C(0x0004) (Transient)
};

// ScriptStruct BLGame.BLProjectile.ProjectileFlyingInfo
// 0x00B4
struct FProjectileFlyingInfo
{
	struct FProjectileDestInfo                         DestLocation;                                             // 0x0000(0x0090)
	struct FProjectileSpeedInfo                        SpeedInfo;                                                // 0x0090(0x0010)
	TEnumAsByte<EBezierCurveType>                      EBZCurve;                                                 // 0x00A0(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x00A1(0x0003) MISSED OFFSET
	float                                              BZCurveForce;                                             // 0x00A4(0x0004)
	int                                                BiDirection;                                              // 0x00A8(0x0004)
	float                                              SkidMove;                                                 // 0x00AC(0x0004)
	unsigned long                                      bUseContrailDustColor : 1;                                // 0x00B0(0x0004)
	unsigned long                                      bUseExplosionDustColor : 1;                               // 0x00B0(0x0004)
};

// ScriptStruct BLGame.BLProjectile.Matrix3x4Trans
// 0x0030
struct FMatrix3x4Trans
{
	struct FVector                                     S;                                                        // 0x0000(0x000C)
	struct FVector                                     CV1;                                                      // 0x000C(0x000C)
	struct FVector                                     CV2;                                                      // 0x0018(0x000C)
	struct FVector                                     E;                                                        // 0x0024(0x000C)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DungeonLimitedCount
// 0x0008
struct FDungeonLimitedCount
{
	TEnumAsByte<ECEResetTimeType>                      ResetType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                COUNT;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ChallengeTowerInfoData
// 0x0014 (0x0048 - 0x0034)
struct FChallengeTowerInfoData : public FContentInfoData
{
	unsigned char                                      ApplyBuild;                                               // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                RequireLevel;                                             // 0x0038(0x0004)
	int                                                RequireMaxLevel;                                          // 0x003C(0x0004)
	struct FDungeonLimitedCount                        LimitCount;                                               // 0x0040(0x0008)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AdditionalDungeonCountInfo
// 0x0008
struct FAdditionalDungeonCountInfo
{
	int                                                VipLevel;                                                 // 0x0000(0x0004)
	int                                                AdditionalCount;                                          // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ClientDungeonEscapePositionInfo
// 0x0018
struct FClientDungeonEscapePositionInfo
{
	TEnumAsByte<ECERealmType>                          RealmType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                FieldCid;                                                 // 0x0004(0x0004)
	struct FVector                                     Location;                                                 // 0x0008(0x000C)
	float                                              Angle;                                                    // 0x0014(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DefaultLoactionByRealm
// 0x0010
struct FDefaultLoactionByRealm
{
	TEnumAsByte<ECERealmType>                          Realm;                                                    // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     Loc;                                                      // 0x0004(0x000C)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.InstantDungeonInfoData
// 0x004C (0x0080 - 0x0034)
struct FInstantDungeonInfoData : public FContentInfoData
{
	unsigned char                                      ApplyBuild;                                               // 0x0034(0x0001)
	TEnumAsByte<ECEDungeonRequiredPartyType>           RequiredPartyType;                                        // 0x0035(0x0001)
	unsigned char                                      RandomDungeonApply;                                       // 0x0036(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	int                                                WorldMapCId;                                              // 0x0038(0x0004)
	int                                                ConsumeActingPoint;                                       // 0x003C(0x0004)
	int                                                RequiredLv;                                               // 0x0040(0x0004)
	int                                                LimitGearScore;                                           // 0x0044(0x0004)
	struct FDungeonLimitedCount                        DungeonLimit;                                             // 0x0048(0x0008)
	TArray<struct FAdditionalDungeonCountInfo>         AdditionalDungeonCountArray;                              // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FClientDungeonEscapePositionInfo>    RejectPosArray;                                           // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FDefaultLoactionByRealm>             LocationSendDefaultPosition;                              // 0x0070(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLNpcFactoryVolume.BLNpcFactoryPropperty
// 0x0050
struct FBLNpcFactoryPropperty
{
	int                                                TotalNumberOfGeneration;                                  // 0x0000(0x0004) (Edit)
	class UTexture2D*                                  FactoryActorIcon;                                         // 0x0004(0x0008) (Edit)
	struct FVector                                     VolumeSize;                                               // 0x000C(0x000C) (Edit, EditConst)
	struct FVector                                     VolumeSize_cm;                                            // 0x0018(0x000C) (Edit, EditConst)
	struct FVector                                     VolumeSize_meter;                                         // 0x0024(0x000C) (Edit, EditConst)
	TArray<TEnumAsByte<EPlacementType>>                Placements;                                               // 0x0030(0x0010) (Edit, NeedCtorLink)
	unsigned long                                      bMoveActorsWithVolume : 1;                                // 0x0040(0x0004) (Edit)
	unsigned long                                      bSolidDrawWhenSelected : 1;                               // 0x0040(0x0004) (Edit)
	unsigned long                                      bShowRelationLineWithActors : 1;                          // 0x0040(0x0004) (Edit)
	float                                              GridSize;                                                 // 0x0044(0x0004) (Edit)
	float                                              NpcRadius;                                                // 0x0048(0x0004) (Edit)
	float                                              NpcHeight;                                                // 0x004C(0x0004) (Edit)
};

// ScriptStruct BLGame.BLNpcFactoryVolume.BLLevel.BLLevelPartyData
// 0x0040
struct FBLLevelPartyData
{
	struct FString                                     PartyDataName;                                            // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     PartyNPCName;                                             // 0x0010(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TEnumAsByte<EBLLevelPositionType>                  PartyPositionType;                                        // 0x0020(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0021(0x0003) MISSED OFFSET
	struct FString                                     PartySpawnPosition;                                       // 0x0024(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TEnumAsByte<EBLLevelPartyStatus>                   PartyStatus;                                              // 0x0034(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                PartyCount;                                               // 0x0038(0x0004) (Edit)
	int                                                PartyDataRespawnTime;                                     // 0x003C(0x0004) (Edit)
};

// ScriptStruct BLGame.BLNpcFactoryVolume.BLLevel.BLLevelParty
// 0x0044
struct FBLLevelParty
{
	struct FString                                     PartyName;                                                // 0x0000(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TEnumAsByte<EBLLevelPartySpawnType>                PartySpawnType;                                           // 0x0010(0x0001) (Edit)
	TEnumAsByte<EBLLevelPartyDespawnType>              PartyDespawnType;                                         // 0x0011(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0012(0x0002) MISSED OFFSET
	unsigned long                                      bPartyExceptedFromAllSpawn : 1;                           // 0x0014(0x0004) (Edit)
	unsigned long                                      bPartySpawnTogether : 1;                                  // 0x0014(0x0004) (Edit)
	int                                                PartyRespawnTime;                                         // 0x0018(0x0004) (Edit)
	int                                                PartyRespawnRandomTime;                                   // 0x001C(0x0004)
	unsigned long                                      bHideInInstanceField : 1;                                 // 0x0020(0x0004) (Edit)
	unsigned long                                      bHideInPhaseField : 1;                                    // 0x0020(0x0004) (Edit)
	struct FString                                     PartyPathwayName;                                         // 0x0024(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FBLLevelPartyData>                   PartyData;                                                // 0x0034(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLNpcFactoryVolume.BLLevel.BLLevelSpawnData
// 0x007C
struct FBLLevelSpawnData
{
	TEnumAsByte<EBLLevelSpawnType>                     SpawnType;                                                // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     DataName;                                                 // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     SpawnName;                                                // 0x0014(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bExceptedFromAllSpawn : 1;                                // 0x0024(0x0004) (Edit)
	unsigned long                                      bHideInInstanceField : 1;                                 // 0x0024(0x0004) (Edit)
	unsigned long                                      bHideInPhaseField : 1;                                    // 0x0024(0x0004) (Edit)
	TEnumAsByte<EBLLevelPositionType>                  SpawnPositionType;                                        // 0x0028(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0029(0x0003) MISSED OFFSET
	struct FString                                     SpawnPosition;                                            // 0x002C(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	int                                                SpawnCount;                                               // 0x003C(0x0004) (Edit)
	int                                                SpawnRespawnTime;                                         // 0x0040(0x0004) (Edit)
	int                                                SpawnRespawnRandomTime;                                   // 0x0044(0x0004)
	struct FString                                     SpawnPathwayName;                                         // 0x0048(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     SpawnDataSyncKey;                                         // 0x0058(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bShareHP : 1;                                             // 0x0068(0x0004) (Edit)
	struct FString                                     HPSharingGroupName;                                       // 0x006C(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLNpcFactoryVolume.BLLevel
// 0x0104
struct FBLLevel
{
	int                                                LevelID;                                                  // 0x0000(0x0004)
	struct FString                                     LevelName;                                                // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TEnumAsByte<EBLWorldMapType>                       WorldMapType;                                             // 0x0014(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	struct FString                                     FieldCodeName;                                            // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     DungeonCodeName;                                          // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     InstantFieldCodeName;                                     // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     PhaseFieldCodeName;                                       // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     SpecialWarCodeName;                                       // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RoFieldCodeName;                                          // 0x0068(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ColosseumWarCodeName;                                     // 0x0078(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     OccupationWarCodeName;                                    // 0x0088(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ChallengeTowerCodeName;                                   // 0x0098(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                InstantFieldStageIndex;                                   // 0x00A8(0x0004)
	struct FString                                     CodeName;                                                 // 0x00AC(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	struct FString                                     VolumeFieldCodeName;                                      // 0x00BC(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	int                                                StageIndex;                                               // 0x00CC(0x0004)
	TArray<int>                                        StageIndexList;                                           // 0x00D0(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	unsigned long                                      bAllSpawn : 1;                                            // 0x00E0(0x0004) (Edit)
	unsigned long                                      bRespawn : 1;                                             // 0x00E0(0x0004) (Edit)
	unsigned long                                      bHideAllInInstanceField : 1;                              // 0x00E0(0x0004) (Edit)
	unsigned long                                      bHideAllInPhaseField : 1;                                 // 0x00E0(0x0004) (Edit)
	unsigned long                                      bEditing : 1;                                             // 0x00E0(0x0004) (Transient)
	TArray<struct FBLLevelParty>                       Party;                                                    // 0x00E4(0x0010) (Edit, AlwaysInit, NeedCtorLink)
	TArray<struct FBLLevelSpawnData>                   SpawnData;                                                // 0x00F4(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLEnvSingleCtrlModule.BLEnvBaseInfo
// 0x001C
struct FBLEnvBaseInfo
{
	class AVolume*                                     Volume;                                                   // 0x0000(0x0008) (Transient)
	unsigned long                                      bForceDetachInterpTime : 1;                               // 0x0008(0x0004) (Transient)
	float                                              PlayTime;                                                 // 0x000C(0x0004) (Transient)
	int                                                PrevVolumeIndex;                                          // 0x0010(0x0004) (Transient)
	float                                              InterpTime;                                               // 0x0014(0x0004) (Transient)
	int                                                Priority;                                                 // 0x0018(0x0004) (Transient)
};

// ScriptStruct BLGame.BLEnvSingleCtrlModule.BLEnvBaseInfo2
// 0x001C
struct FBLEnvBaseInfo2
{
	class AVolume*                                     Volume;                                                   // 0x0000(0x0008) (Transient)
	float                                              PlayTime;                                                 // 0x0008(0x0004) (Transient)
	int                                                PrevVolumeIndex;                                          // 0x000C(0x0004) (Transient)
	float                                              InterpTime;                                               // 0x0010(0x0004) (Transient)
	TEnumAsByte<ETODTimePhase>                         TimePhaseForThisSettings;                                 // 0x0014(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	int                                                Priority;                                                 // 0x0018(0x0004) (Transient)
};

// ScriptStruct BLGame.BLEnvDirectWindCtrlModule.BLEnvDirectWindInfo2
// 0x0008 (0x0024 - 0x001C)
struct FBLEnvDirectWindInfo2 : public FBLEnvBaseInfo2
{
	float                                              Strength;                                                 // 0x001C(0x0004) (Transient)
	float                                              Speed;                                                    // 0x0020(0x0004) (Transient)
};

// ScriptStruct BLGame.BLEnvDirectWindCtrlModule.BLEnvDirectWindInfo
// 0x003C (0x0058 - 0x001C)
struct FBLEnvDirectWindInfo : public FBLEnvBaseInfo
{
	float                                              Strength;                                                 // 0x001C(0x0004) (Transient)
	float                                              Speed;                                                    // 0x0020(0x0004) (Transient)
	struct FBLEnvDirectWindInfo2                       DefaultEnvDirectWindInfo;                                 // 0x0024(0x0024) (Transient)
	TArray<struct FBLEnvDirectWindInfo2>               EnvDirectWindInfos_ForTOD;                                // 0x0048(0x0010) (Transient, NeedCtorLink)
};

// ScriptStruct BLGame.BLEnvExpHeightFogCtrlModule.BLEnvExpHeightFogInfo2
// 0x002C (0x0048 - 0x001C)
struct FBLEnvExpHeightFogInfo2 : public FBLEnvBaseInfo2
{
	unsigned long                                      bExponentialHeightFogEnabled : 1;                         // 0x001C(0x0004) (Transient)
	float                                              FogDensity;                                               // 0x0020(0x0004) (Transient)
	float                                              FogHeightFalloff;                                         // 0x0024(0x0004) (Transient)
	float                                              FogMaxOpacity;                                            // 0x0028(0x0004) (Transient)
	float                                              StartDistance;                                            // 0x002C(0x0004) (Transient)
	float                                              LightTerminatorAngle;                                     // 0x0030(0x0004) (Transient)
	float                                              OppositeLightBrightness;                                  // 0x0034(0x0004) (Transient)
	struct FColor                                      OppositeLightColor;                                       // 0x0038(0x0004) (Transient)
	float                                              LightInscatteringBrightness;                              // 0x003C(0x0004) (Transient)
	struct FColor                                      LightInscatteringColor;                                   // 0x0040(0x0004) (Transient)
	float                                              ExponentialHeightFogLocZ;                                 // 0x0044(0x0004) (Transient)
};

// ScriptStruct BLGame.BLEnvExpHeightFogCtrlModule.BLEnvExpHeightFogInfo
// 0x0084 (0x00A0 - 0x001C)
struct FBLEnvExpHeightFogInfo : public FBLEnvBaseInfo
{
	unsigned long                                      bExponentialHeightFogEnabled : 1;                         // 0x001C(0x0004) (Transient)
	float                                              FogDensity;                                               // 0x0020(0x0004) (Transient)
	float                                              FogHeightFalloff;                                         // 0x0024(0x0004) (Transient)
	float                                              FogMaxOpacity;                                            // 0x0028(0x0004) (Transient)
	float                                              StartDistance;                                            // 0x002C(0x0004) (Transient)
	float                                              LightTerminatorAngle;                                     // 0x0030(0x0004) (Transient)
	float                                              OppositeLightBrightness;                                  // 0x0034(0x0004) (Transient)
	struct FColor                                      OppositeLightColor;                                       // 0x0038(0x0004) (Transient)
	float                                              LightInscatteringBrightness;                              // 0x003C(0x0004) (Transient)
	struct FColor                                      LightInscatteringColor;                                   // 0x0040(0x0004) (Transient)
	float                                              ExponentialHeightFogLocZ;                                 // 0x0044(0x0004) (Transient)
	struct FBLEnvExpHeightFogInfo2                     DefaultEnvExpHeightFogInfo;                               // 0x0048(0x0048) (Transient)
	TArray<struct FBLEnvExpHeightFogInfo2>             EnvExpHeightFogInfos_ForTOD;                              // 0x0090(0x0010) (Transient, NeedCtorLink)
};

// ScriptStruct BLGame.BLEnvHeightFogCtrlModule.BLEnvHeightFogInfo2
// 0x001C (0x0038 - 0x001C)
struct FBLEnvHeightFogInfo2 : public FBLEnvBaseInfo2
{
	unsigned long                                      bHeightFogEnabled : 1;                                    // 0x001C(0x0004) (Transient)
	float                                              Density;                                                  // 0x0020(0x0004) (Transient)
	float                                              ExtinctionDistance;                                       // 0x0024(0x0004) (Transient)
	float                                              HeightFogLightBrightness;                                 // 0x0028(0x0004) (Transient)
	struct FColor                                      HeightFogLightColor;                                      // 0x002C(0x0004) (Transient)
	float                                              StartDistance;                                            // 0x0030(0x0004) (Transient)
	float                                              HeightFogLocZ;                                            // 0x0034(0x0004) (Transient)
};

// ScriptStruct BLGame.BLEnvHeightFogCtrlModule.BLEnvHeightFogInfo
// 0x0064 (0x0080 - 0x001C)
struct FBLEnvHeightFogInfo : public FBLEnvBaseInfo
{
	unsigned long                                      bHeightFogEnabled : 1;                                    // 0x001C(0x0004) (Transient)
	float                                              Density;                                                  // 0x0020(0x0004) (Transient)
	float                                              ExtinctionDistance;                                       // 0x0024(0x0004) (Transient)
	float                                              HeightFogLightBrightness;                                 // 0x0028(0x0004) (Transient)
	struct FColor                                      HeightFogLightColor;                                      // 0x002C(0x0004) (Transient)
	float                                              StartDistance;                                            // 0x0030(0x0004) (Transient)
	float                                              HeightFogLocZ;                                            // 0x0034(0x0004) (Transient)
	struct FBLEnvHeightFogInfo2                        DefaultEnvHeightFogInfo;                                  // 0x0038(0x0038) (Transient)
	TArray<struct FBLEnvHeightFogInfo2>                EnvHeightFogInfos_ForTOD;                                 // 0x0070(0x0010) (Transient, NeedCtorLink)
};

// ScriptStruct BLGame.BLEnvLensFlareCtrlModule.BLEnvLensFlareInfo2
// 0x0004 (0x0020 - 0x001C)
struct FBLEnvLensFlareInfo2 : public FBLEnvBaseInfo2
{
	unsigned long                                      bIsActive : 1;                                            // 0x001C(0x0004) (Transient)
};

// ScriptStruct BLGame.BLEnvLensFlareCtrlModule.BLEnvLensFlareInfo
// 0x0034 (0x0050 - 0x001C)
struct FBLEnvLensFlareInfo : public FBLEnvBaseInfo
{
	unsigned long                                      bIsActive : 1;                                            // 0x001C(0x0004) (Transient)
	struct FBLEnvLensFlareInfo2                        DefaultEnvLensFlareInfo;                                  // 0x0020(0x0020) (Transient)
	TArray<struct FBLEnvLensFlareInfo2>                EnvLensFlareInfos_ForTOD;                                 // 0x0040(0x0010) (Transient, NeedCtorLink)
};

// ScriptStruct BLGame.BLEnvLightColorCtrlModule.BLEnvLightColorInfo2
// 0x0018 (0x0034 - 0x001C)
struct FBLEnvLightColorInfo2 : public FBLEnvBaseInfo2
{
	unsigned long                                      bLightEnabled : 1;                                        // 0x001C(0x0004) (Transient)
	float                                              Brightness;                                               // 0x0020(0x0004) (Transient)
	struct FColor                                      LightColor;                                               // 0x0024(0x0004) (Transient)
	float                                              NirvanicDomDirLightPitch;                                 // 0x0028(0x0004) (Transient)
	struct FColor                                      NirvanicLightmapScale;                                    // 0x002C(0x0004) (Transient)
	struct FColor                                      NirvanicDLEScale;                                         // 0x0030(0x0004) (Transient)
};

// ScriptStruct BLGame.BLEnvLightColorCtrlModule.BLEnvLightColorInfo
// 0x005C (0x0078 - 0x001C)
struct FBLEnvLightColorInfo : public FBLEnvBaseInfo
{
	unsigned long                                      bLightEnabled : 1;                                        // 0x001C(0x0004) (Transient)
	float                                              Brightness;                                               // 0x0020(0x0004) (Transient)
	struct FColor                                      LightColor;                                               // 0x0024(0x0004) (Transient)
	float                                              NirvanicDomDirLightPitch;                                 // 0x0028(0x0004) (Transient)
	struct FColor                                      NirvanicLightmapScale;                                    // 0x002C(0x0004) (Transient)
	struct FColor                                      NirvanicDLEScale;                                         // 0x0030(0x0004) (Transient)
	struct FBLEnvLightColorInfo2                       DefaultEnvLightColorInfo;                                 // 0x0034(0x0034) (Transient)
	TArray<struct FBLEnvLightColorInfo2>               EnvLightColorInfos_ForTOD;                                // 0x0068(0x0010) (Transient, NeedCtorLink)
};

// ScriptStruct BLGame.BLEnvLightShaftCtrlModule.BLEnvLightShaftInfo2
// 0x0020 (0x003C - 0x001C)
struct FBLEnvLightShaftInfo2 : public FBLEnvBaseInfo2
{
	float                                              BloomScale;                                               // 0x001C(0x0004) (Transient)
	float                                              BloomScreenBlendThreshold;                                // 0x0020(0x0004) (Transient)
	float                                              BloomThreshold;                                           // 0x0024(0x0004) (Transient)
	struct FColor                                      BloomTint;                                                // 0x0028(0x0004) (Transient)
	unsigned long                                      bRenderLightShafts : 1;                                   // 0x002C(0x0004) (Transient)
	float                                              OcclusionDepthRange;                                      // 0x0030(0x0004) (Transient)
	float                                              OcclusionMaskDarkness;                                    // 0x0034(0x0004) (Transient)
	float                                              RadialBlurPercent;                                        // 0x0038(0x0004) (Transient)
};

// ScriptStruct BLGame.BLEnvLightShaftCtrlModule.BLEnvLightShaftInfo
// 0x006C (0x0088 - 0x001C)
struct FBLEnvLightShaftInfo : public FBLEnvBaseInfo
{
	float                                              BloomScale;                                               // 0x001C(0x0004) (Transient)
	float                                              BloomScreenBlendThreshold;                                // 0x0020(0x0004) (Transient)
	float                                              BloomThreshold;                                           // 0x0024(0x0004) (Transient)
	struct FColor                                      BloomTint;                                                // 0x0028(0x0004) (Transient)
	unsigned long                                      bRenderLightShafts : 1;                                   // 0x002C(0x0004) (Transient)
	float                                              OcclusionDepthRange;                                      // 0x0030(0x0004) (Transient)
	float                                              OcclusionMaskDarkness;                                    // 0x0034(0x0004) (Transient)
	float                                              RadialBlurPercent;                                        // 0x0038(0x0004) (Transient)
	struct FBLEnvLightShaftInfo2                       DefaultEnvLightShaftInfo;                                 // 0x003C(0x003C) (Transient)
	TArray<struct FBLEnvLightShaftInfo2>               EnvLightShaftInfos_ForTOD;                                // 0x0078(0x0010) (Transient, NeedCtorLink)
};

// ScriptStruct BLGame.BLSkillAreaDecalComponent.ApplyDecalData
// 0x0014
struct FApplyDecalData
{
	class UMaterialInstanceConstant*                   Circular;                                                 // 0x0000(0x0008)
	class UMaterialInstanceConstant*                   Rectangle;                                                // 0x0008(0x0008)
	float                                              Size;                                                     // 0x0010(0x0004)
};

// ScriptStruct BLGame.DeferredSystemMessageComponent.ShowingMessageInfo
// 0x0030
struct FShowingMessageInfo
{
	float                                              ElapsedTime;                                              // 0x0000(0x0004)
	float                                              DurationTime;                                             // 0x0004(0x0004)
	struct FPendingMessageInfo                         MessageInfo;                                              // 0x0008(0x0028) (NeedCtorLink)
};

// ScriptStruct BLGame.DeferredSystemMessageComponent.ShowingOverlayCountInfo
// 0x0010
struct FShowingOverlayCountInfo
{
	TArray<struct FShowingMessageInfo>                 ShowingMessageArray;                                      // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BroadwayGameInfo.BroadwayLocationInfo
// 0x0041
struct FBroadwayLocationInfo
{
	TEnumAsByte<EBAR_TargetBase>                       LocationOrigin;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FName                                       SocketBoneName;                                           // 0x0004(0x0008) (Edit)
	TEnumAsByte<EBAR_RotationBase>                     RotationBase;                                             // 0x000C(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	struct FVector                                     LocationOffset;                                           // 0x0010(0x000C) (Edit)
	unsigned long                                      bHeightOffset : 1;                                        // 0x001C(0x0004) (Edit)
	struct FRotator                                    RotationOffset;                                           // 0x0020(0x000C) (Edit)
	unsigned long                                      bSocketHeight : 1;                                        // 0x002C(0x0004) (Edit)
	struct FName                                       SocketHeightSocketName;                                   // 0x0030(0x0008) (Edit)
	unsigned long                                      bSocketHeightLimitMinMax : 1;                             // 0x0038(0x0004) (Edit)
	unsigned long                                      bGroundHeight : 1;                                        // 0x0038(0x0004) (Edit)
	unsigned long                                      bCheckDegree : 1;                                         // 0x0038(0x0004) (Edit)
	float                                              GroundHeightDegree;                                       // 0x003C(0x0004) (Edit)
	TEnumAsByte<EBAR_GroundHeightCheckType>            GroundHeightCheckType;                                    // 0x0040(0x0001) (Edit)
};

// ScriptStruct BLGame.BroadwayGameInfo.BroadwayTarget
// 0x000C
struct FBroadwayTarget
{
	TEnumAsByte<EBAR_Target>                           Target;                                                   // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Number;                                                   // 0x0004(0x0004) (Edit)
	int                                                MassNumber;                                               // 0x0008(0x0004) (Transient)
};

// ScriptStruct BLGame.BroadwayInfo.PreviewTarget
// 0x0020
struct FPreviewTarget
{
	class UPawnAsset*                                  TargetPawnInfo;                                           // 0x0000(0x0008) (Edit)
	struct FVector                                     TargetLocation;                                           // 0x0008(0x000C) (Edit, EditConst)
	struct FRotator                                    TargetRotation;                                           // 0x0014(0x000C) (Edit, EditConst)
};

// ScriptStruct BLGame.BLChatManager.ChattingTabRect
// 0x0010
struct FChattingTabRect
{
	int                                                PosX;                                                     // 0x0000(0x0004)
	int                                                PosY;                                                     // 0x0004(0x0004)
	int                                                Width;                                                    // 0x0008(0x0004)
	int                                                Height;                                                   // 0x000C(0x0004)
};

// ScriptStruct BLGame.BLChatManager.ChattingTabSubscribe
// 0x0018
struct FChattingTabSubscribe
{
	TEnumAsByte<EChatMessageType>                      Channel;                                                  // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	unsigned long                                      IsSubscribe : 1;                                          // 0x0004(0x0004)
	unsigned long                                      IsAvailable : 1;                                          // 0x0004(0x0004)
	TArray<struct FChattingTabSubscribe>               ChildSubscribeChannel;                                    // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLChatManager.ChattingTabConfig
// 0x0050
struct FChattingTabConfig
{
	struct FString                                     KeyName;                                                  // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     TabName;                                                  // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                UIIndex;                                                  // 0x0020(0x0004)
	int                                                DockIndex;                                                // 0x0024(0x0004)
	int                                                FontSize;                                                 // 0x0028(0x0004)
	struct FChattingTabRect                            Transform;                                                // 0x002C(0x0010)
	TArray<struct FChattingTabSubscribe>               SubscribeChannel;                                         // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                DefaultChatChannel;                                       // 0x004C(0x0004)
};

// ScriptStruct BLGame.BLChatManager.ChattingTabSubscribeConfig
// 0x0034
struct FChattingTabSubscribeConfig
{
	struct FString                                     TabName;                                                  // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ParentChannelName;                                        // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ChannelName;                                              // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      Subscribe : 1;                                            // 0x0030(0x0004)
	unsigned long                                      Available : 1;                                            // 0x0030(0x0004)
};

// ScriptStruct BLGame.BLChatManager.ChattingChannel
// 0x002C
struct FChattingChannel
{
	TEnumAsByte<EChatMessageType>                      Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     ChannelName;                                              // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     GameStringName;                                           // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	struct FColor                                      FontColor;                                                // 0x0024(0x0004)
	unsigned long                                      ShowChatMode : 1;                                         // 0x0028(0x0004)
};

// ScriptStruct BLGame.TeleportBookMarkCommon.TeleportBookMark
// 0x002C
struct FTeleportBookMark
{
	struct FString                                     strName;                                                  // 0x0000(0x0010) (Config, NeedCtorLink)
	struct FVector                                     Location;                                                 // 0x0010(0x000C) (Config)
	struct FString                                     Description;                                              // 0x001C(0x0010) (Config, NeedCtorLink)
};

// ScriptStruct BLGame.GameHUD.BLPopupString
// 0x0034
struct FBLPopupString
{
	struct FString                                     Text;                                                     // 0x0000(0x0010) (NeedCtorLink)
	float                                              FadeTime;                                                 // 0x0010(0x0004)
	float                                              PosX;                                                     // 0x0014(0x0004)
	float                                              PosY;                                                     // 0x0018(0x0004)
	float                                              DestY;                                                    // 0x001C(0x0004)
	struct FVector                                     Location;                                                 // 0x0020(0x000C)
	unsigned char                                      FadeAlpha;                                                // 0x002C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	unsigned long                                      bHighLight : 1;                                           // 0x0030(0x0004)
	unsigned long                                      bAllocated : 1;                                           // 0x0030(0x0004)
	unsigned long                                      bNeedProject : 1;                                         // 0x0030(0x0004)
};

// ScriptStruct BLGame.GameHUD.TimeGapInfo
// 0x002C
struct FTimeGapInfo
{
	struct FDouble                                     StartTime;                                                // 0x0000(0x0008)
	float                                              lastTimeGap;                                              // 0x0008(0x0004)
	float                                              minTimeGap;                                               // 0x000C(0x0004)
	float                                              avgTimeGap;                                               // 0x0010(0x0004)
	float                                              maxTimeGap;                                               // 0x0014(0x0004)
	struct FString                                     Description;                                              // 0x0018(0x0010) (NeedCtorLink)
	int                                                COUNT;                                                    // 0x0028(0x0004)
};

// ScriptStruct BLGame.GameHUD.DurabilityHUDInfo
// 0x000C
struct FDurabilityHUDInfo
{
	int                                                Red;                                                      // 0x0000(0x0004)
	int                                                Orange;                                                   // 0x0004(0x0004)
	int                                                Yellow;                                                   // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLSkillDeckUIManager.BLParamIncreaseUIData
// 0x000C
struct FBLParamIncreaseUIData
{
	int                                                ParamDisplayCid;                                          // 0x0000(0x0004)
	int                                                BaseValue;                                                // 0x0004(0x0004)
	int                                                IncreaseValue;                                            // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLDef.QuestTargetObject
// 0x0009
struct FQuestTargetObject
{
	TEnumAsByte<ECEQuestTargetObjectType>              ObjectTargetType;                                         // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                TargetObjectCid;                                          // 0x0004(0x0004)
	TEnumAsByte<ECEQuestAdditionalMapInfoAreaType>     AreaType;                                                 // 0x0008(0x0001)
};

// ScriptStruct BLGame.ABLDef.QuestObjective
// 0x002C
struct FQuestObjective
{
	unsigned char                                      bNaviOn;                                                  // 0x0000(0x0001)
	unsigned char                                      bPathOn;                                                  // 0x0001(0x0001)
	TEnumAsByte<ECEQuestObjectiveType>                 ObjectiveType;                                            // 0x0002(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	struct FString                                     ObjectiveTitle;                                           // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ObjectCount;                                              // 0x0014(0x0004)
	TArray<struct FQuestTargetObject>                  TargetObjects;                                            // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                UseItemCid;                                               // 0x0028(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.QuestReward
// 0x000C
struct FQuestReward
{
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                ItemType;                                                 // 0x0004(0x0004)
	int                                                ItemQuantity;                                             // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.QuestRewardContentToken
// 0x0008
struct FQuestRewardContentToken
{
	TEnumAsByte<ECEContentTokenType>                   TokenType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                TokenCount;                                               // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.QuestPropInteractInfo
// 0x0010
struct FQuestPropInteractInfo
{
	int                                                PropCid;                                                  // 0x0000(0x0004)
	int                                                ItemCid;                                                  // 0x0004(0x0004)
	int                                                ItemCount;                                                // 0x0008(0x0004)
	float                                              Rate;                                                     // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLDef.QuestFailCondition
// 0x0018
struct FQuestFailCondition
{
	struct FString                                     FaildConditionTypeName;                                   // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ObjectCid;                                                // 0x0010(0x0004)
	int                                                ObjectCount;                                              // 0x0014(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.QuestAcceptCondition
// 0x0008
struct FQuestAcceptCondition
{
	TEnumAsByte<ECEQuestConditionType>                 QuestConditionType;                                       // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Cid;                                                      // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.QuestInfoData
// 0x00EC (0x0120 - 0x0034)
struct FQuestInfoData : public FContentInfoData
{
	TEnumAsByte<ECEQuestType>                          QuestType;                                                // 0x0034(0x0001)
	unsigned char                                      AbandonPossible;                                          // 0x0035(0x0001)
	unsigned char                                      SequentialObjective;                                      // 0x0036(0x0001)
	unsigned char                                      bAutoRewader;                                             // 0x0037(0x0001)
	unsigned char                                      Repeatable;                                               // 0x0038(0x0001)
	unsigned char                                      FilterOut;                                                // 0x0039(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	int                                                MinLimitLevel;                                            // 0x003C(0x0004)
	int                                                LevelRecommended;                                         // 0x0040(0x0004)
	int                                                LocationType;                                             // 0x0044(0x0004)
	int                                                RecommendPCNum;                                           // 0x0048(0x0004)
	float                                              MinimumDiameter;                                          // 0x004C(0x0004)
	struct FString                                     QuestTextSummary;                                         // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                TimeLimit;                                                // 0x0060(0x0004)
	int                                                QuestGiverId;                                             // 0x0064(0x0004)
	int                                                QuestRewarderId;                                          // 0x0068(0x0004)
	TArray<struct FQuestObjective>                     QuestObjects;                                             // 0x006C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        EssencialObjectiveIDs;                                    // 0x007C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        SelectiveObjectiveIDs;                                    // 0x008C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SelectiveObjectiveCount;                                  // 0x009C(0x0004)
	TArray<int>                                        AdditionalMapInfoIndex;                                   // 0x00A0(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                RewardMoney;                                              // 0x00B0(0x0004)
	int                                                RewardExp;                                                // 0x00B4(0x0004)
	TArray<struct FQuestReward>                        QuestFixedRewards;                                        // 0x00B8(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestRewardContentToken>            RewardContentToken;                                       // 0x00C8(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestReward>                        QuestChoiceRewards;                                       // 0x00D8(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestPropInteractInfo>              InteractPropList;                                         // 0x00E8(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestFailCondition>                 QuestFailConditions;                                      // 0x00F8(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                StoryCid;                                                 // 0x0108(0x0004)
	int                                                PlotIndex;                                                // 0x010C(0x0004)
	TArray<struct FQuestAcceptCondition>               AcceptConditions;                                         // 0x0110(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.DialogClientSelectionInfo
// 0x0014
struct FDialogClientSelectionInfo
{
	int                                                Category;                                                 // 0x0000(0x0004)
	struct FString                                     Text;                                                     // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DialogInfoData
// 0x0038 (0x006C - 0x0034)
struct FDialogInfoData : public FContentInfoData
{
	unsigned char                                      bShowQuest;                                               // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	struct FString                                     Text;                                                     // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FDialogClientSelectionInfo>          SelectionInfoList;                                        // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FDialogTextInfo>                     TextInfoList;                                             // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                questId;                                                  // 0x0068(0x0004)
};

// ScriptStruct BLGame.ABLDef.TutorialOrderObjectDetailData
// 0x0008
struct FTutorialOrderObjectDetailData
{
	TEnumAsByte<ECETutorialOrderObjectiveType>         ObjectiveClassId;                                         // 0x0000(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                PCActionEnum;                                             // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.TutorialOrderObjectData
// 0x0010
struct FTutorialOrderObjectData
{
	TArray<struct FTutorialOrderObjectDetailData>      ObjectDetail;                                             // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.RewardItemData
// 0x0010
struct FRewardItemData
{
	int                                                ItemCid;                                                  // 0x0000(0x0004)
	int                                                IconIndex;                                                // 0x0004(0x0004)
	int                                                COUNT;                                                    // 0x0008(0x0004)
	int                                                Grade;                                                    // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLDef.TutorialOrderData
// 0x006C
struct FTutorialOrderData
{
	int                                                Cid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                TutorialPriority;                                         // 0x0004(0x0004) (AlwaysInit)
	struct FString                                     CategoryCodename;                                         // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                GuideCodeName;                                            // 0x0018(0x0004) (AlwaysInit)
	unsigned long                                      ForceOpenGuide : 1;                                       // 0x001C(0x0004) (AlwaysInit)
	struct FString                                     Description;                                              // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	struct FTutorialOrderObjectData                    Objective;                                                // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	struct FTutorialOrderObjectData                    Alarmi;                                                   // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Exp;                                                      // 0x0050(0x0004) (AlwaysInit)
	TArray<struct FRewardItemData>                     RewardItems;                                              // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                TutorialOrderState;                                       // 0x0064(0x0004) (AlwaysInit)
	unsigned long                                      bLockObjectiveSendPackage : 1;                            // 0x0068(0x0004) (AlwaysInit)
	unsigned long                                      bLockAlarmiSendPackage : 1;                               // 0x0068(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.OrderObjective
// 0x000C
struct FOrderObjective
{
	int                                                COUNT;                                                    // 0x0000(0x0004)
	int                                                MaxCount;                                                 // 0x0004(0x0004)
	int                                                ObjectiveState;                                           // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLDef.OrderInfoData
// 0x0048
struct FOrderInfoData
{
	int                                                OrderCID;                                                 // 0x0000(0x0004)
	struct FString                                     Label;                                                    // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<ECEOrderGroupType>                     GroupType;                                                // 0x0014(0x0001)
	TEnumAsByte<ECEOrderPeriodType>                    PeriodType;                                               // 0x0015(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0016(0x0002) MISSED OFFSET
	int                                                PriorityType;                                             // 0x0018(0x0004)
	int                                                OrderState;                                               // 0x001C(0x0004)
	int                                                SealCount;                                                // 0x0020(0x0004)
	int                                                Exp;                                                      // 0x0024(0x0004)
	TArray<struct FOrderObjective>                     OrderObjectiveInfos;                                      // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FRewardItemData>                     RewardItemDatas;                                          // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCRankConstantValueInfoData
// 0x0004 (0x0038 - 0x0034)
struct FPCRankConstantValueInfoData : public FContentInfoData
{
	int                                                RegisterPrice;                                            // 0x0034(0x0004)
};

// ScriptStruct BLGame.BLUIManager.CustomDialogData
// 0x0058
struct FCustomDialogData
{
	int                                                UniqueKey;                                                // 0x0000(0x0004)
	TEnumAsByte<EDialogType>                           Type;                                                     // 0x0004(0x0001)
	TEnumAsByte<EDialogOption>                         OptionType;                                               // 0x0005(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0006(0x0002) MISSED OFFSET
	unsigned long                                      bModal : 1;                                               // 0x0008(0x0004)
	unsigned long                                      bEnableAllClose : 1;                                      // 0x0008(0x0004)
	TArray<class UGFxObject*>                          TextDatas;                                                // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<class UGFxObject*>                          ButtonDatas;                                              // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<class UGFxObject*>                          ObjectDatas;                                              // 0x002C(0x0010) (AlwaysInit, NeedCtorLink)
	class UGFxObject*                                  RecycleData;                                              // 0x003C(0x0008)
	TEnumAsByte<EDialogAlign>                          Align;                                                    // 0x0044(0x0001)
	TEnumAsByte<EUIName>                               DialogOwner;                                              // 0x0045(0x0001)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0046(0x0002) MISSED OFFSET
	TArray<int>                                        IntParameters;                                            // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.ChatData
// 0x003C
struct FChatData
{
	int                                                TalkerSid;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                TalkerPartnerType;                                        // 0x0004(0x0004) (AlwaysInit)
	int                                                TalkerGuildType;                                          // 0x0008(0x0004) (AlwaysInit)
	struct FString                                     TalkerGuildName;                                          // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     TalkerName;                                               // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Message;                                                  // 0x002C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.UIFriendData
// 0x006C
struct FUIFriendData
{
	unsigned long                                      bOnline : 1;                                              // 0x0000(0x0004)
	struct FString                                     FriendUID;                                                // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                PlayerClassNum;                                           // 0x0014(0x0004)
	struct FString                                     PlayerClassName;                                          // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     PlayerName;                                               // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Level;                                                    // 0x0038(0x0004)
	struct FString                                     RankName;                                                 // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     LocationName;                                             // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     LogoutTimeSpanText;                                       // 0x005C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLUIManager.BLLootingDiceData
// 0x0014
struct FBLLootingDiceData
{
	int                                                LootingDice_OwnerSid;                                     // 0x0000(0x0004)
	int                                                LootingDice_Ticket;                                       // 0x0004(0x0004)
	int                                                LootingDice_ItemCid;                                      // 0x0008(0x0004)
	int                                                LootingDice_ItemCount;                                    // 0x000C(0x0004)
	unsigned long                                      LootingDice_AuctionDisable : 1;                           // 0x0010(0x0004)
	unsigned long                                      LootingDice_GiveUpDisable : 1;                            // 0x0010(0x0004)
};

// ScriptStruct BLGame.BLUIManager.PartyMatchingPlayerData
// 0x0015
struct FPartyMatchingPlayerData
{
	struct FString                                     PlayerName;                                               // 0x0000(0x0010) (NeedCtorLink)
	int                                                PlayerLevel;                                              // 0x0010(0x0004)
	TEnumAsByte<ECEClassType>                          PlayerClass;                                              // 0x0014(0x0001)
};

// ScriptStruct BLGame.BLUIManager.PartyMatchingUIData
// 0x0014
struct FPartyMatchingUIData
{
	int                                                DungeonCid;                                               // 0x0000(0x0004)
	TArray<struct FPartyMatchingPlayerData>            PlayerList;                                               // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.DungeonPartyMatchingData
// 0x0018
struct FDungeonPartyMatchingData
{
	int                                                ClassType;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                Level;                                                    // 0x0004(0x0004) (AlwaysInit)
	struct FString                                     PlayerName;                                               // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLUIDef.UIEquipCustomSpecialResultInfo
// 0x0014
struct FUIEquipCustomSpecialResultInfo
{
	TArray<struct FString>                             CandidateOptionNames;                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SelectedIndex;                                            // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLUIDef.UIEquipCustomNormalResultInfo
// 0x0040
struct FUIEquipCustomNormalResultInfo
{
	TArray<struct FString>                             ParamNames;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             NowValues;                                                // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             NewValues;                                                // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        CompareValues;                                            // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLUIDef.UIEquipCustomItemNormalParamInfo
// 0x001C
struct FUIEquipCustomItemNormalParamInfo
{
	struct FString                                     ParamName;                                                // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                CurrentValue;                                             // 0x0010(0x0004)
	int                                                MinValue;                                                 // 0x0014(0x0004)
	int                                                MaxValue;                                                 // 0x0018(0x0004)
};

// ScriptStruct BLGame.ABLUIDef.UIEquipCustomItemSpecialParamInfo
// 0x0014
struct FUIEquipCustomItemSpecialParamInfo
{
	struct FString                                     LegendOptionName;                                         // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                LegendOptionCid;                                          // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLUIDef.UIEquipCustomItemSetInfo
// 0x0014
struct FUIEquipCustomItemSetInfo
{
	int                                                IconIndex;                                                // 0x0000(0x0004)
	int                                                ItemGrade;                                                // 0x0004(0x0004)
	int                                                ItemCid;                                                  // 0x0008(0x0004)
	int                                                ItemSid;                                                  // 0x000C(0x0004)
	unsigned long                                      bEnableNormal : 1;                                        // 0x0010(0x0004)
	unsigned long                                      bEnableSpecial : 1;                                       // 0x0010(0x0004)
	unsigned long                                      IsPotential : 1;                                          // 0x0010(0x0004)
	unsigned long                                      IsPotentialMax : 1;                                       // 0x0010(0x0004)
	unsigned long                                      IsPotentialDisjoint : 1;                                  // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLUIDef.UISkillDeckCandidateSlotInfo
// 0x0038
struct FUISkillDeckCandidateSlotInfo
{
	int                                                SlotIndex;                                                // 0x0000(0x0004)
	int                                                Cid;                                                      // 0x0004(0x0004)
	int                                                Grade;                                                    // 0x0008(0x0004)
	int                                                GroupID;                                                  // 0x000C(0x0004)
	int                                                IconIndex;                                                // 0x0010(0x0004)
	unsigned long                                      bSetted : 1;                                              // 0x0014(0x0004)
	unsigned long                                      bRecommend : 1;                                           // 0x0014(0x0004)
	unsigned long                                      bNew : 1;                                                 // 0x0014(0x0004)
	struct FString                                     SkillName;                                                // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FUISkillDeckCandidateSlotInfo>       SubSlotInfos;                                             // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLUIDef.UISkillBookSlotInfo
// 0x0045
struct FUISkillBookSlotInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                Grade;                                                    // 0x0004(0x0004)
	int                                                IconIndex;                                                // 0x0008(0x0004)
	unsigned long                                      bLearn : 1;                                               // 0x000C(0x0004)
	unsigned long                                      bLock : 1;                                                // 0x000C(0x0004)
	unsigned long                                      bNew : 1;                                                 // 0x000C(0x0004)
	unsigned long                                      bDraggable : 1;                                           // 0x000C(0x0004)
	float                                              RemainCoolDownTime;                                       // 0x0010(0x0004)
	float                                              MaxCoolDownTime;                                          // 0x0014(0x0004)
	struct FString                                     SkillName;                                                // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     SkillDesc;                                                // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      bProgress : 1;                                            // 0x0038(0x0004)
	int                                                CurrentExp;                                               // 0x003C(0x0004)
	int                                                MaxExp;                                                   // 0x0040(0x0004)
	TEnumAsByte<ETooltipType>                          TooltipType;                                              // 0x0044(0x0001)
};

// ScriptStruct BLGame.ABLDef.WarRankingInfo
// 0x006C
struct FWarRankingInfo
{
	int                                                RankingNumber;                                            // 0x0000(0x0004)
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	struct FString                                     CharName;                                                 // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     GuildName;                                                // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                GuildIconIndex;                                           // 0x0028(0x0004)
	int                                                KillScore;                                                // 0x002C(0x0004)
	int                                                AssistCount;                                              // 0x0030(0x0004)
	int                                                TotalScore;                                               // 0x0034(0x0004)
	unsigned long                                      bMyGuild : 1;                                             // 0x0038(0x0004)
	TArray<int>                                        MedalCidList;                                             // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        MedalIconIndexList;                                       // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                GoldMedalCount;                                           // 0x005C(0x0004)
	int                                                SilverMedalCount;                                         // 0x0060(0x0004)
	int                                                BronzeMedalCount;                                         // 0x0064(0x0004)
	int                                                RewardCount;                                              // 0x0068(0x0004)
};

// ScriptStruct BLGame.ABLDef.ColosseumScoreInfo
// 0x0028
struct FColosseumScoreInfo
{
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     CharName;                                                 // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                KillScore;                                                // 0x0014(0x0004)
	int                                                DealScore;                                                // 0x0018(0x0004)
	int                                                HealScore;                                                // 0x001C(0x0004)
	int                                                RewardScore;                                              // 0x0020(0x0004)
	unsigned long                                      bExitPlayer : 1;                                          // 0x0024(0x0004)
};

// ScriptStruct BLGame.ABLDef.WarMedalInfo
// 0x002C
struct FWarMedalInfo
{
	int                                                MedalCid;                                                 // 0x0000(0x0004)
	int                                                MedalIconIndex;                                           // 0x0004(0x0004)
	struct FString                                     MedalName;                                                // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MedalDesc;                                                // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      bAcquired : 1;                                            // 0x0028(0x0004)
};

// ScriptStruct BLGame.ABLDef.WarLogInfo
// 0x0018
struct FWarLogInfo
{
	int                                                LogCid;                                                   // 0x0000(0x0004)
	struct FString                                     LogName;                                                  // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                LogValue;                                                 // 0x0014(0x0004)
};

// ScriptStruct BLGame.ABLDef.UIFlashShopItemInfo
// 0x0068
struct FUIFlashShopItemInfo
{
	int                                                ShopProductCid;                                           // 0x0000(0x0004)
	int                                                ItemSid;                                                  // 0x0004(0x0004)
	int                                                ItemCid;                                                  // 0x0008(0x0004)
	int                                                ItemGrade;                                                // 0x000C(0x0004)
	struct FString                                     ItemName;                                                 // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ItemPriceText;                                            // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ItemAmountText;                                           // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ItemSaleRateText;                                         // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ItemDurationText;                                         // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      bNewItem : 1;                                             // 0x0060(0x0004)
	unsigned long                                      bHotItem : 1;                                             // 0x0060(0x0004)
	unsigned long                                      bActiveItem : 1;                                          // 0x0060(0x0004)
	unsigned long                                      bLevelLock : 1;                                           // 0x0060(0x0004)
	unsigned long                                      bPermanentLock : 1;                                       // 0x0060(0x0004)
	int                                                IconIndex;                                                // 0x0064(0x0004)
};

// ScriptStruct BLGame.ABLDef.UILumenaShopItemInfo
// 0x0070
struct FUILumenaShopItemInfo
{
	int                                                ItemSid;                                                  // 0x0000(0x0004)
	int                                                ItemCid;                                                  // 0x0004(0x0004)
	int                                                ItemGrade;                                                // 0x0008(0x0004)
	struct FString                                     ItemName;                                                 // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ItemAmountText;                                           // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ItemSaleRateText;                                         // 0x002C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ItemDurationText;                                         // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ResetText;                                                // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      bNewItem : 1;                                             // 0x005C(0x0004)
	unsigned long                                      bHotItem : 1;                                             // 0x005C(0x0004)
	unsigned long                                      bActiveItem : 1;                                          // 0x005C(0x0004)
	unsigned long                                      bLevelLock : 1;                                           // 0x005C(0x0004)
	unsigned long                                      bPermanentLock : 1;                                       // 0x005C(0x0004)
	int                                                IconIndex;                                                // 0x0060(0x0004)
	unsigned long                                      PreviewVisible : 1;                                       // 0x0064(0x0004)
	int                                                CoinType;                                                 // 0x0068(0x0004)
	int                                                Price;                                                    // 0x006C(0x0004)
};

// ScriptStruct BLGame.ABLDef.UILumenaShopCategoryInfo
// 0x0014
struct FUILumenaShopCategoryInfo
{
	struct FString                                     CategoryName;                                             // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                CategoryId;                                               // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.ItemTradeData
// 0x0020
struct FItemTradeData
{
	int                                                PlayerSid;                                                // 0x0000(0x0004) (AlwaysInit)
	struct FQWord                                      Gold;                                                     // 0x0004(0x0008) (AlwaysInit)
	TArray<struct FItemData>                           ItemList;                                                 // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                LockIn;                                                   // 0x001C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.MailItemData
// 0x0090
struct FMailItemData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                Amount;                                                   // 0x0008(0x0004) (AlwaysInit)
	struct Fword                                       CustomCount;                                              // 0x000C(0x0004) (AlwaysInit)
	TArray<struct FStatData>                           StatDataList;                                             // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                LegendOptCid;                                             // 0x0020(0x0004) (AlwaysInit)
	int                                                Bonding;                                                  // 0x0024(0x0004) (AlwaysInit)
	struct FQWord                                      DurationTime;                                             // 0x0028(0x0008) (AlwaysInit)
	struct FString                                     MakerName;                                                // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IsExpressMakerName;                                       // 0x0040(0x0004) (AlwaysInit)
	struct FQWord                                      TradingAbleDurationTime;                                  // 0x0044(0x0008) (AlwaysInit)
	unsigned char                                      PotentialLevel;                                           // 0x004C(0x0001) (AlwaysInit)
	unsigned char                                      UpgradeLevel;                                             // 0x004D(0x0001) (AlwaysInit)
	unsigned char                                      EvolutionLevel;                                           // 0x004E(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x004F(0x0001) MISSED OFFSET
	int                                                Rune_Item_CId_2;                                          // 0x0050(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_3;                                          // 0x0054(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_4;                                          // 0x0058(0x0004) (AlwaysInit)
	int                                                Rune_Item_CId_5;                                          // 0x005C(0x0004) (AlwaysInit)
	int                                                Durability;                                               // 0x0060(0x0004) (AlwaysInit)
	int                                                Max_Durability;                                           // 0x0064(0x0004) (AlwaysInit)
	int                                                Fixed_Max_Durability;                                     // 0x0068(0x0004) (AlwaysInit)
	TArray<struct FItemEvolutionAdditionalEffectData>  ItemEvolutionAdditionalEffectData;                        // 0x006C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MPFExtractionInfo;                                        // 0x007C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                MustSetProperty;                                          // 0x008C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.MailData
// 0x0080
struct FMailData
{
	int                                                MailType;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                MailStateType;                                            // 0x0004(0x0004) (AlwaysInit)
	int                                                KeepFlag;                                                 // 0x0008(0x0004) (AlwaysInit)
	int                                                ReturnFlag;                                               // 0x000C(0x0004) (AlwaysInit)
	struct FString                                     SenderName;                                               // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SystemMailCId;                                            // 0x0020(0x0004) (AlwaysInit)
	struct FString                                     Title;                                                    // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Content;                                                  // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	struct FQWord                                      SendTime;                                                 // 0x0044(0x0008) (AlwaysInit)
	struct FQWord                                      ExpireTime;                                               // 0x004C(0x0008) (AlwaysInit)
	struct FQWord                                      Gold;                                                     // 0x0054(0x0008) (AlwaysInit)
	int                                                WorldType;                                                // 0x005C(0x0004) (AlwaysInit)
	int                                                WorldWrapperCId;                                          // 0x0060(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0064(0x000C) (AlwaysInit)
	TArray<struct FMailItemData>                       MailItemData;                                             // 0x0070(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLUIManager.PendingDialogData
// 0x005C
struct FPendingDialogData
{
	TEnumAsByte<EDialogType>                           DialogType;                                               // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FDialogData                                 Data;                                                     // 0x0004(0x002C) (NeedCtorLink)
	struct FDialogDrawingParam                         DrawingParam;                                             // 0x0030(0x0020) (NeedCtorLink)
	struct FDialogPositionParam                        PositionParam;                                            // 0x0050(0x000C)
};

// ScriptStruct BLGame.ABLDef.AbnormalData
// 0x002D
struct FAbnormalData
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                CasterSID;                                                // 0x0004(0x0004)
	unsigned long                                      bSelf : 1;                                                // 0x0008(0x0004)
	int                                                GroupCID;                                                 // 0x000C(0x0004)
	float                                              DurationSeconds;                                          // 0x0010(0x0004)
	float                                              RemainingDurationSeconds;                                 // 0x0014(0x0004)
	int                                                IconIndex;                                                // 0x0018(0x0004)
	int                                                StackCount;                                               // 0x001C(0x0004)
	TEnumAsByte<ECEBuffDebuffType>                     BuffDebuffType;                                           // 0x0020(0x0001)
	TEnumAsByte<ECEIconShowType>                       IconShowType;                                             // 0x0021(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0022(0x0002) MISSED OFFSET
	struct FQWord                                      AttachedTime;                                             // 0x0024(0x0008)
	TEnumAsByte<ECEAbnormalStatusIconRaidShowType>     IconRaidShowType;                                         // 0x002C(0x0001)
};

// ScriptStruct BLGame.ABLDef.AbnormalGroupData
// 0x002D
struct FAbnormalGroupData
{
	int                                                GroupCID;                                                 // 0x0000(0x0004)
	TEnumAsByte<ECEAbnormalStackType>                  GroupIconStackType;                                       // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	int                                                GroupIconIndex;                                           // 0x0008(0x0004)
	float                                              GroupDurationSeconds;                                     // 0x000C(0x0004)
	float                                              GroupRemainingDurationSeconds;                            // 0x0010(0x0004)
	int                                                GroupTotalStackCount;                                     // 0x0014(0x0004)
	int                                                GroupSelfStackCount;                                      // 0x0018(0x0004)
	TArray<struct FAbnormalData>                       AbnormalDataList;                                         // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<ECEBuffDebuffType>                     BuffDebuffType;                                           // 0x002C(0x0001)
};

// ScriptStruct BLGame.ABLDef.PawnAbnormalGroupData
// 0x0048
struct FPawnAbnormalGroupData
{
	TEnumAsByte<EPawnType>                             PawnType;                                                 // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                PawnServerID;                                             // 0x0004(0x0004)
	TArray<struct FAbnormalGroupData>                  BuffAbnormalGroupDatas;                                   // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FAbnormalGroupData>                  DebuffAbnormalGroupDatas;                                 // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FAbnormalGroupData>                  CCAbnormalGroupDatas;                                     // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FAbnormalGroupData>                  SystemAbnormalGroupDatas;                                 // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OrderConstInfoData
// 0x0014 (0x0048 - 0x0034)
struct FOrderConstInfoData : public FContentInfoData
{
	TEnumAsByte<ECEWeekDayType>                        ResetWeekDay;                                             // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                DayResetHour;                                             // 0x0038(0x0004)
	int                                                WeeklyAchievementSealPoint;                               // 0x003C(0x0004)
	int                                                OrderAcceptMinLevel;                                      // 0x0040(0x0004)
	int                                                ActiveCode;                                               // 0x0044(0x0004)
};

// ScriptStruct BLGame.IconSheetAsset.IconSheetData
// 0x001C
struct FIconSheetData
{
	struct FString                                     Description;                                              // 0x0000(0x0010) (Edit, NeedCtorLink)
	int                                                IconSheetIndex;                                           // 0x0010(0x0004) (Edit)
	class UTexture2D*                                  IconSheetTexture;                                         // 0x0014(0x0008) (Edit)
};

// ScriptStruct BLGame.BLUIManager.UIStateData
// 0x0020
struct FUIStateData
{
	struct FString                                     UIName;                                                   // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<EUIName>                               UIEnumValue;                                              // 0x0010(0x0001)
	TEnumAsByte<EUIType>                               UIType;                                                   // 0x0011(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0012(0x0002) MISSED OFFSET
	unsigned long                                      bInit : 1;                                                // 0x0014(0x0004)
	unsigned long                                      bVisible : 1;                                             // 0x0014(0x0004)
	unsigned long                                      bIsLoaded : 1;                                            // 0x0014(0x0004)
	class UGFxObject*                                  InfoData;                                                 // 0x0018(0x0008)
};

// ScriptStruct BLGame.BLUIManager.MailCounts
// 0x0008
struct FMailCounts
{
	int                                                MailCount;                                                // 0x0000(0x0004)
	int                                                MaxMailCount;                                             // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLUIManager.MailDataList
// 0x0014
struct FMailDataList
{
	int                                                PageIndex;                                                // 0x0000(0x0004)
	TArray<struct FCMailData>                          MailList;                                                 // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLUIManager.MailBox
// 0x0020
struct FMailBox
{
	struct FMailCounts                                 MailCount;                                                // 0x0000(0x0008)
	struct FMailDataList                               MailLists;                                                // 0x0008(0x0014) (NeedCtorLink)
	int                                                MaxExpandMailCount;                                       // 0x001C(0x0004)
};

// ScriptStruct BLGame.BLUIManager.MailBoxEx
// 0x0010 (0x0030 - 0x0020)
struct FMailBoxEx : public FMailBox
{
	struct FMailCounts                                 GMMailCount;                                              // 0x0020(0x0008)
	struct FMailCounts                                 SystemMailCount;                                          // 0x0028(0x0008)
};

// ScriptStruct BLGame.BLUIManager.BattleMessageData
// 0x0014
struct FBattleMessageData
{
	TEnumAsByte<EBattleMessageTargetType>              TargetType;                                               // 0x0000(0x0001)
	TEnumAsByte<EBattleMessageType>                    BattleMessageType;                                        // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                Amount;                                                   // 0x0004(0x0004)
	float                                              Scale;                                                    // 0x0008(0x0004)
	float                                              PosX;                                                     // 0x000C(0x0004)
	float                                              PosY;                                                     // 0x0010(0x0004)
};

// ScriptStruct BLGame.BLUIManager.ContentTokenExchangeCacheData
// 0x0024
struct FContentTokenExchangeCacheData
{
	TEnumAsByte<ECEContentTokenType>                   SourceTokenType;                                          // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FQWord                                      SourceTokenAmount;                                        // 0x0004(0x0008)
	TEnumAsByte<ECEContentTokenType>                   TargetTokenType;                                          // 0x000C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	struct FQWord                                      TargetTokenAmount;                                        // 0x0010(0x0008)
	struct FQWord                                      CommissionAmount;                                         // 0x0018(0x0008)
	int                                                ExchangeRate;                                             // 0x0020(0x0004)
};

// ScriptStruct BLGame.BLUIManager.ContentTokenExchnageCachedDataV2
// 0x0025
struct FContentTokenExchnageCachedDataV2
{
	int                                                DPtoLumenaRate;                                           // 0x0000(0x0004)
	int                                                CPtoLumenaRate;                                           // 0x0004(0x0004)
	int                                                ExchangeToLumena;                                         // 0x0008(0x0004)
	int                                                ExchangeableLumenaMax;                                    // 0x000C(0x0004)
	int                                                MaxExchangeCTtoLumena;                                    // 0x0010(0x0004)
	int                                                AdditionalExchangeableLumena;                             // 0x0014(0x0004)
	int                                                LumenaExchangeResetTime;                                  // 0x0018(0x0004)
	int                                                MinToLumena;                                              // 0x001C(0x0004)
	int                                                MaxToLumena;                                              // 0x0020(0x0004)
	TEnumAsByte<ECoinType>                             CoinType;                                                 // 0x0024(0x0001)
};

// ScriptStruct BLGame.BLUIManager.RaidPartyFrameConfig
// 0x0010
struct FRaidPartyFrameConfig
{
	int                                                partyId;                                                  // 0x0000(0x0004)
	float                                              ScaleX;                                                   // 0x0004(0x0004)
	float                                              ScaleY;                                                   // 0x0008(0x0004)
	unsigned long                                      extension : 1;                                            // 0x000C(0x0004)
};

// ScriptStruct BLGame.BLSkillQTEHUDUIManager.BLGaugeTimerInfo
// 0x0008
struct FBLGaugeTimerInfo
{
	float                                              GaugeRemainTime;                                          // 0x0000(0x0004)
	unsigned long                                      bAutoHide : 1;                                            // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLSkillQTEHUDUIManager.BLChargeInfo
// 0x0008
struct FBLChargeInfo
{
	int                                                CurrentCharge;                                            // 0x0000(0x0004)
	int                                                MaxCharge;                                                // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLSpeechBubbleComponent.SpeechBubbleData
// 0x0020
struct FSpeechBubbleData
{
	struct FString                                     Text;                                                     // 0x0000(0x0010) (NeedCtorLink)
	int                                                Time;                                                     // 0x0010(0x0004)
	float                                              ElapsedTime;                                              // 0x0014(0x0004)
	unsigned long                                      IsEnemy : 1;                                              // 0x0018(0x0004)
	struct FColor                                      TextColor;                                                // 0x001C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ItemLegendOptionInfoData
// 0x0000 (0x0034 - 0x0034)
struct FItemLegendOptionInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AbnormalStatusGroupInfoData
// 0x0008 (0x003C - 0x0034)
struct FAbnormalStatusGroupInfoData : public FContentInfoData
{
	unsigned char                                      IconStackType;                                            // 0x0034(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                IconIndex;                                                // 0x0038(0x0004) (Const)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SpecialWarMedalInfoData
// 0x0010 (0x0044 - 0x0034)
struct FSpecialWarMedalInfoData : public FContentInfoData
{
	unsigned char                                      bShowOnRankTab;                                           // 0x0034(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                Group;                                                    // 0x0038(0x0004) (Const)
	int                                                Grade;                                                    // 0x003C(0x0004) (Const)
	int                                                IconIndex;                                                // 0x0040(0x0004) (Const)
};

// ScriptStruct BLGame.BLToolTipDataGenerator.ItemFontConfig
// 0x0024
struct FItemFontConfig
{
	int                                                Size;                                                     // 0x0000(0x0004)
	struct FColor                                      Color_Valid;                                              // 0x0004(0x0004)
	struct FColor                                      Color_Invalid;                                            // 0x0008(0x0004)
	struct FColor                                      Color_Disable;                                            // 0x000C(0x0004)
	struct FString                                     Align;                                                    // 0x0010(0x0010) (NeedCtorLink)
	unsigned long                                      Italic : 1;                                               // 0x0020(0x0004)
	unsigned long                                      Bold : 1;                                                 // 0x0020(0x0004)
	unsigned long                                      OverlapGradeColor : 1;                                    // 0x0020(0x0004)
};

// ScriptStruct BLGame.ABLDef.AreaInfoBase
// 0x0009
struct FAreaInfoBase
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                AlertOrder;                                               // 0x0004(0x0004)
	TEnumAsByte<EQuestAreaType>                        AreaType;                                                 // 0x0008(0x0001)
};

// ScriptStruct BLGame.ABLDef.QuestElement
// 0x0038
struct FQuestElement
{
	TEnumAsByte<EQuestElementType>                     Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FVector                                     Location;                                                 // 0x0004(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x0010(0x000C)
	struct FString                                     FloorGroupName;                                           // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Floor;                                                    // 0x002C(0x0004)
	int                                                questId;                                                  // 0x0030(0x0004)
	int                                                WorldMapCId;                                              // 0x0034(0x0004)
};

// ScriptStruct BLGame.ABLDef.QuestArea
// 0x0012 (0x004A - 0x0038)
struct FQuestArea : public FQuestElement
{
	float                                              Angle;                                                    // 0x0038(0x0004)
	float                                              Radius;                                                   // 0x003C(0x0004)
	float                                              Ratio;                                                    // 0x0040(0x0004)
	int                                                ObjectiveIndex;                                           // 0x0044(0x0004)
	TEnumAsByte<ECEQuestType>                          QuestType;                                                // 0x0048(0x0001)
	TEnumAsByte<ECEQuestAdditionalMapInfoAreaType>     AreaType;                                                 // 0x0049(0x0001)
};

// ScriptStruct BLGame.ABLDef.QuestAreaInfo
// 0x003F (0x0048 - 0x0009)
struct FQuestAreaInfo : public FAreaInfoBase
{
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	int                                                QuestType;                                                // 0x000C(0x0004)
	int                                                QuestObjectiveIndex;                                      // 0x0010(0x0004)
	struct FString                                     QuestTitle;                                               // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     QuestSummary;                                             // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              MinimumDiameter;                                          // 0x0034(0x0004)
	TArray<struct FQuestArea>                          QuestAreas;                                               // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.QuestNPCMarker
// 0x0014 (0x004C - 0x0038)
struct FQuestNPCMarker : public FQuestElement
{
	TEnumAsByte<EQuestNPCType>                         NPCType;                                                  // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                NPC_Cid;                                                  // 0x003C(0x0004)
	int                                                NPC_Sid;                                                  // 0x0040(0x0004)
	TEnumAsByte<EQuestMarker>                          MarkerType;                                               // 0x0044(0x0001)
	unsigned char                                      FilterOut;                                                // 0x0045(0x0001)
	unsigned char                                      UnknownData01[0x2];                                       // 0x0046(0x0002) MISSED OFFSET
	int                                                LevelRecommended;                                         // 0x0048(0x0004)
};

// ScriptStruct BLGame.GFxUI_Minimap.MinimapTooltipInfo
// 0x0030
struct FMinimapTooltipInfo
{
	struct FString                                     strTitle;                                                 // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Description;                                              // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             subQuest;                                                 // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.GFxUI_Minimap.QuestMinimapTooltipInfo
// 0x0014 (0x0044 - 0x0030)
struct FQuestMinimapTooltipInfo : public FMinimapTooltipInfo
{
	TEnumAsByte<ECEQuestType>                          QuestType;                                                // 0x0030(0x0001)
	TEnumAsByte<EQuestMarker>                          MarkerType;                                               // 0x0031(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0032(0x0002) MISSED OFFSET
	int                                                MarkerOrder;                                              // 0x0034(0x0004)
	int                                                AlertOrder;                                               // 0x0038(0x0004)
	int                                                QuestObjectiveIndex;                                      // 0x003C(0x0004)
	int                                                QuestCid;                                                 // 0x0040(0x0004)
};

// ScriptStruct BLGame.GFxUI_Minimap.NpcMinimapTooltipInfo
// 0x000C (0x003C - 0x0030)
struct FNpcMinimapTooltipInfo : public FMinimapTooltipInfo
{
	int                                                NpcCid;                                                   // 0x0030(0x0004)
	TEnumAsByte<ECENPCCategory>                        NPCCategory;                                              // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                NPCCategoryOrder;                                         // 0x0038(0x0004)
};

// ScriptStruct BLGame.GFxUI_Minimap.InstanceRevivalPointMinimapTooltipInfo
// 0x000C (0x003C - 0x0030)
struct FInstanceRevivalPointMinimapTooltipInfo : public FMinimapTooltipInfo
{
	int                                                Sid;                                                      // 0x0030(0x0004)
	TEnumAsByte<ECEInstantRevivalPointType>            PointType;                                                // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	unsigned long                                      bRegisted : 1;                                            // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLDef.QuestNPCInfo
// 0x0098
struct FQuestNPCInfo
{
	int                                                NpcCid;                                                   // 0x0000(0x0004)
	struct FVector                                     Location;                                                 // 0x0004(0x000C)
	struct FString                                     QuestNPCName;                                             // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     SumOfQuestTitle;                                          // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                HighPriorityAlertOrder;                                   // 0x0030(0x0004)
	int                                                HighPriorityQuestCid;                                     // 0x0034(0x0004)
	TEnumAsByte<EQuestMarker>                          HighPriorityQuestMarker;                                  // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	struct FQuestNPCMarker                             HighPriorityQuestMarkerInfo;                              // 0x003C(0x004C) (NeedCtorLink)
	TArray<struct FPointer>                            QuestNPCMarkers;                                          // 0x0088(0x0010) (Native, AlwaysInit)
};

// ScriptStruct BLGame.DeathController.InstanceRevivalPointInfo
// 0x0028
struct FInstanceRevivalPointInfo
{
	int                                                Sid;                                                      // 0x0000(0x0004)
	TEnumAsByte<ECEInstantRevivalPointType>            PointType;                                                // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	struct FVector                                     Location;                                                 // 0x0008(0x000C)
	struct FString                                     spawnerName;                                              // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      bRegisted : 1;                                            // 0x0024(0x0004)
};

// ScriptStruct BLGame.GFxUI_Minimap.MinimapIcon
// 0x0014
struct FMinimapIcon
{
	class UGFxObject*                                  Icon;                                                     // 0x0000(0x0008)
	class UGFxObject*                                  ShowZ;                                                    // 0x0008(0x0008)
	int                                                IconCid;                                                  // 0x0010(0x0004)
};

// ScriptStruct BLGame.MinimapAsset.BLMinimapUnitInfo
// 0x000C
struct FBLMinimapUnitInfo
{
	int                                                Index;                                                    // 0x0000(0x0004) (Edit)
	class UTexture2D*                                  MinimapTexture;                                           // 0x0004(0x0008) (Edit)
};

// ScriptStruct BLGame.MinimapAsset.BLMinimapDivisionInfo
// 0x003C
struct FBLMinimapDivisionInfo
{
	int                                                IndexX;                                                   // 0x0000(0x0004) (Edit)
	int                                                IndexY;                                                   // 0x0004(0x0004) (Edit)
	int                                                WorldMapCId;                                              // 0x0008(0x0004) (Edit)
	TArray<struct FBLMinimapUnitInfo>                  Unit;                                                     // 0x000C(0x0010) (Edit, NeedCtorLink)
	TArray<struct FBLMinimapUnitInfo>                  DoorUnit;                                                 // 0x001C(0x0010) (Edit, NeedCtorLink)
	TArray<struct FBLMinimapUnitInfo>                  ExtensionUnit;                                            // 0x002C(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.GFxObjectBase.QuadrantData
// 0x0010
struct FQuadrantData
{
	TArray<struct FVector2D>                           Datas;                                                    // 0x0000(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.GFxUI_Minimap.MinimapIconInfo
// 0x0020
struct FMinimapIconInfo
{
	struct FString                                     ClipName;                                                 // 0x0000(0x0010) (NeedCtorLink)
	TArray<struct FMinimapIcon>                        MinimapIcons;                                             // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.GFxUI_Minimap.MinimapScaleFactor
// 0x000C
struct FMinimapScaleFactor
{
	float                                              DisplayedAreaRatio;                                       // 0x0000(0x0004)
	float                                              VariableIconScale;                                        // 0x0004(0x0004)
	float                                              FixedIconScale;                                           // 0x0008(0x0004)
};

// ScriptStruct BLGame.GFxUI_MinimapExtension.ExtensionMinimapIconInfo
// 0x0034
struct FExtensionMinimapIconInfo
{
	struct FString                                     ClipName;                                                 // 0x0000(0x0010) (NeedCtorLink)
	int                                                COUNT;                                                    // 0x0010(0x0004)
	TArray<class UGFxObject*>                          Icons;                                                    // 0x0014(0x0010) (NeedCtorLink)
	TArray<int>                                        IconCids;                                                 // 0x0024(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.WICPromotion.WICPromotionInfo
// 0x0014
struct FWICPromotionInfo
{
	unsigned long                                      IsPageOpen : 1;                                           // 0x0000(0x0004)
	unsigned long                                      IsButtonShow : 1;                                         // 0x0000(0x0004)
	struct FString                                     URL;                                                      // 0x0004(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.StatusEffectInfo
// 0x0068
struct FStatusEffectInfo
{
	class UParticleSystem*                             Particle;                                                 // 0x0000(0x0008) (Edit)
	TEnumAsByte<ESTATUS_PARTICLE_LOCATION_TYPE>        LocationType;                                             // 0x0008(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	struct FName                                       AttachName;                                               // 0x000C(0x0008) (Edit)
	unsigned long                                      bHiddenParticleNotFoundSocket : 1;                        // 0x0014(0x0004) (Edit)
	unsigned long                                      bHiddenParticleOnSpawn : 1;                               // 0x0014(0x0004) (Edit)
	struct FVector                                     LocationOffset;                                           // 0x0018(0x000C) (Edit)
	class UMaterialInstanceTimeVarying*                PawnMITV;                                                 // 0x0024(0x0008) (Edit)
	float                                              PawnMITVLifeTime;                                         // 0x002C(0x0004) (Edit)
	int                                                PawnMITVPriority;                                         // 0x0030(0x0004) (Edit)
	TEnumAsByte<EMCApplyType>                          PawnMITVApplyType;                                        // 0x0034(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	class UMaterialInstanceTimeVarying*                PawnMITVNextLoop;                                         // 0x0038(0x0008) (Edit)
	class UMaterialInstanceTimeVarying*                GroundDecalMITV;                                          // 0x0040(0x0008) (Edit)
	unsigned long                                      bGroundDecalMovable : 1;                                  // 0x0048(0x0004) (Edit)
	struct FVector                                     GroundDecalScale;                                         // 0x004C(0x000C) (Edit)
	class UAkEvent*                                    AkSoundEvent;                                             // 0x0058(0x0008) (Edit)
	class UMorphWeightTimeVaryingSet*                  MorphDataSet;                                             // 0x0060(0x0008) (Edit)
};

// ScriptStruct BLGame.ABLDef.StatusParticleSoftAttachInfo
// 0x0070
struct FStatusParticleSoftAttachInfo
{
	class UParticleSystemComponent*                    PSC;                                                      // 0x0000(0x0008) (ExportObject, Component, EditInline)
	struct FStatusEffectInfo                           EffectInfo;                                               // 0x0008(0x0068)
};

// ScriptStruct BLGame.AbnormalStatusRestrict.RestrictAbnormalStatusEvent
// 0x006C
struct FRestrictAbnormalStatusEvent
{
	float                                              StartTime;                                                // 0x0000(0x0004)
	class UParticleSystem*                             Particle;                                                 // 0x0004(0x0008)
	struct FName                                       AttachName;                                               // 0x000C(0x0008)
	class UParticleSystemComponent*                    PSC;                                                      // 0x0014(0x0008) (ExportObject, Component, EditInline)
	TEnumAsByte<EABNORMAL_STATUS_EMITTER_TYPE>         EmitterType;                                              // 0x001C(0x0001)
	TEnumAsByte<EABNORMAL_STATUS_EMITTER_LOCATION_TYPE> LocationType;                                             // 0x001D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x001E(0x0002) MISSED OFFSET
	struct FVector                                     LocationOffset;                                           // 0x0020(0x000C)
	TEnumAsByte<ESTATUS_EFFECT_PHASE>                  AvailablePhase;                                           // 0x002C(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	unsigned long                                      UseFirstPos : 1;                                          // 0x0030(0x0004)
	struct FVector                                     FirstPos;                                                 // 0x0034(0x000C)
	int                                                UseFirstPosRefIndex;                                      // 0x0040(0x0004)
	float                                              StartTimeChild;                                           // 0x0044(0x0004)
	struct FName                                       AttachNameChild;                                          // 0x0048(0x0008)
	class UParticleSystemComponent*                    PSCChild;                                                 // 0x0050(0x0008) (ExportObject, Component, EditInline)
	TEnumAsByte<EABNORMAL_STATUS_EMITTER_LOCATION_TYPE> LocationTypeChild;                                        // 0x0058(0x0001)
	unsigned char                                      UnknownData02[0x3];                                       // 0x0059(0x0003) MISSED OFFSET
	struct FVector                                     LocationOffsetChild;                                      // 0x005C(0x000C)
	unsigned long                                      IsCreated : 1;                                            // 0x0068(0x0004)
};

// ScriptStruct BLGame.BLCornerPathNode.PathNodeActorIndex
// 0x000C
struct FPathNodeActorIndex
{
	int                                                DivisionIndexX;                                           // 0x0000(0x0004)
	int                                                DivisionIndexY;                                           // 0x0004(0x0004)
	int                                                PathNodeIndex;                                            // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.UpdateMPFData
// 0x000C
struct FUpdateMPFData
{
	struct FQWord                                      MPFUid;                                                   // 0x0000(0x0008) (AlwaysInit)
	int                                                MPFType;                                                  // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ULONGLONGWrapper
// 0x0008
struct FULONGLONGWrapper
{
	struct FQWord                                      Value;                                                    // 0x0000(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PartyMatchingPositionInfoData
// 0x0008
struct FPartyMatchingPositionInfoData
{
	int                                                PlayerSid;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                Position;                                                 // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.V2MissionFellowData
// 0x000C
struct FV2MissionFellowData
{
	int                                                SlotType;                                                 // 0x0000(0x0004) (AlwaysInit)
	struct FQWord                                      FellowUniqueID;                                           // 0x0004(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AuctionSearchData
// 0x0034
struct FAuctionSearchData
{
	int                                                IsDescSort;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                AuctionSortColumnType;                                    // 0x0004(0x0004) (AlwaysInit)
	int                                                IsUsable;                                                 // 0x0008(0x0004) (AlwaysInit)
	int                                                IsBuyable;                                                // 0x000C(0x0004) (AlwaysInit)
	unsigned char                                      ItemMinLevel;                                             // 0x0010(0x0001) (AlwaysInit)
	unsigned char                                      ItemMaxLevel;                                             // 0x0011(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0012(0x0002) MISSED OFFSET
	int                                                ItemGrade;                                                // 0x0014(0x0004) (AlwaysInit)
	int                                                ItemAuctionCategoryFirst;                                 // 0x0018(0x0004) (AlwaysInit)
	int                                                ItemAuctionCategorySecond;                                // 0x001C(0x0004) (AlwaysInit)
	int                                                ItemAuctionCategoryThird;                                 // 0x0020(0x0004) (AlwaysInit)
	struct FString                                     ItemName;                                                 // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.MoveRepInfo
// 0x0040
struct FMoveRepInfo
{
	int                                                PlayerSid;                                                // 0x0000(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0004(0x000C) (AlwaysInit)
	struct FRotator                                    NewRot;                                                   // 0x0010(0x000C) (AlwaysInit)
	struct FVector                                     ClientVel;                                                // 0x001C(0x000C) (AlwaysInit)
	int                                                IsPressedJump;                                            // 0x0028(0x0004) (AlwaysInit)
	int                                                Speed;                                                    // 0x002C(0x0004) (AlwaysInit)
	int                                                State;                                                    // 0x0030(0x0004) (AlwaysInit)
	int                                                Physics;                                                  // 0x0034(0x0004) (AlwaysInit)
	int                                                IsTracking;                                               // 0x0038(0x0004) (AlwaysInit)
	int                                                IsRootMotion;                                             // 0x003C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarNPCData
// 0x0014
struct FSpecialWarNPCData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0008(0x000C) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.V2MissionLevelTabInfo
// 0x0008
struct FV2MissionLevelTabInfo
{
	int                                                LevelIndex;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                LevelTabState;                                            // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.V2MissionData
// 0x0030
struct FV2MissionData
{
	int                                                MissionCId;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                MissionNameCId;                                           // 0x0004(0x0004) (AlwaysInit)
	int                                                MissionLevelTab;                                          // 0x0008(0x0004) (AlwaysInit)
	int                                                MissionSlot;                                              // 0x000C(0x0004) (AlwaysInit)
	int                                                MissionState;                                             // 0x0010(0x0004) (AlwaysInit)
	float                                              SuccessRatio;                                             // 0x0014(0x0004) (AlwaysInit)
	int                                                TotalMinuteToComplete;                                    // 0x0018(0x0004) (AlwaysInit)
	int                                                ConstTotalMinuteToComplete;                               // 0x001C(0x0004) (AlwaysInit)
	TArray<struct FV2MissionFellowData>                RegisterFellowUniqueIDList;                               // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarAttackAlertData
// 0x0008
struct FSpecialWarAttackAlertData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                ElapseTick;                                               // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CrowdControlComponentData
// 0x0008
struct FCrowdControlComponentData
{
	int                                                Type;                                                     // 0x0000(0x0004) (AlwaysInit)
	float                                              Param;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.WaypointRouteInfo
// 0x0018
struct FWaypointRouteInfo
{
	TArray<int>                                        routelistInfo;                                            // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FQWord                                      totalPrice;                                               // 0x0010(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CitadelOwnershipInfoData
// 0x0038
struct FCitadelOwnershipInfoData
{
	int                                                citadelCid;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                CitadelMapState;                                          // 0x0004(0x0004) (AlwaysInit)
	int                                                enableBid;                                                // 0x0008(0x0004) (AlwaysInit)
	int                                                bidGuildCount;                                            // 0x000C(0x0004) (AlwaysInit)
	int                                                guildBidCP;                                               // 0x0010(0x0004) (AlwaysInit)
	struct FString                                     GuildName;                                                // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     guildMasterName;                                          // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                guildMemberCount;                                         // 0x0034(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AuctionData
// 0x0064
struct FAuctionData
{
	struct FQWord                                      LeftTime;                                                 // 0x0000(0x0008) (AlwaysInit)
	struct FQWord                                      AuctionPrice;                                             // 0x0008(0x0008) (AlwaysInit)
	struct FQWord                                      AvgMarketPrice;                                           // 0x0010(0x0008) (AlwaysInit)
	struct FQWord                                      YesterdayMarketPrice;                                     // 0x0018(0x0008) (AlwaysInit)
	int                                                ItemCid;                                                  // 0x0020(0x0004) (AlwaysInit)
	int                                                ItemCount;                                                // 0x0024(0x0004) (AlwaysInit)
	int                                                ItemRemainEffect;                                         // 0x0028(0x0004) (AlwaysInit)
	struct Fword                                       ItemCustomCount;                                          // 0x002C(0x0004) (AlwaysInit)
	unsigned char                                      ItemPotentialLevel;                                       // 0x0030(0x0001) (AlwaysInit)
	unsigned char                                      ItemUpgradeLevel;                                         // 0x0031(0x0001) (AlwaysInit)
	unsigned char                                      ItemEvolutionLevel;                                       // 0x0032(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0033(0x0001) MISSED OFFSET
	TArray<struct FStatData>                           ItemStatDataList;                                         // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ItemLegendOpt;                                            // 0x0044(0x0004) (AlwaysInit)
	int                                                ItemRuneItemCId1;                                         // 0x0048(0x0004) (AlwaysInit)
	int                                                ItemRuneItemCId2;                                         // 0x004C(0x0004) (AlwaysInit)
	int                                                ItemRuneItemCId3;                                         // 0x0050(0x0004) (AlwaysInit)
	int                                                ItemRuneItemCId4;                                         // 0x0054(0x0004) (AlwaysInit)
	float                                              ItemDurability;                                           // 0x0058(0x0004) (AlwaysInit)
	int                                                ItemMaxDurability;                                        // 0x005C(0x0004) (AlwaysInit)
	int                                                ItemFixedMax_Durability;                                  // 0x0060(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.DungeonLimitedCountInfoData
// 0x0010
struct FDungeonLimitedCountInfoData
{
	int                                                DungeonCid;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                DungeonLimitCount;                                        // 0x0004(0x0004) (AlwaysInit)
	int                                                MaxDungeonAdditionalLimitCount;                           // 0x0008(0x0004) (AlwaysInit)
	int                                                DungeonAdditionalLimitCount;                              // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PartyMemberPosData
// 0x0028
struct FPartyMemberPosData
{
	int                                                SlotIndex;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                MemberId;                                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                WorldType;                                                // 0x0008(0x0004) (AlwaysInit)
	int                                                WorldMapCId;                                              // 0x000C(0x0004) (AlwaysInit)
	int                                                WorldMapWrapperCId;                                       // 0x0010(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0014(0x000C) (AlwaysInit)
	int                                                VolumeFieldCid;                                           // 0x0020(0x0004) (AlwaysInit)
	int                                                channelId;                                                // 0x0024(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.V2MPFFatigue_N_ExpData
// 0x0014
struct FV2MPFFatigue_N_ExpData
{
	struct FQWord                                      MPFUid;                                                   // 0x0000(0x0008) (AlwaysInit)
	int                                                MPFType;                                                  // 0x0008(0x0004) (AlwaysInit)
	int                                                Fatigue;                                                  // 0x000C(0x0004) (AlwaysInit)
	int                                                Exp;                                                      // 0x0010(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ApplyPartyEffectInfo
// 0x0008
struct FApplyPartyEffectInfo
{
	int                                                PartyIndex;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                ApplyPartyEffectCId;                                      // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.WarNPCNPropData
// 0x0018
struct FWarNPCNPropData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0008(0x000C) (AlwaysInit)
	int                                                WorldMapType;                                             // 0x0014(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ActionBarData
// 0x0010
struct FActionBarData
{
	int                                                SlotIdx;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                ActionBarType;                                            // 0x0004(0x0004) (AlwaysInit)
	struct FQWord                                      ActionBarId;                                              // 0x0008(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AlrimiData
// 0x0014
struct FAlrimiData
{
	int                                                AlrimiType;                                               // 0x0000(0x0004) (AlwaysInit)
	int                                                FirstKey;                                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                SecondKey;                                                // 0x0008(0x0004) (AlwaysInit)
	struct FQWord                                      RegisterTime;                                             // 0x000C(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarListData
// 0x000C
struct FSpecialWarListData
{
	int                                                specialWarCId;                                            // 0x0000(0x0004) (AlwaysInit)
	int                                                specialWarState;                                          // 0x0004(0x0004) (AlwaysInit)
	int                                                specialWarJoinType;                                       // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CraftBookMarkData
// 0x000C
struct FCraftBookMarkData
{
	int                                                CraftCId;                                                 // 0x0000(0x0004) (AlwaysInit)
	struct FQWord                                      BookMarkTime;                                             // 0x0004(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.MPFActionBarData
// 0x0010
struct FMPFActionBarData
{
	int                                                SlotIdx;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                ActionBarType;                                            // 0x0004(0x0004) (AlwaysInit)
	struct FQWord                                      ActionBarId;                                              // 0x0008(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.FieldChannelInfo
// 0x0010
struct FFieldChannelInfo
{
	int                                                channelId;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                PVPChannel;                                               // 0x0004(0x0004) (AlwaysInit)
	int                                                EnteredPlayerCount;                                       // 0x0008(0x0004) (AlwaysInit)
	int                                                MaxPlayerCount;                                           // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarRealmScoreData
// 0x0008
struct FSpecialWarRealmScoreData
{
	int                                                Realm;                                                    // 0x0000(0x0004) (AlwaysInit)
	int                                                Score;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PetOwnData
// 0x005C
struct FPetOwnData
{
	int                                                PetCId;                                                   // 0x0000(0x0004) (AlwaysInit)
	struct FQWord                                      PetUId;                                                   // 0x0004(0x0008) (AlwaysInit)
	int                                                Level;                                                    // 0x000C(0x0004) (AlwaysInit)
	int                                                Exp;                                                      // 0x0010(0x0004) (AlwaysInit)
	int                                                Grade;                                                    // 0x0014(0x0004) (AlwaysInit)
	float                                              Fatigue;                                                  // 0x0018(0x0004) (AlwaysInit)
	int                                                RareSkill_CID;                                            // 0x001C(0x0004) (AlwaysInit)
	int                                                EpicSkill_CID;                                            // 0x0020(0x0004) (AlwaysInit)
	int                                                LegendarySkill_CID;                                       // 0x0024(0x0004) (AlwaysInit)
	struct FQWord                                      ExpireTime;                                               // 0x0028(0x0008) (AlwaysInit)
	int                                                IsPermanent;                                              // 0x0030(0x0004) (AlwaysInit)
	int                                                IsLock;                                                   // 0x0034(0x0004) (AlwaysInit)
	float                                              GradeUpMileage;                                           // 0x0038(0x0004) (AlwaysInit)
	int                                                RemainGradeUpChance;                                      // 0x003C(0x0004) (AlwaysInit)
	int                                                ResetGradeUpChanceItemUseCnt;                             // 0x0040(0x0004) (AlwaysInit)
	float                                              ConsumeFatiguePetTime;                                    // 0x0044(0x0004) (AlwaysInit)
	float                                              RestoreFatiguePerTime;                                    // 0x0048(0x0004) (AlwaysInit)
	float                                              MaxFatigue;                                               // 0x004C(0x0004) (AlwaysInit)
	float                                              AutoLootingDelay;                                         // 0x0050(0x0004) (AlwaysInit)
	float                                              AutoLootingDistance;                                      // 0x0054(0x0004) (AlwaysInit)
	int                                                IsAutoLooting;                                            // 0x0058(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ColosseumScheduleInfo
// 0x0008
struct FColosseumScheduleInfo
{
	int                                                ColosseumCid;                                             // 0x0000(0x0004) (AlwaysInit)
	int                                                IsInSchedule;                                             // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.GuildJoinRequestData
// 0x0030
struct FGuildJoinRequestData
{
	struct FQWord                                      RequestDate;                                              // 0x0000(0x0008) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Level;                                                    // 0x0018(0x0004) (AlwaysInit)
	int                                                Class;                                                    // 0x001C(0x0004) (AlwaysInit)
	struct FString                                     Message;                                                  // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.OccupationWarPlayerScoreData
// 0x0024
struct FOccupationWarPlayerScoreData
{
	struct FString                                     PlayerName;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Realm;                                                    // 0x0010(0x0004) (AlwaysInit)
	int                                                ClassType;                                                // 0x0014(0x0004) (AlwaysInit)
	int                                                killCount;                                                // 0x0018(0x0004) (AlwaysInit)
	int                                                AssistCount;                                              // 0x001C(0x0004) (AlwaysInit)
	int                                                occupationCount;                                          // 0x0020(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.OccupationWarData
// 0x0018
struct FOccupationWarData
{
	int                                                occupationWarCId;                                         // 0x0000(0x0004) (AlwaysInit)
	int                                                VictoryRealm;                                             // 0x0004(0x0004) (AlwaysInit)
	TArray<struct FOccupationWarPlayerScoreData>       playerScoreList;                                          // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.MountCoolTimeData
// 0x000C
struct FMountCoolTimeData
{
	int                                                MountSkillCid;                                            // 0x0000(0x0004) (AlwaysInit)
	int                                                RemainTimeInMilliseconds;                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                TotalTimeInMilliseconds;                                  // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ColosseumScoreData
// 0x002C
struct FColosseumScoreData
{
	int                                                MemberSid;                                                // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ClassType;                                                // 0x0014(0x0004) (AlwaysInit)
	int                                                Kill;                                                     // 0x0018(0x0004) (AlwaysInit)
	int                                                Dealing;                                                  // 0x001C(0x0004) (AlwaysInit)
	int                                                Healing;                                                  // 0x0020(0x0004) (AlwaysInit)
	int                                                CP;                                                       // 0x0024(0x0004) (AlwaysInit)
	int                                                State;                                                    // 0x0028(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.IndividualCoolDownTime
// 0x000C
struct FIndividualCoolDownTime
{
	int                                                SkillCid;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                RemainTimeInMilliseconds;                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                TotalTimeInMilliseconds;                                  // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillApplyInfo
// 0x0014
struct FSkillApplyInfo
{
	int                                                ApplyMoment;                                              // 0x0000(0x0004) (AlwaysInit)
	TArray<struct FSkillResult>                        Results;                                                  // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.V2MountData
// 0x0064
struct FV2MountData
{
	struct FQWord                                      MountUniqueID;                                            // 0x0000(0x0008) (AlwaysInit)
	int                                                MountCId;                                                 // 0x0008(0x0004) (AlwaysInit)
	int                                                Grade;                                                    // 0x000C(0x0004) (AlwaysInit)
	int                                                Level;                                                    // 0x0010(0x0004) (AlwaysInit)
	int                                                Exp;                                                      // 0x0014(0x0004) (AlwaysInit)
	float                                              Fatigue;                                                  // 0x0018(0x0004) (AlwaysInit)
	int                                                LookInfo_CID;                                             // 0x001C(0x0004) (AlwaysInit)
	int                                                RareSkill_CID;                                            // 0x0020(0x0004) (AlwaysInit)
	int                                                EpicSkill_CID;                                            // 0x0024(0x0004) (AlwaysInit)
	int                                                LegendarySkill_CID;                                       // 0x0028(0x0004) (AlwaysInit)
	struct FQWord                                      ExpireTime;                                               // 0x002C(0x0008) (AlwaysInit)
	int                                                IsPermanent;                                              // 0x0034(0x0004) (AlwaysInit)
	int                                                RemainGradeUpChance;                                      // 0x0038(0x0004) (AlwaysInit)
	int                                                ResetGradeUpChanceItemUseCnt;                             // 0x003C(0x0004) (AlwaysInit)
	int                                                IsLock;                                                   // 0x0040(0x0004) (AlwaysInit)
	float                                              GradeUpMileage;                                           // 0x0044(0x0004) (AlwaysInit)
	float                                              ConsumeFatiguePetTime;                                    // 0x0048(0x0004) (AlwaysInit)
	float                                              DespawnRestoreFatiguePerTime;                             // 0x004C(0x0004) (AlwaysInit)
	float                                              StopRestoreFatiguePerTime;                                // 0x0050(0x0004) (AlwaysInit)
	float                                              MaxFatigue;                                               // 0x0054(0x0004) (AlwaysInit)
	float                                              RideTime;                                                 // 0x0058(0x0004) (AlwaysInit)
	float                                              SpeedRunForward;                                          // 0x005C(0x0004) (AlwaysInit)
	float                                              SpeedFlyingForward;                                       // 0x0060(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PCDeadBodyData
// 0x0090
struct FPCDeadBodyData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                OwnerSid;                                                 // 0x0004(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0008(0x000C) (AlwaysInit)
	struct FRotator                                    Rotation;                                                 // 0x0014(0x000C) (AlwaysInit)
	struct FPawnParamData                              ParamData;                                                // 0x0020(0x0048) (AlwaysInit, NeedCtorLink)
	TArray<struct FEquipedItemData>                    EquipmentItemDataList;                                    // 0x0068(0x0010) (AlwaysInit, NeedCtorLink)
	struct FCustomizeData                              CustomizeData;                                            // 0x0078(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ShowCostume;                                              // 0x0088(0x0004) (AlwaysInit)
	int                                                AdjustLevel;                                              // 0x008C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.FellowData
// 0x0084
struct FFellowData
{
	int                                                FellowCId;                                                // 0x0000(0x0004) (AlwaysInit)
	struct FQWord                                      FellowUniqueID;                                           // 0x0004(0x0008) (AlwaysInit)
	int                                                Grade;                                                    // 0x000C(0x0004) (AlwaysInit)
	int                                                Vocation;                                                 // 0x0010(0x0004) (AlwaysInit)
	int                                                Level;                                                    // 0x0014(0x0004) (AlwaysInit)
	int                                                Exp;                                                      // 0x0018(0x0004) (AlwaysInit)
	float                                              Fatigue;                                                  // 0x001C(0x0004) (AlwaysInit)
	int                                                Strength;                                                 // 0x0020(0x0004) (AlwaysInit)
	int                                                Agility;                                                  // 0x0024(0x0004) (AlwaysInit)
	int                                                Intelligence;                                             // 0x0028(0x0004) (AlwaysInit)
	int                                                Wisdom;                                                   // 0x002C(0x0004) (AlwaysInit)
	int                                                Stamina;                                                  // 0x0030(0x0004) (AlwaysInit)
	int                                                Cruel;                                                    // 0x0034(0x0004) (AlwaysInit)
	int                                                Ability;                                                  // 0x0038(0x0004) (AlwaysInit)
	int                                                Boldness;                                                 // 0x003C(0x0004) (AlwaysInit)
	int                                                Concentration;                                            // 0x0040(0x0004) (AlwaysInit)
	float                                              MaxFatigue;                                               // 0x0044(0x0004) (AlwaysInit)
	float                                              RestoreFatiguePerTime;                                    // 0x0048(0x0004) (AlwaysInit)
	int                                                GetExpPerConsumFatigue;                                   // 0x004C(0x0004) (AlwaysInit)
	int                                                RemainGradeUpChance;                                      // 0x0050(0x0004) (AlwaysInit)
	int                                                ResetGradeUpChanceItemUseCnt;                             // 0x0054(0x0004) (AlwaysInit)
	int                                                LookInfo_CID;                                             // 0x0058(0x0004) (AlwaysInit)
	int                                                RareSkill_CID;                                            // 0x005C(0x0004) (AlwaysInit)
	int                                                EpicSkill_CID;                                            // 0x0060(0x0004) (AlwaysInit)
	int                                                LegendarySkill_CID;                                       // 0x0064(0x0004) (AlwaysInit)
	struct FQWord                                      ExpireTime;                                               // 0x0068(0x0008) (AlwaysInit)
	int                                                IsPermanent;                                              // 0x0070(0x0004) (AlwaysInit)
	struct FQWord                                      LastUpdateTime;                                           // 0x0074(0x0008) (AlwaysInit)
	int                                                IsLock;                                                   // 0x007C(0x0004) (AlwaysInit)
	float                                              GradeUpMileage;                                           // 0x0080(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PartyData
// 0x0028
struct FPartyData
{
	int                                                partyId;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                partyType;                                                // 0x0004(0x0004) (AlwaysInit)
	TArray<struct FPartyMemberPCData>                  memberDataList;                                           // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                leaderSid;                                                // 0x0018(0x0004) (AlwaysInit)
	int                                                distributeMethod;                                         // 0x001C(0x0004) (AlwaysInit)
	int                                                distributorId;                                            // 0x0020(0x0004) (AlwaysInit)
	int                                                DiceItemGrade;                                            // 0x0024(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PartyMatchingMemberInfoData
// 0x0024
struct FPartyMatchingMemberInfoData
{
	struct FPartyMatchingPositionInfoData              PositionInfoData;                                         // 0x0000(0x0008) (AlwaysInit)
	int                                                ClassType;                                                // 0x0008(0x0004) (AlwaysInit)
	int                                                Level;                                                    // 0x000C(0x0004) (AlwaysInit)
	int                                                IsRandomDungeonPlayer;                                    // 0x0010(0x0004) (AlwaysInit)
	struct FString                                     PlayerName;                                               // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.RoWarNPCData
// 0x0014
struct FRoWarNPCData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0008(0x000C) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillInvokeCombatFlairData
// 0x000C
struct FSkillInvokeCombatFlairData
{
	int                                                elementType;                                              // 0x0000(0x0004) (AlwaysInit)
	int                                                CompareOperatorType;                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                COUNT;                                                    // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.PawnParam
// 0x0108
struct FPawnParam
{
	struct FPawnParamData                              PawnParamData;                                            // 0x0000(0x0048) (AlwaysInit, NeedCtorLink)
	struct FPawnParam1st                               PawnParam1st;                                             // 0x0048(0x0020) (AlwaysInit)
	struct FPawnParam2nd                               PawnParam2nd;                                             // 0x0068(0x004C) (AlwaysInit)
	struct FPawnParam3rd                               PawnParam3rd;                                             // 0x00B4(0x0054) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.DoorData
// 0x002C
struct FDoorData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Cid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                DoorType;                                                 // 0x0008(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x000C(0x000C) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                State;                                                    // 0x0028(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.IgnorePlayerData
// 0x001C
struct FIgnorePlayerData
{
	struct FQWord                                      IgnorePlayerUniqueID;                                     // 0x0000(0x0008) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ClassType;                                                // 0x0018(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ExtendAttackChanceInfo
// 0x0010
struct FExtendAttackChanceInfo
{
	int                                                AttackerSid;                                              // 0x0000(0x0004) (AlwaysInit)
	int                                                TargetSId;                                                // 0x0004(0x0004) (AlwaysInit)
	int                                                ExtendAttackChance;                                       // 0x0008(0x0004) (AlwaysInit)
	int                                                Amount;                                                   // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ContentTokenExchangeData
// 0x0010
struct FContentTokenExchangeData
{
	int                                                ContentTokenType;                                         // 0x0000(0x0004) (AlwaysInit)
	int                                                ExchangeContentTokenType;                                 // 0x0004(0x0004) (AlwaysInit)
	struct FDouble                                     ExchangeRatio;                                            // 0x0008(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ROAttendInfoData
// 0x0034
struct FROAttendInfoData
{
	int                                                RealmType;                                                // 0x0000(0x0004) (AlwaysInit)
	struct FQWord                                      reservationStartTime;                                     // 0x0004(0x0008) (AlwaysInit)
	struct FQWord                                      reservationEndTime;                                       // 0x000C(0x0008) (AlwaysInit)
	struct FQWord                                      ROStartTime;                                              // 0x0014(0x0008) (AlwaysInit)
	struct FQWord                                      ROEndTime;                                                // 0x001C(0x0008) (AlwaysInit)
	struct FString                                     currentROGuildName;                                       // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarLogData
// 0x0008
struct FSpecialWarLogData
{
	int                                                specialWarLogCid;                                         // 0x0000(0x0004) (AlwaysInit)
	int                                                Value;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarMedalData
// 0x000C
struct FSpecialWarMedalData
{
	int                                                specialWarMedalCid;                                       // 0x0000(0x0004) (AlwaysInit)
	struct FQWord                                      acquireTick;                                              // 0x0004(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarPlayerWarLogData
// 0x0020
struct FSpecialWarPlayerWarLogData
{
	TArray<struct FSpecialWarLogData>                  warLogList;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FSpecialWarMedalData>                medalList;                                                // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.ItemCoolTimeData
// 0x000C
struct FItemCoolTimeData
{
	int                                                ItemCid;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                RemainTimeInMilliseconds;                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                TotalTimeInMilliseconds;                                  // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillCostParamData
// 0x0008
struct FSkillCostParamData
{
	int                                                CostParamType;                                            // 0x0000(0x0004) (AlwaysInit)
	float                                              CostValue;                                                // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.AnimaHatchMPFResult
// 0x000C
struct FAnimaHatchMPFResult
{
	int                                                MPFCId;                                                   // 0x0000(0x0004) (AlwaysInit)
	int                                                MPFType;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                MPFGrade;                                                 // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.Teleport
// 0x0028
struct UABLSDLTypes_FTeleport
{
	int                                                WorldType;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                WorldMapCId;                                              // 0x0004(0x0004) (AlwaysInit)
	int                                                WorldMapWrapperCId;                                       // 0x0008(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x000C(0x000C) (AlwaysInit)
	struct FRotator                                    Rotation;                                                 // 0x0018(0x000C) (AlwaysInit)
	int                                                TeleportType;                                             // 0x0024(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarPlayerScoreData
// 0x0044
struct FSpecialWarPlayerScoreData
{
	int                                                Realm;                                                    // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     PlayerName;                                               // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     GuildName;                                                // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ClassType;                                                // 0x0024(0x0004) (AlwaysInit)
	int                                                killCount;                                                // 0x0028(0x0004) (AlwaysInit)
	int                                                Score;                                                    // 0x002C(0x0004) (AlwaysInit)
	TArray<struct FSpecialWarMedalData>                medalList;                                                // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                AssistCount;                                              // 0x0040(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarInfoData
// 0x0034
struct FSpecialWarInfoData
{
	int                                                specialWarCId;                                            // 0x0000(0x0004) (AlwaysInit)
	int                                                VictoryRealm;                                             // 0x0004(0x0004) (AlwaysInit)
	TArray<struct FSpecialWarRealmScoreData>           realmScoreList;                                           // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FSpecialWarPlayerScoreData>          playerScoreList;                                          // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                currentUserCount;                                         // 0x0028(0x0004) (AlwaysInit)
	int                                                maxUserCount;                                             // 0x002C(0x0004) (AlwaysInit)
	int                                                waitingLineNumber;                                        // 0x0030(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarRewardCPData
// 0x0018
struct FSpecialWarRewardCPData
{
	struct FString                                     PlayerName;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FQWord                                      RewardCP;                                                 // 0x0010(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ROResultData
// 0x0018
struct FROResultData
{
	int                                                RealmType;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                isAttackerWin;                                            // 0x0004(0x0004) (AlwaysInit)
	struct FString                                     WinGuildName;                                             // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.SurroundingWorldEnvironmentData
// 0x0030
struct FSurroundingWorldEnvironmentData
{
	TArray<int>                                        NPCCidList;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        PropCidList;                                              // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        TrapCidList;                                              // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.NearNPCInfo
// 0x001C
struct FNearNPCInfo
{
	int                                                canTalk;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                IsVisible;                                                // 0x0004(0x0004) (AlwaysInit)
	int                                                isVisibleAudibleRange;                                    // 0x0008(0x0004) (AlwaysInit)
	TArray<struct FNPCQuestInfo>                       QuestInfo;                                                // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.AreaShapeData
// 0x0020
struct FAreaShapeData
{
	int                                                AreaShapeType;                                            // 0x0000(0x0004) (AlwaysInit)
	float                                              Param1;                                                   // 0x0004(0x0004) (AlwaysInit)
	float                                              Param2;                                                   // 0x0008(0x0004) (AlwaysInit)
	float                                              Param3;                                                   // 0x000C(0x0004) (AlwaysInit)
	float                                              Param4;                                                   // 0x0010(0x0004) (AlwaysInit)
	float                                              Param5;                                                   // 0x0014(0x0004) (AlwaysInit)
	float                                              Param6;                                                   // 0x0018(0x0004) (AlwaysInit)
	float                                              Param7;                                                   // 0x001C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ColorData
// 0x000C
struct FColorData
{
	int                                                ColorR;                                                   // 0x0000(0x0004) (AlwaysInit)
	int                                                ColorG;                                                   // 0x0004(0x0004) (AlwaysInit)
	int                                                ColorB;                                                   // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.MountParamData
// 0x0008
struct FMountParamData
{
	int                                                Type;                                                     // 0x0000(0x0004) (AlwaysInit)
	float                                              Value;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.BLAnimInfo.PCAnimationInfo
// 0x0014
struct FPCAnimationInfo
{
	TEnumAsByte<EAnimMainGroup>                        MainGroup;                                                // 0x0000(0x0001)
	TEnumAsByte<ESubAnimGroup>                         SubGroup;                                                 // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	struct FString                                     AnimSeqName;                                              // 0x0004(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.BLAnimInfo.WeaponAnimSeqNamePair
// 0x0020
struct FWeaponAnimSeqNamePair
{
	struct FString                                     DefaultAnimSeqName;                                       // 0x0000(0x0010) (NeedCtorLink)
	struct FString                                     WeaponAnimSeqName;                                        // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.BLAnimInfo.NPCRequiredAnimSeqNames
// 0x0010
struct FNPCRequiredAnimSeqNames
{
	TArray<struct FString>                             AnimSequenceList;                                         // 0x0000(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AcceptableGuideInfoData
// 0x0030 (0x0064 - 0x0034)
struct FAcceptableGuideInfoData : public FContentInfoData
{
	TArray<TEnumAsByte<ECERaceType>>                   RaceTypeList;                                             // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEClassType>>                  ClassTypeList;                                            // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        GuideStageList;                                           // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AcquireFellowByItemInfoData
// 0x000C (0x0040 - 0x0034)
struct FAcquireFellowByItemInfoData : public FContentInfoData
{
	int                                                Duration_Day;                                             // 0x0034(0x0004)
	int                                                Duration_Hour;                                            // 0x0038(0x0004)
	int                                                Duration_Minute;                                          // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AcquireFellowByTamingInfoData
// 0x0010 (0x0044 - 0x0034)
struct FAcquireFellowByTamingInfoData : public FContentInfoData
{
	TArray<int>                                        SkillGroupCidList;                                        // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AcquireMountByItemInfoData
// 0x000C (0x0040 - 0x0034)
struct FAcquireMountByItemInfoData : public FContentInfoData
{
	int                                                Duration_Day;                                             // 0x0034(0x0004)
	int                                                Duration_Hour;                                            // 0x0038(0x0004)
	int                                                Duration_Minute;                                          // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AcquireMountByTamingInfoData
// 0x0030 (0x0064 - 0x0034)
struct FAcquireMountByTamingInfoData : public FContentInfoData
{
	TArray<int>                                        ActiveSkillGroup_ww;                                      // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        ActiveSkillGroup_c;                                       // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        PassiveSkillGroup;                                        // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AcquirePetByItemInfoData
// 0x000C (0x0040 - 0x0034)
struct FAcquirePetByItemInfoData : public FContentInfoData
{
	int                                                Duration_Day;                                             // 0x0034(0x0004)
	int                                                Duration_Hour;                                            // 0x0038(0x0004)
	int                                                Duration_Minute;                                          // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.AuraInfoData
// 0x0000 (0x0034 - 0x0034)
struct FAuraInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BattlefieldApplicationUIInfoData
// 0x002C (0x0060 - 0x0034)
struct FBattlefieldApplicationUIInfoData : public FContentInfoData
{
	unsigned char                                      ApplyBuild;                                               // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                TabIndex;                                                 // 0x0038(0x0004)
	int                                                ListIndex;                                                // 0x003C(0x0004)
	struct FString                                     BattlefieldImage;                                         // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     BattlefieldDescription;                                   // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BattleFieldConstantInfoData
// 0x0004 (0x0038 - 0x0034)
struct FBattleFieldConstantInfoData : public FContentInfoData
{
	int                                                ActiveCode;                                               // 0x0034(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BurdenInfoData
// 0x0004 (0x0038 - 0x0034)
struct FBurdenInfoData : public FContentInfoData
{
	int                                                CarryAnimTypeCid;                                         // 0x0034(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CarryAnimInfoData
// 0x0030 (0x0064 - 0x0034)
struct FCarryAnimInfoData : public FContentInfoData
{
	struct FString                                     PickUpSeqName;                                            // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CarryIdleSeqName;                                         // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     PutdownSeqName;                                           // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ChallengeTowerRankRewardInfoData
// 0x0004 (0x0038 - 0x0034)
struct FChallengeTowerRankRewardInfoData : public FContentInfoData
{
	int                                                RankSystemMailReward;                                     // 0x0034(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ChallengeTowerRefundInfoData
// 0x0004 (0x0038 - 0x0034)
struct FChallengeTowerRefundInfoData : public FContentInfoData
{
	int                                                Refund;                                                   // 0x0034(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ChallengeTowerRoundInfoData
// 0x003C (0x0070 - 0x0034)
struct FChallengeTowerRoundInfoData : public FContentInfoData
{
	unsigned char                                      IsBossRound;                                              // 0x0034(0x0001)
	unsigned char                                      IsRefundRound;                                            // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                WaitTimer;                                                // 0x0038(0x0004)
	TArray<int>                                        RemainWaitTimeSystemMessage;                              // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                RoundTimer;                                               // 0x004C(0x0004)
	int                                                MaxMonsterCount;                                          // 0x0050(0x0004)
	int                                                CompleteRoundReward;                                      // 0x0054(0x0004)
	int                                                TimeRoundReward;                                          // 0x0058(0x0004)
	int                                                CompleteContentReward;                                    // 0x005C(0x0004)
	TArray<int>                                        RankContentReward;                                        // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ChatChannelCommandInfoData
// 0x0028 (0x005C - 0x0034)
struct FChatChannelCommandInfoData : public FContentInfoData
{
	unsigned char                                      Enable;                                                   // 0x0034(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<struct FString>                             AliasCommand;                                             // 0x0038(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     ProcessCommand;                                           // 0x0048(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	int                                                ArgumentCount;                                            // 0x0058(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ChattingCommandInfoData
// 0x0028 (0x005C - 0x0034)
struct FChattingCommandInfoData : public FContentInfoData
{
	unsigned char                                      Enable;                                                   // 0x0034(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<struct FString>                             AliasCommand;                                             // 0x0038(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     ProcessCommand;                                           // 0x0048(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	int                                                ArgumentCount;                                            // 0x0058(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CinematicInfoData
// 0x006C (0x00A0 - 0x0034)
struct FCinematicInfoData : public FContentInfoData
{
	unsigned char                                      Hide;                                                     // 0x0034(0x0001)
	unsigned char                                      CanSkip;                                                  // 0x0035(0x0001)
	unsigned char                                      bOpeningPlay;                                             // 0x0036(0x0001)
	TEnumAsByte<ECERaceType>                           Race;                                                     // 0x0037(0x0001)
	unsigned char                                      bTutorialCinema;                                          // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                Time;                                                     // 0x003C(0x0004)
	struct FString                                     CinematicName;                                            // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CinematicNameRUS;                                         // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CinematicNameJPN;                                         // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CinematicNameCHN;                                         // 0x0070(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CinematicNameENG;                                         // 0x0080(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CinematicNameSTEAM;                                       // 0x0090(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CitadelConstBidInfoData
// 0x000C (0x0040 - 0x0034)
struct FCitadelConstBidInfoData : public FContentInfoData
{
	int                                                ActiveCode;                                               // 0x0034(0x0004)
	float                                              Auction_fee;                                              // 0x0038(0x0004)
	float                                              Next_bid_min;                                             // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CitadelInfoData
// 0x001C (0x0050 - 0x0034)
struct FCitadelInfoData : public FContentInfoData
{
	TEnumAsByte<ECERealmType>                          Realm_Code;                                               // 0x0034(0x0001) (Transient)
	unsigned char                                      ApplyBuild;                                               // 0x0035(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                Fix_Reward;                                               // 0x0038(0x0004) (Transient)
	int                                                Citadel_Location_ID;                                      // 0x003C(0x0004) (Transient)
	TArray<int>                                        RegionList;                                               // 0x0040(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CollectionBookConstInfoData
// 0x0020 (0x0054 - 0x0034)
struct FCollectionBookConstInfoData : public FContentInfoData
{
	int                                                CollectionBookActiveCode;                                 // 0x0034(0x0004)
	int                                                ExpUpActiveCode;                                          // 0x0038(0x0004)
	int                                                GradeUpActiveCode;                                        // 0x003C(0x0004)
	int                                                SkillChangeActiveCode;                                    // 0x0040(0x0004)
	int                                                FatigueRecoveryActiveCode;                                // 0x0044(0x0004)
	int                                                GradeUpAddActiveCode;                                     // 0x0048(0x0004)
	int                                                MonsterBallActiveCode;                                    // 0x004C(0x0004)
	int                                                AnimaActiveCode;                                          // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MPFGradeUpChanceInfo
// 0x000C
struct FMPFGradeUpChanceInfo
{
	float                                              RareChance;                                               // 0x0000(0x0004)
	float                                              EpicChance;                                               // 0x0004(0x0004)
	float                                              LegendaryChance;                                          // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CollectionBookInfoData
// 0x0064 (0x0098 - 0x0034)
struct FCollectionBookInfoData : public FContentInfoData
{
	TEnumAsByte<ECECompanionType>                      MPFType;                                                  // 0x0034(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<int>                                        MountList;                                                // 0x0038(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<int>                                        PetList;                                                  // 0x0048(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<int>                                        FellowList;                                               // 0x0058(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FMPFGradeUpChanceInfo                       GradeChance;                                              // 0x0068(0x000C) (Transient)
	struct FMPFGradeUpChanceInfo                       GradeChanceBySame;                                        // 0x0074(0x000C) (Transient)
	struct FMPFGradeUpChanceInfo                       GradeChanceMileage;                                       // 0x0080(0x000C) (Transient)
	struct FMPFGradeUpChanceInfo                       GradeChanceMileageBySame;                                 // 0x008C(0x000C) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DayPlayTimeInfo
// 0x0008
struct FDayPlayTimeInfo
{
	int                                                StartTime;                                                // 0x0000(0x0004) (AlwaysInit)
	int                                                DuringTime;                                               // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ColosseumWarInfoData
// 0x0030 (0x0064 - 0x0034)
struct FColosseumWarInfoData : public FContentInfoData
{
	int                                                WorldMapCId;                                              // 0x0034(0x0004) (Transient)
	int                                                MinLevel;                                                 // 0x0038(0x0004) (Transient)
	int                                                JoinWaitingTime;                                          // 0x003C(0x0004) (Transient)
	int                                                StartWaitingTime;                                         // 0x0040(0x0004) (Transient)
	int                                                CombatLimitTime;                                          // 0x0044(0x0004) (Transient)
	int                                                ClearWaitingTime;                                         // 0x0048(0x0004) (Transient)
	int                                                ComsumeActingPoint;                                       // 0x004C(0x0004) (Transient)
	int                                                ActiveCodeName;                                           // 0x0050(0x0004) (Transient)
	TArray<struct FDayPlayTimeInfo>                    DayPlayTime;                                              // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ContentActiveControlInfoData
// 0x0008 (0x003C - 0x0034)
struct FContentActiveControlInfoData : public FContentInfoData
{
	int                                                ContentLevel;                                             // 0x0034(0x0004)
	int                                                ActiveLevel;                                              // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RequireItem
// 0x0008
struct FRequireItem
{
	int                                                Cid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                COUNT;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RequireToken
// 0x0008
struct FRequireToken
{
	TEnumAsByte<ECEContentTokenType>                   Type;                                                     // 0x0000(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Cost;                                                     // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftInfoBaseData
// 0x0054 (0x0088 - 0x0034)
struct FCraftInfoBaseData : public FContentInfoData
{
	TEnumAsByte<ECECraftCategory1Type>                 Category1;                                                // 0x0034(0x0001)
	TEnumAsByte<ECECraftCategory2Type>                 Category2;                                                // 0x0035(0x0001)
	TEnumAsByte<ECECraftCategory3Type>                 Category3;                                                // 0x0036(0x0001)
	unsigned char                                      ApplyBuild;                                               // 0x0037(0x0001)
	unsigned char                                      IsNPCCraft;                                               // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	int                                                ProductItemCID;                                           // 0x003C(0x0004)
	float                                              CastingTime;                                              // 0x0040(0x0004)
	TArray<struct FRequireItem>                        RequireItemList;                                          // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FRequireToken>                       RequireTokenList;                                         // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        RequireTierBarrierList;                                   // 0x0064(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Exp;                                                      // 0x0074(0x0004)
	int                                                RequireActingPoint;                                       // 0x0078(0x0004)
	int                                                RequireLevel;                                             // 0x007C(0x0004)
	struct FQWord                                      CostGold;                                                 // 0x0080(0x0008)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftChoiceUIInfoData
// 0x0034 (0x0068 - 0x0034)
struct FCraftChoiceUIInfoData : public FContentInfoData
{
	TEnumAsByte<ECEV2CraftCategoryType>                CraftCategory;                                            // 0x0034(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	struct FString                                     Title1;                                                   // 0x0038(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     Title2;                                                   // 0x0048(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	int                                                IconIndex1;                                               // 0x0058(0x0004) (Transient)
	int                                                IconIndex2;                                               // 0x005C(0x0004) (Transient)
	int                                                MaterialCid1;                                             // 0x0060(0x0004) (Transient)
	int                                                MaterialCid2;                                             // 0x0064(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftConstantInfoData
// 0x0030 (0x0064 - 0x0034)
struct FCraftConstantInfoData : public FContentInfoData
{
	int                                                CraftMaxLevel;                                            // 0x0034(0x0004)
	int                                                CraftUseMaxLevel;                                         // 0x0038(0x0004)
	int                                                MainCraftLearn_MinLv;                                     // 0x003C(0x0004)
	int                                                SubCraftLearn_MinLv;                                      // 0x0040(0x0004)
	int                                                SmithMaxLv;                                               // 0x0044(0x0004)
	int                                                HandiworkMaxLv;                                           // 0x0048(0x0004)
	int                                                SmeltMaxLv;                                               // 0x004C(0x0004)
	int                                                CookMaxLv;                                                // 0x0050(0x0004)
	int                                                AlchemyMaxLv;                                             // 0x0054(0x0004)
	int                                                MaxFavoriteCount;                                         // 0x0058(0x0004)
	int                                                MainActiveCodeName;                                       // 0x005C(0x0004)
	int                                                SubActiveCodeName;                                        // 0x0060(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V1CraftLevelInfoData
// 0x0008 (0x003C - 0x0034)
struct FV1CraftLevelInfoData : public FContentInfoData
{
	int                                                IconIndex;                                                // 0x0034(0x0004)
	int                                                NeedCraftExp;                                             // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftUICategoryInfoData
// 0x0001 (0x0035 - 0x0034)
struct FCraftUICategoryInfoData : public FContentInfoData
{
	TEnumAsByte<ECEV2CraftCategoryType>                CraftCategory;                                            // 0x0034(0x0001) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CreditInfoData
// 0x0014 (0x0048 - 0x0034)
struct FCreditInfoData : public FContentInfoData
{
	TEnumAsByte<ECECreditStringType>                   CreditStringType;                                         // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	struct FString                                     Description;                                              // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingColorInfoData
// 0x000C (0x0040 - 0x0034)
struct FCustomizingColorInfoData : public FContentInfoData
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0034(0x0001)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0035(0x0001)
	TEnumAsByte<ECEAppearanceType>                     AppearanceType;                                           // 0x0036(0x0001)
	TEnumAsByte<ECECustomizeType>                      CustomizeType;                                            // 0x0037(0x0001)
	int                                                IconIndex;                                                // 0x0038(0x0004)
	struct FColor                                      CustomizingColor;                                         // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingColorLimitInfoData
// 0x0008 (0x003C - 0x0034)
struct FCustomizingColorLimitInfoData : public FContentInfoData
{
	TEnumAsByte<ECECustomizeType>                      CustomizeType;                                            // 0x0034(0x0001)
	unsigned char                                      ColorPaletteDisable;                                      // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	float                                              UpperLimit;                                               // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingInfoData
// 0x0028 (0x005C - 0x0034)
struct FCustomizingInfoData : public FContentInfoData
{
	TEnumAsByte<ECECustomizeType>                      CustomizeType;                                            // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                ParamCid;                                                 // 0x0038(0x0004)
	TArray<TEnumAsByte<ECECustomizeType>>              RelatedPresetUIList;                                      // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECECustomizeType>>              PresetSettingUIList;                                      // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingPresetInfoData
// 0x0008 (0x003C - 0x0034)
struct FCustomizingPresetInfoData : public FContentInfoData
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0034(0x0001)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0035(0x0001)
	TEnumAsByte<ECEAppearanceType>                     AppearanceType;                                           // 0x0036(0x0001)
	TEnumAsByte<ECECustomizeType>                      CustomizeType;                                            // 0x0037(0x0001)
	int                                                IconIndex;                                                // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingRelatedPresetUIInfoData
// 0x0014 (0x0048 - 0x0034)
struct FCustomizingRelatedPresetUIInfoData : public FContentInfoData
{
	TEnumAsByte<ECECustomizeType>                      CustomizeType;                                            // 0x0034(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<ECECustomizeType>>              ReleatedCustomizeTypeList;                                // 0x0038(0x0010) (Const, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingResourceInfoData
// 0x0008 (0x003C - 0x0034)
struct FCustomizingResourceInfoData : public FContentInfoData
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0034(0x0001)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0035(0x0001)
	TEnumAsByte<ECEAppearanceType>                     AppearanceType;                                           // 0x0036(0x0001)
	TEnumAsByte<ECECustomizeType>                      CustomizeType;                                            // 0x0037(0x0001)
	int                                                IconIndex;                                                // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DefaultControlInfoData
// 0x0020 (0x0054 - 0x0034)
struct FDefaultControlInfoData : public FContentInfoData
{
	struct FString                                     ControlCodeName;                                          // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ServiceCode;                                              // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DefaultControlValueData
// 0x0007 (0x003B - 0x0034)
struct FDefaultControlValueData : public FContentInfoData
{
	int                                                ControlCodeName;                                          // 0x0034(0x0004) (AlwaysInit)
	TEnumAsByte<ECEClassType>                          Class;                                                    // 0x0038(0x0001) (AlwaysInit)
	TEnumAsByte<ECETargetingControlType>               TargetingControlType;                                     // 0x0039(0x0001) (AlwaysInit)
	TEnumAsByte<ECETargetingMoveType>                  TargetingMoveType;                                        // 0x003A(0x0001) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DestinationInfoData
// 0x0000 (0x0034 - 0x0034)
struct FDestinationInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.UpgradeMaterialInfo
// 0x0010
struct FUpgradeMaterialInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                COUNT;                                                    // 0x0004(0x0004)
	float                                              SuccessRate;                                              // 0x0008(0x0004)
	float                                              GreatSuccessRate;                                         // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.EquipUpgradeMaterialInfo
// 0x0050
struct FEquipUpgradeMaterialInfo
{
	int                                                Level;                                                    // 0x0000(0x0004)
	int                                                NeedGold;                                                 // 0x0004(0x0004)
	float                                              IncItemLv;                                                // 0x0008(0x0004)
	int                                                IncGearScore;                                             // 0x000C(0x0004)
	struct FUpgradeMaterialInfo                        MainMaterial;                                             // 0x0010(0x0010)
	struct FUpgradeMaterialInfo                        SuccessRateMaterial;                                      // 0x0020(0x0010)
	struct FUpgradeMaterialInfo                        DurabilityProtectMaterial;                                // 0x0030(0x0010)
	struct FUpgradeMaterialInfo                        EquipLevelProtectMaterialInfo;                            // 0x0040(0x0010)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.EquipmentLvUpgradeInfoData
// 0x0014 (0x0048 - 0x0034)
struct FEquipmentLvUpgradeInfoData : public FContentInfoData
{
	TArray<struct FEquipUpgradeMaterialInfo>           EquipUpgradeMaterialList;                                 // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                EvolutionGearScore;                                       // 0x0044(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.EquipSlotInfoData
// 0x0004 (0x0038 - 0x0034)
struct FEquipSlotInfoData : public FContentInfoData
{
	TEnumAsByte<ECEEquipSlotType>                      EquipSlotType;                                            // 0x0034(0x0001)
	unsigned char                                      EquipSlotControlToggle;                                   // 0x0035(0x0001)
	TEnumAsByte<ECEEquipSlotType>                      CostumeSlotType;                                          // 0x0036(0x0001)
	unsigned char                                      CostumeSlotControlToggle;                                 // 0x0037(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FactionInfoData
// 0x0001 (0x0035 - 0x0034)
struct FFactionInfoData : public FContentInfoData
{
	TEnumAsByte<ECERealmType>                          RealmType;                                                // 0x0034(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowExpInfoData
// 0x0008 (0x003C - 0x0034)
struct FFellowExpInfoData : public FContentInfoData
{
	int                                                Level;                                                    // 0x0034(0x0004)
	int                                                MaxExp;                                                   // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowGrowthValueInfoData
// 0x000C (0x0040 - 0x0034)
struct FFellowGrowthValueInfoData : public FContentInfoData
{
	float                                              FellowMaxFatigue;                                         // 0x0034(0x0004)
	int                                                FellowRestoreFatiguePerTime;                              // 0x0038(0x0004)
	int                                                RequireExp;                                               // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ConquerorInfo
// 0x0008
struct FConquerorInfo
{
	TEnumAsByte<ECEConquerorType>                      Type;                                                     // 0x0000(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Value;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowInfoData
// 0x002C (0x0060 - 0x0034)
struct FFellowInfoData : public FContentInfoData
{
	TEnumAsByte<ECEFellowRaceType>                     FellowRace;                                               // 0x0034(0x0001)
	unsigned char                                      FosterAvailable;                                          // 0x0035(0x0001)
	unsigned char                                      FosterIngredientAvailable;                                // 0x0036(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	int                                                IconIndex;                                                // 0x0038(0x0004)
	int                                                NpcCid;                                                   // 0x003C(0x0004)
	int                                                AcquireFellowByTamingCid;                                 // 0x0040(0x0004)
	int                                                AcquireFellowByItemCid;                                   // 0x0044(0x0004)
	int                                                UsableRank;                                               // 0x0048(0x0004)
	int                                                UsableLimitRank;                                          // 0x004C(0x0004)
	TArray<struct FConquerorInfo>                      UsableConquerors;                                         // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CompanionIngredientExpInfoData
// 0x0018
struct FCompanionIngredientExpInfoData
{
	int                                                Level;                                                    // 0x0000(0x0004)
	int                                                IngredientCommon;                                         // 0x0004(0x0004)
	int                                                IngredientUncommon;                                       // 0x0008(0x0004)
	int                                                IngredientRare;                                           // 0x000C(0x0004)
	int                                                IngredientEpic;                                           // 0x0010(0x0004)
	int                                                IngredientLegendary;                                      // 0x0014(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowIngredientExpInfoData
// 0x0018 (0x004C - 0x0034)
struct FFellowIngredientExpInfoData : public FContentInfoData
{
	struct FCompanionIngredientExpInfoData             Info;                                                     // 0x0034(0x0018) (Const)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowLookInfoData
// 0x0008 (0x003C - 0x0034)
struct FFellowLookInfoData : public FContentInfoData
{
	int                                                IconIndex;                                                // 0x0034(0x0004)
	int                                                NPC_Cid;                                                  // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowSkillGroupInfoData
// 0x0000 (0x0034 - 0x0034)
struct FFellowSkillGroupInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowSkillInfoData
// 0x001C (0x0050 - 0x0034)
struct FFellowSkillInfoData : public FContentInfoData
{
	int                                                IconIndex;                                                // 0x0034(0x0004)
	struct FString                                     TooltipTemplate;                                          // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SkillGroupCid;                                            // 0x0048(0x0004)
	int                                                SkillLv;                                                  // 0x004C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowSkillPoolData
// 0x0008
struct FFellowSkillPoolData
{
	int                                                Skill_Id;                                                 // 0x0000(0x0004)
	int                                                Skill_Weight;                                             // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowSkillPoolInfoData
// 0x0010 (0x0044 - 0x0034)
struct FFellowSkillPoolInfoData : public FContentInfoData
{
	TArray<struct FFellowSkillPoolData>                FellowSkillPoolList;                                      // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FieldInfoData
// 0x0004 (0x0038 - 0x0034)
struct FFieldInfoData : public FContentInfoData
{
	int                                                WorldMapCId;                                              // 0x0034(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FlashShopInfoData
// 0x0024 (0x0058 - 0x0034)
struct FFlashShopInfoData : public FContentInfoData
{
	struct FString                                     CategoryName;                                             // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ActivateDuration;                                         // 0x0044(0x0004)
	TArray<int>                                        ProductList;                                              // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FobbidenKeyInfoData
// 0x0002 (0x0036 - 0x0034)
struct FFobbidenKeyInfoData : public FContentInfoData
{
	unsigned char                                      Usable_on_classic_targeting;                              // 0x0034(0x0001)
	unsigned char                                      Usable_on_aim_targeting;                                  // 0x0035(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GameStringCharacterInfoData
// 0x0010 (0x0044 - 0x0034)
struct FGameStringCharacterInfoData : public FContentInfoData
{
	struct FString                                     Character;                                                // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GameStringInfoData
// 0x0020 (0x0054 - 0x0034)
struct FGameStringInfoData : public FContentInfoData
{
	struct FString                                     GameString;                                               // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             ParamTypeList;                                            // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GatherLevelInfoData
// 0x0008 (0x003C - 0x0034)
struct FGatherLevelInfoData : public FContentInfoData
{
	int                                                IconIndex;                                                // 0x0034(0x0004)
	int                                                NeedGatherEXP;                                            // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuideStageInfoData
// 0x0014 (0x0048 - 0x0034)
struct FGuideStageInfoData : public FContentInfoData
{
	int                                                Priority;                                                 // 0x0034(0x0004)
	TArray<int>                                        GuideQuestList;                                           // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuildGradeInfoData
// 0x0024 (0x0058 - 0x0034)
struct FGuildGradeInfoData : public FContentInfoData
{
	TEnumAsByte<ECEGuildGradeType>                     GradeType;                                                // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	struct FString                                     LocalName;                                                // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEGuildAuthorityType>>         Authority;                                                // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuildHistoryInfoData
// 0x0030 (0x0064 - 0x0034)
struct FGuildHistoryInfoData : public FContentInfoData
{
	struct FString                                     HistoryType;                                              // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CategoryName;                                             // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             ParamTypeList;                                            // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuildLevelInfoData
// 0x0008 (0x003C - 0x0034)
struct FGuildLevelInfoData : public FContentInfoData
{
	int                                                LevelUpRequireExp;                                        // 0x0034(0x0004)
	int                                                MaxMemberCount;                                           // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuildMarkBackgroundInfoData
// 0x0008 (0x003C - 0x0034)
struct FGuildMarkBackgroundInfoData : public FContentInfoData
{
	TEnumAsByte<ECEGuildMarkRealmType>                 RealmType;                                                // 0x0034(0x0001)
	unsigned char                                      bDefaultMark;                                             // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                IconIndex;                                                // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuildMarkSymbolInfoData
// 0x0014 (0x0048 - 0x0034)
struct FGuildMarkSymbolInfoData : public FContentInfoData
{
	TEnumAsByte<ECEGuildMarkRealmType>                 RealmType;                                                // 0x0034(0x0001)
	unsigned char                                      bDefaultMark;                                             // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	TArray<int>                                        ColorIconIndex;                                           // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuildWarSeasonInfoData
// 0x0020 (0x0054 - 0x0034)
struct FGuildWarSeasonInfoData : public FContentInfoData
{
	struct FString                                     WarStartDate;                                             // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     WarEndDate;                                               // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.HelpContentInfoData
// 0x0020 (0x0054 - 0x0034)
struct FHelpContentInfoData : public FContentInfoData
{
	struct FString                                     ContactWebInClientFileName;                               // 0x0034(0x0010) (Const, AlwaysInit, NeedCtorLink)
	struct FString                                     ToolTip;                                                  // 0x0044(0x0010) (Const, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.InstantDungeonConstInfoData
// 0x001D (0x0051 - 0x0034)
struct FInstantDungeonConstInfoData : public FContentInfoData
{
	int                                                RandomDungeonEntranceLevel;                               // 0x0034(0x0004)
	int                                                RandomDungeonEntranceGearScore;                           // 0x0038(0x0004)
	int                                                RandomDungeonResetTime;                                   // 0x003C(0x0004)
	int                                                RandomDungeonUsableCount;                                 // 0x0040(0x0004)
	int                                                RandomDungeonRewardMailCid;                               // 0x0044(0x0004)
	int                                                CMActiveCode;                                             // 0x0048(0x0004)
	int                                                RMActiveCode;                                             // 0x004C(0x0004)
	unsigned char                                      RandomDungeonApplyBuild;                                  // 0x0050(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.InstantFieldInfoData
// 0x0014 (0x0048 - 0x0034)
struct FInstantFieldInfoData : public FContentInfoData
{
	TEnumAsByte<ETransitionFX_Type>                    TransitionFXType_In;                                      // 0x0034(0x0001)
	TEnumAsByte<ETransitionFX_Type>                    TransitionFXType_Out;                                     // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                WorldMapCId;                                              // 0x0038(0x0004)
	int                                                StageCount;                                               // 0x003C(0x0004)
	int                                                VolumeTerritoryEnum;                                      // 0x0040(0x0004)
	int                                                TimeOfDay;                                                // 0x0044(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.InventoryExpansionInfoData
// 0x0014 (0x0048 - 0x0034)
struct FInventoryExpansionInfoData : public FContentInfoData
{
	unsigned char                                      bPackageOpen;                                             // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                SlotCount;                                                // 0x0038(0x0004)
	int                                                Lumena_Permanent;                                         // 0x003C(0x0004)
	int                                                Lumena_Week;                                              // 0x0040(0x0004)
	int                                                Lumena_Month;                                             // 0x0044(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ItemActiveConstInfoData
// 0x0024 (0x0058 - 0x0034)
struct FItemActiveConstInfoData : public FContentInfoData
{
	int                                                WarehouseActiveCode;                                      // 0x0034(0x0004)
	int                                                RepairActiveCode;                                         // 0x0038(0x0004)
	int                                                RestoreEquipActiveCode;                                   // 0x003C(0x0004)
	int                                                EquipLvUpActiveCode;                                      // 0x0040(0x0004)
	int                                                EquipEvolutionActiveCode;                                 // 0x0044(0x0004)
	int                                                EquipSucceedActiveCode;                                   // 0x0048(0x0004)
	int                                                DesynthesisActiveCode;                                    // 0x004C(0x0004)
	int                                                RuneActiveCode;                                           // 0x0050(0x0004)
	int                                                LumenaSendActiveCode;                                     // 0x0054(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ItemCategoryInfoData
// 0x0005 (0x0039 - 0x0034)
struct FItemCategoryInfoData : public FContentInfoData
{
	TEnumAsByte<ECEItemEquipCategory>                  EquipCategory;                                            // 0x0034(0x0001)
	TEnumAsByte<ECEItemCategoryType>                   ItemCategory;                                             // 0x0035(0x0001)
	TEnumAsByte<ECEItemEquipSlotType>                  EquipSlotType;                                            // 0x0036(0x0001)
	TEnumAsByte<ECEItemWeightCategory>                 WeightCategory;                                           // 0x0037(0x0001)
	TEnumAsByte<ECEEquipLayerType>                     EquipLayer;                                               // 0x0038(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DropItemInfo
// 0x0008
struct FDropItemInfo
{
	TEnumAsByte<ECEClassType>                          ConditionClass;                                           // 0x0000(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                DropItem;                                                 // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ItemDropTableInfoData
// 0x0010 (0x0044 - 0x0034)
struct FItemDropTableInfoData : public FContentInfoData
{
	TArray<struct FDropItemInfo>                       DropTableInfoList;                                        // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ItemEquipTypeInfoData
// 0x0024 (0x0058 - 0x0034)
struct FItemEquipTypeInfoData : public FContentInfoData
{
	TEnumAsByte<ECEItemEquipSlotType>                  EquipType;                                                // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<ECEEquipSlotType>>              EquipSlot;                                                // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEEquipSlotType>>              MaskSlot;                                                 // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ItemLegendOptionPoolInfoData
// 0x0014 (0x0048 - 0x0034)
struct FItemLegendOptionPoolInfoData : public FContentInfoData
{
	int                                                OptionChangeLumena;                                       // 0x0034(0x0004)
	TArray<int>                                        LegendOptionCidList;                                      // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.LetterInfoData
// 0x0020 (0x0054 - 0x0034)
struct FLetterInfoData : public FContentInfoData
{
	struct FString                                     Letter;                                                   // 0x0034(0x0010) (Const, AlwaysInit, NeedCtorLink)
	struct FString                                     ImageSource;                                              // 0x0044(0x0010) (Const, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.LumenaShopInfoData
// 0x0010 (0x0044 - 0x0034)
struct FLumenaShopInfoData : public FContentInfoData
{
	TArray<int>                                        ProductList;                                              // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.LumenaShopProductInfoData
// 0x0014 (0x0048 - 0x0034)
struct FLumenaShopProductInfoData : public FContentInfoData
{
	TEnumAsByte<ECEContentTokenType>                   ContentTokenType;                                         // 0x0034(0x0001)
	TEnumAsByte<ECELumenaShopItemLimitType>            ShopItemLimitType;                                        // 0x0035(0x0001)
	TEnumAsByte<ECEResetTimeType>                      AmountResetPeriod;                                        // 0x0036(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	int                                                ItemCid;                                                  // 0x0038(0x0004)
	int                                                BuyPrice;                                                 // 0x003C(0x0004)
	int                                                RefPrice;                                                 // 0x0040(0x0004)
	int                                                Amount;                                                   // 0x0044(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MissionInfoData
// 0x0014 (0x0048 - 0x0034)
struct FMissionInfoData : public FContentInfoData
{
	TEnumAsByte<ECEMissionType>                        MissionType;                                              // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<ECERealmType>>                  RealmList;                                                // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RewardToken
// 0x0014
struct FRewardToken
{
	TEnumAsByte<ECEContentTokenType>                   TokentType;                                               // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FQWord                                      MinValue;                                                 // 0x0004(0x0008)
	struct FQWord                                      MaxValue;                                                 // 0x000C(0x0008)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RewardItem
// 0x0008
struct FRewardItem
{
	int                                                ItemCid;                                                  // 0x0000(0x0004)
	int                                                Amount;                                                   // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MissionLevelInfoData
// 0x002C (0x0060 - 0x0034)
struct FMissionLevelInfoData : public FContentInfoData
{
	int                                                RewardMoney_Min;                                          // 0x0034(0x0004)
	int                                                RewardMoney_Max;                                          // 0x0038(0x0004)
	TArray<struct FRewardToken>                        RewardTokenList;                                          // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FRewardItem>                         RewardItemList;                                           // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              ConsumeFatigue;                                           // 0x005C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RaceCondition
// 0x0008
struct FRaceCondition
{
	TEnumAsByte<ECEFellowRaceType>                     Fellow_2;                                                 // 0x0000(0x0001)
	TEnumAsByte<ECEFellowRaceType>                     Fellow_3;                                                 // 0x0001(0x0001)
	TEnumAsByte<ECEFellowRaceType>                     Fellow_4;                                                 // 0x0002(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	int                                                Index;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MissionOptionInfoData
// 0x0018 (0x004C - 0x0034)
struct FMissionOptionInfoData : public FContentInfoData
{
	TEnumAsByte<ECECompanionGradeType>                 GradeCondition;                                           // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                NumberCondition;                                          // 0x0038(0x0004)
	TArray<struct FRaceCondition>                      RaceConditionList;                                        // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MonsterBookRewardFix
// 0x0008
struct FMonsterBookRewardFix
{
	int                                                ItemCid;                                                  // 0x0000(0x0004)
	int                                                ItemCount;                                                // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MonsterBookObjective
// 0x0014
struct FMonsterBookObjective
{
	struct FString                                     Summary;                                                  // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                TotalCount;                                               // 0x0010(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MonsterBookRewardContentToken
// 0x0008
struct FMonsterBookRewardContentToken
{
	TEnumAsByte<ECEContentTokenType>                   TokenType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                TokenCount;                                               // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MonsterBookStage
// 0x003C
struct FMonsterBookStage
{
	int                                                RewardMoney;                                              // 0x0000(0x0004)
	int                                                RewardExp;                                                // 0x0004(0x0004)
	float                                              RewardTamingChanceBonus;                                  // 0x0008(0x0004)
	TArray<struct FMonsterBookRewardFix>               RewardFix;                                                // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FMonsterBookObjective>               Objectives;                                               // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FMonsterBookRewardContentToken>      RewardContentToken;                                       // 0x002C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MonsterBookInfoData
// 0x0030 (0x0064 - 0x0034)
struct FMonsterBookInfoData : public FContentInfoData
{
	unsigned char                                      bRepeatable;                                              // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                MonsterBookLocationCid;                                   // 0x0038(0x0004)
	int                                                BindingRealm;                                             // 0x003C(0x0004)
	TArray<int>                                        MonstersCid;                                              // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FMonsterBookStage>                   StageInfo;                                                // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ConsumeActingPoint;                                       // 0x0060(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountActiveSkillInfoData
// 0x0030 (0x0064 - 0x0034)
struct FMountActiveSkillInfoData : public FContentInfoData
{
	TEnumAsByte<ECEMountActiveSkillInterfaceType>      MountActiveSkillInterfaceType;                            // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	float                                              ApplyMoment;                                              // 0x0038(0x0004)
	float                                              ActionTerm;                                               // 0x003C(0x0004)
	int                                                IconIndex;                                                // 0x0040(0x0004)
	int                                                InitialConsume;                                           // 0x0044(0x0004)
	int                                                PeriodicConsume;                                          // 0x0048(0x0004)
	int                                                SkillGroupCid;                                            // 0x004C(0x0004)
	int                                                SkillLv;                                                  // 0x0050(0x0004)
	struct FString                                     TooltipTemplate;                                          // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountAnimInfoData
// 0x0120 (0x0154 - 0x0034)
struct FMountAnimInfoData : public FContentInfoData
{
	struct FName                                       Idle;                                                     // 0x0034(0x0008) (Const)
	struct FName                                       RunF;                                                     // 0x003C(0x0008) (Const)
	struct FName                                       RunFStart;                                                // 0x0044(0x0008) (Const)
	struct FName                                       RunFStop;                                                 // 0x004C(0x0008) (Const)
	struct FName                                       RunB;                                                     // 0x0054(0x0008) (Const)
	struct FName                                       RunJumpUp;                                                // 0x005C(0x0008) (Const)
	struct FName                                       RunJumpLoop;                                              // 0x0064(0x0008) (Const)
	struct FName                                       RunJumpLand;                                              // 0x006C(0x0008) (Const)
	struct FName                                       IdleRotLStart;                                            // 0x0074(0x0008) (Const)
	struct FName                                       IdleRotLLoop;                                             // 0x007C(0x0008) (Const)
	struct FName                                       IdleRotRStart;                                            // 0x0084(0x0008) (Const)
	struct FName                                       IdleRotRLoop;                                             // 0x008C(0x0008) (Const)
	struct FName                                       ADDBrake;                                                 // 0x0094(0x0008) (Const)
	struct FName                                       ADDRotL;                                                  // 0x009C(0x0008) (Const)
	struct FName                                       ADDRotR;                                                  // 0x00A4(0x0008) (Const)
	struct FName                                       ADDRotPoseL;                                              // 0x00AC(0x0008) (Const)
	struct FName                                       ADDRotPoseR;                                              // 0x00B4(0x0008) (Const)
	struct FName                                       JumpLand;                                                 // 0x00BC(0x0008) (Const)
	struct FName                                       ADDMountIdleSpineBackward;                                // 0x00C4(0x0008) (Const)
	struct FName                                       ADDMountIdleSpineForward;                                 // 0x00CC(0x0008) (Const)
	struct FName                                       ADDMountIdleArmUpward;                                    // 0x00D4(0x0008) (Const)
	struct FName                                       ADDMountIdleArmDownward;                                  // 0x00DC(0x0008) (Const)
	struct FName                                       ADDMountIdleArmFold;                                      // 0x00E4(0x0008) (Const)
	struct FName                                       ADDMountIdleLegNarrower;                                  // 0x00EC(0x0008) (Const)
	struct FName                                       ADDMountIdleLegWider;                                     // 0x00F4(0x0008) (Const)
	struct FName                                       ADDMountRunFSpineBackward;                                // 0x00FC(0x0008) (Const)
	struct FName                                       ADDMountRunFSpineForward;                                 // 0x0104(0x0008) (Const)
	struct FName                                       ADDMountRunFArmUpward;                                    // 0x010C(0x0008) (Const)
	struct FName                                       ADDMountRunFArmDownward;                                  // 0x0114(0x0008) (Const)
	struct FName                                       ADDMountRunFArmFold;                                      // 0x011C(0x0008) (Const)
	struct FName                                       ADDMountRunFLegNarrower;                                  // 0x0124(0x0008) (Const)
	struct FName                                       ADDMountRunFLegWider;                                     // 0x012C(0x0008) (Const)
	struct FName                                       FlyingIdle;                                               // 0x0134(0x0008) (Const)
	struct FName                                       FlyingFFlutter;                                           // 0x013C(0x0008) (Const)
	struct FName                                       FlyingB;                                                  // 0x0144(0x0008) (Const)
	struct FName                                       Special;                                                  // 0x014C(0x0008) (Const)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountExpInfoData
// 0x0008 (0x003C - 0x0034)
struct FMountExpInfoData : public FContentInfoData
{
	int                                                Level;                                                    // 0x0034(0x0004)
	int                                                MaxExp;                                                   // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountGradeFXInfoData
// 0x0000 (0x0034 - 0x0034)
struct FMountGradeFXInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountGrowthValueInfoData
// 0x0040 (0x0074 - 0x0034)
struct FMountGrowthValueInfoData : public FContentInfoData
{
	int                                                MountLevel;                                               // 0x0034(0x0004)
	float                                              MountRideTime;                                            // 0x0038(0x0004)
	float                                              MountRunForwardSpeed;                                     // 0x003C(0x0004)
	float                                              MountRunBackwardSpeed;                                    // 0x0040(0x0004)
	float                                              MountFlyingForwardSpeed;                                  // 0x0044(0x0004)
	float                                              MountFlyingBackwardSpeed;                                 // 0x0048(0x0004)
	float                                              MountMaxFatigue;                                          // 0x004C(0x0004)
	float                                              MountSpawnFatigue;                                        // 0x0050(0x0004)
	float                                              MountConsumeFPT;                                          // 0x0054(0x0004)
	float                                              MountDespawnRestoreFPT;                                   // 0x0058(0x0004)
	float                                              MountStopRestoreFPT;                                      // 0x005C(0x0004)
	float                                              MountJumpAbility;                                         // 0x0060(0x0004)
	int                                                MountGradeAbility;                                        // 0x0064(0x0004)
	float                                              JumpFatigueCost;                                          // 0x0068(0x0004)
	int                                                MountGetExpPerFatigue;                                    // 0x006C(0x0004)
	int                                                RequireExp;                                               // 0x0070(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountInfoData
// 0x0074 (0x00A8 - 0x0034)
struct FMountInfoData : public FContentInfoData
{
	TEnumAsByte<ECEMountSpineMethodType>               IdleSpineMethod;                                          // 0x0034(0x0001)
	TEnumAsByte<ECEMountArmMethodType>                 IdleArmMethod;                                            // 0x0035(0x0001)
	TEnumAsByte<ECEMountLegMethodType>                 IdleLegMethod;                                            // 0x0036(0x0001)
	TEnumAsByte<ECEMountSpineMethodType>               RunFSpineMethod;                                          // 0x0037(0x0001)
	TEnumAsByte<ECEMountArmMethodType>                 RunFArmMethod;                                            // 0x0038(0x0001)
	TEnumAsByte<ECEMountLegMethodType>                 RunFLegMethod;                                            // 0x0039(0x0001)
	TEnumAsByte<ECEMountType>                          MountType;                                                // 0x003A(0x0001)
	unsigned char                                      FosterAvailable;                                          // 0x003B(0x0001)
	unsigned char                                      FosterIngredientAvailable;                                // 0x003C(0x0001)
	unsigned char                                      MountAnimType;                                            // 0x003D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003E(0x0002) MISSED OFFSET
	float                                              BaseRunForwardSpeed;                                      // 0x0040(0x0004)
	float                                              BaseRunBackwardSpeed;                                     // 0x0044(0x0004)
	float                                              BaseFlyingForwardSpeed;                                   // 0x0048(0x0004)
	float                                              BaseFlyingBackwardSpeed;                                  // 0x004C(0x0004)
	float                                              IdleSpineValue;                                           // 0x0050(0x0004)
	float                                              IdleArmValue;                                             // 0x0054(0x0004)
	float                                              IdleArmFoldValue;                                         // 0x0058(0x0004)
	float                                              IdleLegValue;                                             // 0x005C(0x0004)
	float                                              RunFSpineValue;                                           // 0x0060(0x0004)
	float                                              RunFArmValue;                                             // 0x0064(0x0004)
	float                                              RunFArmFoldValue;                                         // 0x0068(0x0004)
	float                                              RunFLegValue;                                             // 0x006C(0x0004)
	int                                                Npc_Id;                                                   // 0x0070(0x0004)
	int                                                IconIndex;                                                // 0x0074(0x0004)
	int                                                AcquireMountByTamingCid;                                  // 0x0078(0x0004)
	int                                                AcquireMountByItemCid;                                    // 0x007C(0x0004)
	TArray<int>                                        UsableRealmList;                                          // 0x0080(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        UsableConquererList;                                      // 0x0090(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                UsableRank;                                               // 0x00A0(0x0004)
	int                                                UsableLimitRank;                                          // 0x00A4(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountIngredientExpInfoData
// 0x0018 (0x004C - 0x0034)
struct FMountIngredientExpInfoData : public FContentInfoData
{
	struct FCompanionIngredientExpInfoData             Info;                                                     // 0x0034(0x0018) (Const)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountPassiveSkillInfoData
// 0x001C (0x0050 - 0x0034)
struct FMountPassiveSkillInfoData : public FContentInfoData
{
	int                                                SkillGroupCid;                                            // 0x0034(0x0004)
	int                                                SkillLv;                                                  // 0x0038(0x0004)
	int                                                IconIndex;                                                // 0x003C(0x0004)
	struct FString                                     TooltipTemplate;                                          // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountSkillGroupInfoData
// 0x0000 (0x0034 - 0x0034)
struct FMountSkillGroupInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountSkillPoolData
// 0x0008
struct FMountSkillPoolData
{
	int                                                Skill_Id;                                                 // 0x0000(0x0004)
	int                                                Skill_Weight;                                             // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MountSkillPoolInfoData
// 0x0010 (0x0044 - 0x0034)
struct FMountSkillPoolInfoData : public FContentInfoData
{
	TArray<struct FMountSkillPoolData>                 MountSkillPoolList;                                       // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MPFCompanionItemFixSlotInfoData
// 0x0008 (0x003C - 0x0034)
struct FMPFCompanionItemFixSlotInfoData : public FContentInfoData
{
	int                                                item_codename;                                            // 0x0034(0x0004)
	int                                                max_count;                                                // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLDef.BLSequenceInfo
// 0x0010
struct FBLSequenceInfo
{
	struct FString                                     SequenceName;                                             // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.NPCAnimationSequenceInfoData
// 0x0024 (0x0058 - 0x0034)
struct FNPCAnimationSequenceInfoData : public FContentInfoData
{
	TEnumAsByte<ECENPCProductionCategory>              Category;                                                 // 0x0034(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<struct FBLSequenceInfo>                     NormalSequenceInfo;                                       // 0x0038(0x0010) (Const, AlwaysInit, NeedCtorLink)
	TArray<struct FBLSequenceInfo>                     WeaponSequenceInfo;                                       // 0x0048(0x0010) (Const, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BLTimerSysmessageInfo
// 0x0008
struct FBLTimerSysmessageInfo
{
	int                                                Timer;                                                    // 0x0000(0x0004)
	int                                                SystemMessageCid;                                         // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OccupationWarInfoData
// 0x0030 (0x0064 - 0x0034)
struct FOccupationWarInfoData : public FContentInfoData
{
	int                                                MinLevel;                                                 // 0x0034(0x0004)
	int                                                JoinWaitingTime;                                          // 0x0038(0x0004)
	int                                                StartWaitingTime;                                         // 0x003C(0x0004)
	int                                                CombatLimitTime;                                          // 0x0040(0x0004)
	int                                                ClearWaitingTime;                                         // 0x0044(0x0004)
	int                                                PeriodRevivalTime;                                        // 0x0048(0x0004)
	int                                                WinScore;                                                 // 0x004C(0x0004)
	int                                                ActiveCodeName;                                           // 0x0050(0x0004)
	TArray<struct FBLTimerSysmessageInfo>              SysmsgAfterStart;                                         // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OccupationWarPropInfoData
// 0x0018 (0x004C - 0x0034)
struct FOccupationWarPropInfoData : public FContentInfoData
{
	TEnumAsByte<ECERealmType>                          PropRealmType;                                            // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	float                                              RevivalRadius;                                            // 0x0038(0x0004)
	float                                              RevivalHeight;                                            // 0x003C(0x0004)
	struct FVector                                     RevivalLocation;                                          // 0x0040(0x000C)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OccupationWarRewardInfoData
// 0x0008 (0x003C - 0x0034)
struct FOccupationWarRewardInfoData : public FContentInfoData
{
	int                                                WinRewardcp;                                              // 0x0034(0x0004)
	int                                                LoseRewardcp;                                             // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OpenerAvailableInfoData
// 0x0024 (0x0058 - 0x0034)
struct FOpenerAvailableInfoData : public FContentInfoData
{
	unsigned char                                      ApplyBuild;                                               // 0x0034(0x0001) (AlwaysInit)
	unsigned char                                      AlwaysAvailable;                                          // 0x0035(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	struct FString                                     ActionName;                                               // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     IconType;                                                 // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OpenerWindowInfoData
// 0x0018 (0x004C - 0x0034)
struct FOpenerWindowInfoData : public FContentInfoData
{
	unsigned char                                      ApplyBuild;                                               // 0x0034(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                OpenerIndex;                                              // 0x0038(0x0004) (AlwaysInit)
	struct FString                                     ActionName;                                               // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OrderObjectiveBase
// 0x0004
struct FOrderObjectiveBase
{
	int                                                MaxCount;                                                 // 0x0000(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OrderReward
// 0x0008
struct FOrderReward
{
	int                                                ItemCid;                                                  // 0x0000(0x0004)
	int                                                COUNT;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OrderContentInfoData
// 0x002C (0x0060 - 0x0034)
struct FOrderContentInfoData : public FContentInfoData
{
	TEnumAsByte<ECEOrderGroupType>                     GroupType;                                                // 0x0034(0x0001)
	TEnumAsByte<ECEOrderPeriodType>                    PeriodType;                                               // 0x0035(0x0001)
	unsigned char                                      ApplyBuild;                                               // 0x0036(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	TArray<struct FOrderObjectiveBase>                 OrderObjectiveList;                                       // 0x0038(0x0010) (Const, AlwaysInit, NeedCtorLink)
	TArray<struct FOrderReward>                        OrderRewardList;                                          // 0x0048(0x0010) (Const, AlwaysInit, NeedCtorLink)
	int                                                RewardExperience;                                         // 0x0058(0x0004)
	int                                                RewardSeal;                                               // 0x005C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OrderRewardData
// 0x0008
struct FOrderRewardData
{
	int                                                ItemCid;                                                  // 0x0000(0x0004)
	int                                                COUNT;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.OrderRewardInfoData
// 0x0010 (0x0044 - 0x0034)
struct FOrderRewardInfoData : public FContentInfoData
{
	TArray<struct FOrderRewardData>                    RewardList;                                               // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ParameterUIInfoKey
// 0x0004
struct FParameterUIInfoKey
{
	TEnumAsByte<ECEClassType>                          Class;                                                    // 0x0000(0x0001)
	unsigned char                                      Page;                                                     // 0x0001(0x0001)
	unsigned char                                      Row;                                                      // 0x0002(0x0001)
	unsigned char                                      Dummy;                                                    // 0x0003(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ParameterUIInfoData
// 0x0014 (0x0048 - 0x0034)
struct FParameterUIInfoData : public FContentInfoData
{
	struct FParameterUIInfoKey                         Key;                                                      // 0x0034(0x0004)
	TArray<int>                                        NodeCidList;                                              // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PartyEffectCondition
// 0x0018
struct FPartyEffectCondition
{
	TEnumAsByte<EPartyEffectConditionType>             Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                COUNT;                                                    // 0x0004(0x0004)
	TArray<unsigned char>                              ConditionCheckList;                                       // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PartyEffectCombatInfoData
// 0x0034 (0x0068 - 0x0034)
struct FPartyEffectCombatInfoData : public FContentInfoData
{
	unsigned char                                      IsDefault;                                                // 0x0034(0x0001)
	unsigned char                                      ApplyBuild;                                               // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                UICategory;                                               // 0x0038(0x0004)
	int                                                AttachAbnormal;                                           // 0x003C(0x0004)
	struct FString                                     DescriptionCondition;                                     // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	struct FPartyEffectCondition                       CombatCondition;                                          // 0x0050(0x0018) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PartyEffectInfoData
// 0x0034 (0x0068 - 0x0034)
struct FPartyEffectInfoData : public FContentInfoData
{
	int                                                ConditionSameGuildLv;                                     // 0x0034(0x0004)
	TArray<int>                                        AbnormalMember3List;                                      // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        AbnormalMember4List;                                      // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        AbnormalMember5List;                                      // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PartyEffectLivingInfoData
// 0x0034 (0x0068 - 0x0034)
struct FPartyEffectLivingInfoData : public FContentInfoData
{
	unsigned char                                      IsDefault;                                                // 0x0034(0x0001)
	unsigned char                                      ApplyBuild;                                               // 0x0035(0x0001)
	TEnumAsByte<ECERealmType>                          Realm;                                                    // 0x0036(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	int                                                UICategory;                                               // 0x0038(0x0004)
	int                                                AttachAbnormal;                                           // 0x003C(0x0004)
	struct FString                                     DescriptionCondition;                                     // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	struct FPartyEffectCondition                       LivingCondition;                                          // 0x0050(0x0018) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PartyEffectUICategoryInfoData
// 0x0000 (0x0034 - 0x0034)
struct FPartyEffectUICategoryInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCActionInfoData
// 0x0000 (0x0034 - 0x0034)
struct FPCActionInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCAnimationSequenceInfoData
// 0x0014 (0x0048 - 0x0034)
struct FPCAnimationSequenceInfoData : public FContentInfoData
{
	TEnumAsByte<ECEWeaponSheatheType>                  WeaponType;                                               // 0x0034(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<struct FBLSequenceInfo>                     SequenceInfoList;                                         // 0x0038(0x0010) (Const, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ClientPCVoluntaryActionInfo
// 0x0010
struct FClientPCVoluntaryActionInfo
{
	TArray<int>                                        VoluntaryList;                                            // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ClientPCCanDispelASGroupInfo
// 0x0010
struct FClientPCCanDispelASGroupInfo
{
	TArray<int>                                        CanDispelASGroupList;                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCClassConstantValueInfoData
// 0x0030 (0x0064 - 0x0034)
struct FPCClassConstantValueInfoData : public FContentInfoData
{
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0034(0x0001)
	TEnumAsByte<ECETargetingControlType>               DefaultTargetingMode;                                     // 0x0035(0x0001)
	TEnumAsByte<ECEParamType>                          PCClassConceptStat;                                       // 0x0036(0x0001)
	unsigned char                                      bEnableDualweapon;                                        // 0x0037(0x0001)
	int                                                MaxSpForItem;                                             // 0x0038(0x0004)
	struct FClientPCVoluntaryActionInfo                PCVoluntaryActionIds;                                     // 0x003C(0x0010) (NeedCtorLink)
	struct FClientPCCanDispelASGroupInfo               PCCanDispelAsGroup;                                       // 0x004C(0x0010) (NeedCtorLink)
	unsigned char                                      ShakeOnVA;                                                // 0x005C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x005D(0x0003) MISSED OFFSET
	float                                              AimTargetMaxDistance;                                     // 0x0060(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.KeyInputData
// 0x0020
struct FKeyInputData
{
	struct FString                                     Key;                                                      // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Modifier;                                                 // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCControlInfoData
// 0x0094 (0x00C8 - 0x0034)
struct FPCControlInfoData : public FContentInfoData
{
	unsigned char                                      Apply_Build;                                              // 0x0034(0x0001)
	unsigned char                                      Editable_main;                                            // 0x0035(0x0001)
	unsigned char                                      Editable_sub;                                             // 0x0036(0x0001)
	unsigned char                                      Use_modifier;                                             // 0x0037(0x0001)
	TEnumAsByte<ECERefActionComboType>                 Ref_combo_type;                                           // 0x0038(0x0001)
	TEnumAsByte<ECEActionShowType>                     Show_type;                                                // 0x0039(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x003A(0x0002) MISSED OFFSET
	struct FString                                     CategoryName;                                             // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ActionName;                                               // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FKeyInputData>                       Default_control;                                          // 0x005C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FKeyInputData>                       Classic_targeting_move_QE;                                // 0x006C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FKeyInputData>                       Classic_targeting_move_AD;                                // 0x007C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FKeyInputData>                       Aim_targeting_move_QE;                                    // 0x008C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FKeyInputData>                       Aim_targeting_move_AD;                                    // 0x009C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FKeyInputData>                       Action_bar_preset2_binding;                               // 0x00AC(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Display_index;                                            // 0x00BC(0x0004)
	int                                                Ref_action_index;                                         // 0x00C0(0x0004)
	int                                                IconIndex;                                                // 0x00C4(0x0004)
};

// ScriptStruct BLGame.ABLDef.ClientEquipItemInfo
// 0x0008
struct FClientEquipItemInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                EquipSlotIndex;                                           // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DefaultPCSkillTree
// 0x0008
struct FDefaultPCSkillTree
{
	int                                                SkillTreeCid;                                             // 0x0000(0x0004)
	int                                                Level;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCCreateInfoData
// 0x0044 (0x0078 - 0x0034)
struct FPCCreateInfoData : public FContentInfoData
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0034(0x0001)
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0035(0x0001)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0036(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	TArray<struct FClientEquipItemInfo>                EquipItems;                                               // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FDefaultPCSkillTree>                 DefaultSkillTreeList;                                     // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        InvenItems;                                               // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        SkillList;                                                // 0x0068(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCGrowthValueInfoData
// 0x0018 (0x004C - 0x0034)
struct FPCGrowthValueInfoData : public FContentInfoData
{
	int                                                Level;                                                    // 0x0034(0x0004)
	int                                                ExpToLevel;                                               // 0x0038(0x0004)
	int                                                OpenKeySkillDeckSlot;                                     // 0x003C(0x0004)
	int                                                OpenActiveSkillDeckSlot;                                  // 0x0040(0x0004)
	int                                                OpenPassiveSkillDeckSlot;                                 // 0x0044(0x0004)
	int                                                OpenQTESkillDeckSlot;                                     // 0x0048(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCLimitedRankGrowthValueInfoData
// 0x0038 (0x006C - 0x0034)
struct FPCLimitedRankGrowthValueInfoData : public FContentInfoData
{
	unsigned char                                      Apply_Build;                                              // 0x0034(0x0001)
	TEnumAsByte<ECETargetStateWidgetType>              TargetStateWidgetType;                                    // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                RankID;                                                   // 0x0038(0x0004)
	struct FString                                     RankCode;                                                 // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RankName_Union;                                           // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RankName_Hieron;                                          // 0x005C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCNormalAttackAnimInfoData
// 0x0010 (0x0044 - 0x0034)
struct FPCNormalAttackAnimInfoData : public FContentInfoData
{
	unsigned char                                      ClassType;                                                // 0x0034(0x0001)
	unsigned char                                      EquipType;                                                // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                SequenceNumber;                                           // 0x0038(0x0004)
	float                                              HittingTime;                                              // 0x003C(0x0004)
	int                                                ApplyMoment;                                              // 0x0040(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCRankGrowthValueInfoData
// 0x003C (0x0070 - 0x0034)
struct FPCRankGrowthValueInfoData : public FContentInfoData
{
	unsigned char                                      Apply_Build;                                              // 0x0034(0x0001)
	TEnumAsByte<ECETargetStateWidgetType>              TargetStateWidgetType;                                    // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                RankID;                                                   // 0x0038(0x0004)
	struct FString                                     RankCode;                                                 // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RankName_Union;                                           // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     RankName_Hieron;                                          // 0x005C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                RXP;                                                      // 0x006C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCReturnInfoData
// 0x0008 (0x003C - 0x0034)
struct FPCReturnInfoData : public FContentInfoData
{
	int                                                ToTime;                                                   // 0x0034(0x0004)
	int                                                RequireLumena;                                            // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PCVoiceCustomizingInfoData
// 0x0024 (0x0058 - 0x0034)
struct FPCVoiceCustomizingInfoData : public FContentInfoData
{
	TEnumAsByte<ECERealmType>                          RaceType;                                                 // 0x0034(0x0001)
	TEnumAsByte<ECEGenderType>                         Gender;                                                   // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	struct FString                                     DefaultVoice;                                             // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             SelectableVoice;                                          // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetAcquireByTamingInfoData
// 0x0010 (0x0044 - 0x0034)
struct FPetAcquireByTamingInfoData : public FContentInfoData
{
	TArray<int>                                        SkillGroupCidList;                                        // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetConstInfoData
// 0x0044 (0x0078 - 0x0034)
struct FPetConstInfoData : public FContentInfoData
{
	float                                              PetDefaultPositionDegree;                                 // 0x0034(0x0004)
	float                                              PetDefaultPositionDistance;                               // 0x0038(0x0004)
	float                                              PetDefaultDirection;                                      // 0x003C(0x0004)
	float                                              PetDefaultAreaRadius;                                     // 0x0040(0x0004)
	float                                              MoveStartDistance;                                        // 0x0044(0x0004)
	float                                              CloseDistance;                                            // 0x0048(0x0004)
	float                                              CloseSpeed;                                               // 0x004C(0x0004)
	float                                              FarawayDistance;                                          // 0x0050(0x0004)
	float                                              FarawaySpeed;                                             // 0x0054(0x0004)
	float                                              MissingDistance;                                          // 0x0058(0x0004)
	int                                                MaxLevel;                                                 // 0x005C(0x0004)
	float                                              GradeModeCommon;                                          // 0x0060(0x0004)
	float                                              GradeModeUncommon;                                        // 0x0064(0x0004)
	float                                              GradeModeRare;                                            // 0x0068(0x0004)
	float                                              GradeModeEpic;                                            // 0x006C(0x0004)
	float                                              GradeModeLegendary;                                       // 0x0070(0x0004)
	float                                              ExpCalMod;                                                // 0x0074(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetExpInfoData
// 0x0008 (0x003C - 0x0034)
struct FPetExpInfoData : public FContentInfoData
{
	int                                                Level;                                                    // 0x0034(0x0004)
	int                                                MaxExp;                                                   // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetGradeFXInfoData
// 0x0000 (0x0034 - 0x0034)
struct FPetGradeFXInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetGrowthValueInfoData
// 0x001C (0x0050 - 0x0034)
struct FPetGrowthValueInfoData : public FContentInfoData
{
	int                                                PetCoolTime;                                              // 0x0034(0x0004)
	float                                              PetMaxFatigue;                                            // 0x0038(0x0004)
	float                                              PetSpawnFatigue;                                          // 0x003C(0x0004)
	float                                              PetConsumeFatiguePerTime;                                 // 0x0040(0x0004)
	float                                              PetRestoreFatiguePerTime;                                 // 0x0044(0x0004)
	int                                                PetGetExpPerFatigue;                                      // 0x0048(0x0004)
	int                                                RequireExp;                                               // 0x004C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetInfoData
// 0x0034 (0x0068 - 0x0034)
struct FPetInfoData : public FContentInfoData
{
	unsigned char                                      FosterAvailable;                                          // 0x0034(0x0001)
	unsigned char                                      FosterIngredientAvailable;                                // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                IconIndex;                                                // 0x0038(0x0004)
	int                                                NpcCid;                                                   // 0x003C(0x0004)
	int                                                FatigueMax;                                               // 0x0040(0x0004)
	int                                                FatigueRecoveryInMinute;                                  // 0x0044(0x0004)
	int                                                AcquirePetByTamingCid;                                    // 0x0048(0x0004)
	int                                                AcquirePetByItemCid;                                      // 0x004C(0x0004)
	int                                                UsableRank;                                               // 0x0050(0x0004)
	int                                                UsableLimitRank;                                          // 0x0054(0x0004)
	TArray<struct FConquerorInfo>                      UsableConquerors;                                         // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetIngredientExpInfoData
// 0x0018 (0x004C - 0x0034)
struct FPetIngredientExpInfoData : public FContentInfoData
{
	struct FCompanionIngredientExpInfoData             Info;                                                     // 0x0034(0x0018) (Const)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetLookInfoData
// 0x000C (0x0040 - 0x0034)
struct FPetLookInfoData : public FContentInfoData
{
	int                                                IconIndex;                                                // 0x0034(0x0004) (Const)
	int                                                NPC_Cid;                                                  // 0x0038(0x0004) (Const)
	int                                                GradeFXCid;                                               // 0x003C(0x0004) (Const)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetSkillGroupInfoData
// 0x0000 (0x0034 - 0x0034)
struct FPetSkillGroupInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetSkillInfoData
// 0x0020 (0x0054 - 0x0034)
struct FPetSkillInfoData : public FContentInfoData
{
	int                                                IconIndex;                                                // 0x0034(0x0004)
	int                                                SkillGroupCid;                                            // 0x0038(0x0004)
	int                                                SkillLv;                                                  // 0x003C(0x0004)
	struct FString                                     TooltipTemplate;                                          // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                AbnormalCid;                                              // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetSkillPoolData
// 0x0008
struct FPetSkillPoolData
{
	int                                                Skill_Id;                                                 // 0x0000(0x0004)
	int                                                Skill_Weight;                                             // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetSkillPoolInfoData
// 0x0010 (0x0044 - 0x0034)
struct FPetSkillPoolInfoData : public FContentInfoData
{
	TArray<struct FPetSkillPoolData>                   PetSkillPoolList;                                         // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PhaseFieldInfoData
// 0x0010 (0x0044 - 0x0034)
struct FPhaseFieldInfoData : public FContentInfoData
{
	TEnumAsByte<ETransitionFX_Type>                    TransitionFXType_In;                                      // 0x0034(0x0001)
	TEnumAsByte<ETransitionFX_Type>                    TransitionFXType_Out;                                     // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                WorldMapCId;                                              // 0x0038(0x0004)
	int                                                VolumeTerritoryEnum;                                      // 0x003C(0x0004)
	int                                                TimeOfDay;                                                // 0x0040(0x0004)
};

// ScriptStruct BLGame.ABLDef.BLPropRelativeQuestInfo
// 0x0024
struct FBLPropRelativeQuestInfo
{
	int                                                QuestCid;                                                 // 0x0000(0x0004)
	TArray<TEnumAsByte<EBLPropInteractConditionType>>  InteractConditionTypeList;                                // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        ObjectiveIndexList;                                       // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PropInfoData
// 0x006C (0x00A0 - 0x0034)
struct FPropInfoData : public FContentInfoData
{
	TEnumAsByte<ECERealmType>                          PropRealmCondition;                                       // 0x0034(0x0001)
	TEnumAsByte<ECEPropCategory>                       PropCategory;                                             // 0x0035(0x0001)
	TEnumAsByte<ECEPropInteractType>                   PropInteractType;                                         // 0x0036(0x0001)
	unsigned char                                      Can_target;                                               // 0x0037(0x0001)
	unsigned char                                      bIsGatherProp;                                            // 0x0038(0x0001)
	unsigned char                                      ApplyBuild;                                               // 0x0039(0x0001)
	unsigned char                                      bRealmConditionProp;                                      // 0x003A(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x003B(0x0001) MISSED OFFSET
	float                                              CollisionCylinderRadius;                                  // 0x003C(0x0004)
	float                                              CollisionCylinderHeight;                                  // 0x0040(0x0004)
	float                                              Interact_casting_time;                                    // 0x0044(0x0004)
	struct FString                                     Interact_Description;                                     // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Craft_Spot_Cid;                                           // 0x0058(0x0004)
	int                                                PickUpBurden_Cid;                                         // 0x005C(0x0004)
	int                                                PutDownBurden_Cid;                                        // 0x0060(0x0004)
	TArray<int>                                        NpcList;                                                  // 0x0064(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        SkillList;                                                // 0x0074(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IconIndex;                                                // 0x0084(0x0004)
	int                                                NeedActingPoint;                                          // 0x0088(0x0004)
	struct FString                                     GatherPropCodeName;                                       // 0x008C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                GatherCategoryType;                                       // 0x009C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.QuestRaceStoryInfoData
// 0x0014 (0x0048 - 0x0034)
struct FQuestRaceStoryInfoData : public FContentInfoData
{
	int                                                RaceType;                                                 // 0x0034(0x0004) (Const)
	TArray<int>                                        StoryList;                                                // 0x0038(0x0010) (Const, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ClientPlotInfo
// 0x0040
struct FClientPlotInfo
{
	struct FString                                     CodeName;                                                 // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     LocalName;                                                // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Desc;                                                     // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        PlotQuestCids;                                            // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.QuestStoryInfoData
// 0x0010 (0x0044 - 0x0034)
struct FQuestStoryInfoData : public FContentInfoData
{
	TArray<struct FClientPlotInfo>                     PlotLists;                                                // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RaceClassInfoData
// 0x0010 (0x0044 - 0x0034)
struct FRaceClassInfoData : public FContentInfoData
{
	TArray<TEnumAsByte<ECEClassType>>                  ClassList;                                                // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RaidFieldInfoData
// 0x0004 (0x0038 - 0x0034)
struct FRaidFieldInfoData : public FContentInfoData
{
	int                                                BossNPCCid;                                               // 0x0034(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RealmOwnerRewardInfoData
// 0x0048 (0x007C - 0x0034)
struct FRealmOwnerRewardInfoData : public FContentInfoData
{
	TEnumAsByte<ECERealmType>                          Realm;                                                    // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<int>                                        CapitalZoneList;                                          // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     StatueBaseMaterialName;                                   // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     StatueFurMaterialName;                                    // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     StatueAnimSequenceName;                                   // 0x0068(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              StatueScale;                                              // 0x0078(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RealmOwnershipInfoData
// 0x0010 (0x0044 - 0x0034)
struct FRealmOwnershipInfoData : public FContentInfoData
{
	int                                                ModifyTime;                                               // 0x0034(0x0004) (Transient)
	int                                                EndAlarmTime;                                             // 0x0038(0x0004) (Transient)
	int                                                OpenActiveCode;                                           // 0x003C(0x0004) (Transient)
	int                                                EnterActiveCode;                                          // 0x0040(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RealmOwnerStatueInfoData
// 0x0064 (0x0098 - 0x0034)
struct FRealmOwnerStatueInfoData : public FContentInfoData
{
	struct FString                                     StatueBaseMaterialName;                                   // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     StatueEyeballMaterialName;                                // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     StatueEyelashMaterialName;                                // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     StatueFaceFurMaterialName;                                // 0x0064(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     StatueHairMaterialName;                                   // 0x0074(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     StatueAnimSequenceName;                                   // 0x0084(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              StatueScale;                                              // 0x0094(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RealmRaceInfoData
// 0x0010 (0x0044 - 0x0034)
struct FRealmRaceInfoData : public FContentInfoData
{
	TArray<TEnumAsByte<ECERaceType>>                   RaceList;                                                 // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RecipeCodeInfoData
// 0x0014 (0x0048 - 0x0034)
struct FRecipeCodeInfoData : public FContentInfoData
{
	TEnumAsByte<ECERecipeCodeInfoType>                 SpecialRecipeType;                                        // 0x0034(0x0001) (AlwaysInit)
	unsigned char                                      ApplyBuild;                                               // 0x0035(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	TArray<float>                                      ProbParamList1;                                           // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RoFieldInfoData
// 0x0018 (0x004C - 0x0034)
struct FRoFieldInfoData : public FContentInfoData
{
	TEnumAsByte<ECERealmType>                          RealmType;                                                // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                WorldMapCId;                                              // 0x0038(0x0004)
	TArray<TEnumAsByte<ECEMountType>>                  MountTypeList;                                            // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RuneParamInfo
// 0x0008
struct FRuneParamInfo
{
	TEnumAsByte<ECEParamType>                          ParamType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                ParamValue;                                               // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RuneInfoData
// 0x0024 (0x0058 - 0x0034)
struct FRuneInfoData : public FContentInfoData
{
	TEnumAsByte<ECERuneCategoryType>                   RuneCategory;                                             // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                UnEquipCost_Gold;                                         // 0x0038(0x0004)
	int                                                UnEquipCost_Lumena;                                       // 0x003C(0x0004)
	int                                                RuneSocketCid;                                            // 0x0040(0x0004)
	TArray<struct FRuneParamInfo>                      ParamInfoList;                                            // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IncreaseGearScore;                                        // 0x0054(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RuneSocketInfoData
// 0x0001 (0x0035 - 0x0034)
struct FRuneSocketInfoData : public FContentInfoData
{
	TEnumAsByte<ECERuneType>                           RuneType;                                                 // 0x0034(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ClientSetItemEffectInfo
// 0x0010
struct FClientSetItemEffectInfo
{
	int                                                EffectPieceCount;                                         // 0x0000(0x0004)
	int                                                EffectEquipLvCount;                                       // 0x0004(0x0004)
	int                                                AbnormalStatusCid;                                        // 0x0008(0x0004)
	int                                                IncreaseGearScore;                                        // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SetItemInfoData
// 0x0024 (0x0058 - 0x0034)
struct FSetItemInfoData : public FContentInfoData
{
	TEnumAsByte<ESetItemType>                          SetType;                                                  // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<int>                                        SetItemList;                                              // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FClientSetItemEffectInfo>            SetItemEffectList;                                        // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.NPCSkillInfoData
// 0x0000 (0x00C8 - 0x00C8)
struct FNPCSkillInfoData : public FSkillInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillLevelInfoData
// 0x005C (0x0090 - 0x0034)
struct FSkillLevelInfoData : public FContentInfoData
{
	int                                                SkillCodeName;                                            // 0x0034(0x0004)
	int                                                Level;                                                    // 0x0038(0x0004)
	int                                                SpForLearn;                                               // 0x003C(0x0004)
	struct FString                                     SkillDescription;                                         // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                DealingAmount;                                            // 0x0050(0x0004)
	int                                                HealingAmount;                                            // 0x0054(0x0004)
	float                                              N_sw;                                                     // 0x0058(0x0004)
	float                                              N_sws;                                                    // 0x005C(0x0004)
	float                                              N_sa;                                                     // 0x0060(0x0004)
	float                                              N_sps;                                                    // 0x0064(0x0004)
	float                                              N_lv;                                                     // 0x0068(0x0004)
	float                                              CoolTime;                                                 // 0x006C(0x0004)
	TArray<struct FInvokableElementInfo>               InvokableElements;                                        // 0x0070(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FClassResourceInfo>                  ClassResourceConsume;                                     // 0x0080(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PrecedeSkillTree
// 0x0008
struct FPrecedeSkillTree
{
	int                                                SkillTreeID;                                              // 0x0000(0x0004)
	int                                                Level;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillTreeInfoData
// 0x003C (0x0070 - 0x0034)
struct FSkillTreeInfoData : public FContentInfoData
{
	int                                                SkillTreeID;                                              // 0x0034(0x0004)
	int                                                SkillCodeName;                                            // 0x0038(0x0004)
	int                                                StatCodeName;                                             // 0x003C(0x0004)
	struct FString                                     SkillTreeCodeName;                                        // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     IconSize;                                                 // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FPrecedeSkillTree>                   PrecedeSkillTreeForLearnArray;                            // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillTreeTierInfoData
// 0x001C (0x0050 - 0x0034)
struct FSkillTreeTierInfoData : public FContentInfoData
{
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                TierLevel;                                                // 0x0038(0x0004)
	int                                                NeedPrecedTier;                                           // 0x003C(0x0004)
	TArray<int>                                        Slots;                                                    // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillTreeUIInfoData
// 0x0014 (0x0048 - 0x0034)
struct FSkillTreeUIInfoData : public FContentInfoData
{
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0034(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<struct FSkillTreeUISlotData>                Skilltree_All_slotList;                                   // 0x0038(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SocialActionInfoData
// 0x0040 (0x0074 - 0x0034)
struct FSocialActionInfoData : public FContentInfoData
{
	TArray<struct FString>                             CommandWords;                                             // 0x0034(0x0010) (Const, AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             TriggerWords;                                             // 0x0044(0x0010) (Const, AlwaysInit, NeedCtorLink)
	struct FString                                     XmlCommandWords;                                          // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     XmlTriggerWords;                                          // 0x0064(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SocketSetInfoData
// 0x0010 (0x0044 - 0x0034)
struct FSocketSetInfoData : public FContentInfoData
{
	TArray<TEnumAsByte<ECERuneCategoryType>>           RuneCategoryList;                                         // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SpecialWarContentInfoData
// 0x0020 (0x0054 - 0x0034)
struct FSpecialWarContentInfoData : public FContentInfoData
{
	int                                                WorldMapCId;                                              // 0x0034(0x0004)
	int                                                MinLevel;                                                 // 0x0038(0x0004)
	int                                                MaxLevel;                                                 // 0x003C(0x0004)
	int                                                ActingPoint;                                              // 0x0040(0x0004)
	float                                              AP_Coefficient;                                           // 0x0044(0x0004)
	float                                              DeathPointDisplaySeconds;                                 // 0x0048(0x0004)
	int                                                RejoinLumenaCost;                                         // 0x004C(0x0004)
	int                                                ActiveCodeName;                                           // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SpecialWarLogInfoData
// 0x0000 (0x0034 - 0x0034)
struct FSpecialWarLogInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SpecialWarPointInfoData
// 0x0000 (0x0034 - 0x0034)
struct FSpecialWarPointInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SpecialWarRankBonusInfoData
// 0x0000 (0x0034 - 0x0034)
struct FSpecialWarRankBonusInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SPLevelInfoData
// 0x0008 (0x003C - 0x0034)
struct FSPLevelInfoData : public FContentInfoData
{
	int                                                SPLevel;                                                  // 0x0034(0x0004)
	int                                                Exp;                                                      // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.StatParamChange
// 0x0008
struct FStatParamChange
{
	int                                                ParamType;                                                // 0x0000(0x0004)
	float                                              Value;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.StatLevelParam
// 0x0028
struct FStatLevelParam
{
	int                                                Level;                                                    // 0x0000(0x0004)
	int                                                SpForLearn;                                               // 0x0004(0x0004)
	struct FString                                     Description;                                              // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FStatParamChange>                    StatParamChangeArray;                                     // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.StatLevelInfoData
// 0x0044 (0x0078 - 0x0034)
struct FStatLevelInfoData : public FContentInfoData
{
	int                                                StatId;                                                   // 0x0034(0x0004)
	struct FString                                     StatCodeName;                                             // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     LocalName;                                                // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                EnableIconIndex;                                          // 0x0058(0x0004)
	int                                                DisableIconIndex;                                         // 0x005C(0x0004)
	TArray<struct FStatLevelParam>                     StatLevelParamArray;                                      // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                MaxLevel;                                                 // 0x0070(0x0004)
	int                                                pc_level;                                                 // 0x0074(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.StatTypeInfo
// 0x000C
struct FStatTypeInfo
{
	int                                                StatType;                                                 // 0x0000(0x0004) (Transient)
	float                                              Axis;                                                     // 0x0004(0x0004) (Transient)
	float                                              Slope;                                                    // 0x0008(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.StatsUpgradeInfoData
// 0x0010 (0x0044 - 0x0034)
struct FStatsUpgradeInfoData : public FContentInfoData
{
	TArray<struct FStatTypeInfo>                       StatsData;                                                // 0x0034(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SteamAchievementInfoData
// 0x0010 (0x0044 - 0x0034)
struct FSteamAchievementInfoData : public FContentInfoData
{
	struct FString                                     SteamAchievementAPIStr;                                   // 0x0034(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ClientSystemMailItemInfo
// 0x0008
struct FClientSystemMailItemInfo
{
	int                                                ItemCid;                                                  // 0x0000(0x0004)
	int                                                ItemCount;                                                // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SystemMailInfoData
// 0x0044 (0x0078 - 0x0034)
struct FSystemMailInfoData : public FContentInfoData
{
	struct FString                                     Sender;                                                   // 0x0034(0x0010) (Const, AlwaysInit, NeedCtorLink)
	struct FString                                     Subject;                                                  // 0x0044(0x0010) (Const, AlwaysInit, NeedCtorLink)
	struct FString                                     Content;                                                  // 0x0054(0x0010) (Const, AlwaysInit, NeedCtorLink)
	int                                                Gold;                                                     // 0x0064(0x0004) (Const)
	TArray<struct FClientSystemMailItemInfo>           ItemInfoList;                                             // 0x0068(0x0010) (Const, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TamingLevelInfoData
// 0x0010 (0x0044 - 0x0034)
struct FTamingLevelInfoData : public FContentInfoData
{
	int                                                Level;                                                    // 0x0034(0x0004) (Transient)
	int                                                IconIndex;                                                // 0x0038(0x0004) (Transient)
	int                                                MaxExp;                                                   // 0x003C(0x0004) (Transient)
	int                                                RewardSlot;                                               // 0x0040(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TamingTableInfoData
// 0x0008 (0x003C - 0x0034)
struct FTamingTableInfoData : public FContentInfoData
{
	TEnumAsByte<ECECompanionType>                      MPFType;                                                  // 0x0034(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                TamingMPFCid;                                             // 0x0038(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TODConstInfoData
// 0x0014 (0x0048 - 0x0034)
struct FTODConstInfoData : public FContentInfoData
{
	int                                                DayToRealMin;                                             // 0x0034(0x0004)
	int                                                DawnEndMin;                                               // 0x0038(0x0004)
	int                                                DayEndMin;                                                // 0x003C(0x0004)
	int                                                DuskEndMin;                                               // 0x0040(0x0004)
	int                                                NightEndMin;                                              // 0x0044(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TrapInfoData
// 0x0010 (0x0044 - 0x0034)
struct FTrapInfoData : public FContentInfoData
{
	TArray<struct FRCApplyInfo>                        RiotControlApplys;                                        // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TutorialOrderGuideInfoData
// 0x0010 (0x0044 - 0x0034)
struct FTutorialOrderGuideInfoData : public FContentInfoData
{
	struct FString                                     GuideImage;                                               // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TutorialOrderObjectDetailInfo
// 0x0008
struct FTutorialOrderObjectDetailInfo
{
	TEnumAsByte<ECETutorialOrderObjectiveType>         ObjectiveClassId;                                         // 0x0000(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                PCActionEnum;                                             // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TutorialOrderObjectInfo
// 0x0010
struct FTutorialOrderObjectInfo
{
	TArray<struct FTutorialOrderObjectDetailInfo>      ObjectiveDetail;                                          // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TutorialOrderRewardInfo
// 0x0008
struct FTutorialOrderRewardInfo
{
	int                                                ItemCid;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                COUNT;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TutorialOrderInfoData
// 0x0060 (0x0094 - 0x0034)
struct FTutorialOrderInfoData : public FContentInfoData
{
	unsigned char                                      ApplyBuild;                                               // 0x0034(0x0001) (AlwaysInit)
	unsigned char                                      ForceOpenGuide;                                           // 0x0035(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                TutorialPriority;                                         // 0x0038(0x0004) (AlwaysInit)
	TArray<TEnumAsByte<ECEClassType>>                  AcceptablePCClass;                                        // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CategoryCodename;                                         // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                GuideCodeName;                                            // 0x005C(0x0004) (AlwaysInit)
	struct FTutorialOrderObjectInfo                    TutorialObjective;                                        // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
	struct FTutorialOrderObjectInfo                    AlarmiTrigger;                                            // 0x0070(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                RewardExp;                                                // 0x0080(0x0004) (AlwaysInit)
	TArray<struct FTutorialOrderRewardInfo>            TutorialOrderRewardItem;                                  // 0x0084(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TutorialOrderStageInfoData
// 0x0010 (0x0044 - 0x0034)
struct FTutorialOrderStageInfoData : public FContentInfoData
{
	unsigned char                                      ApplyBuild;                                               // 0x0034(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                StageCompleteCount;                                       // 0x0038(0x0004) (AlwaysInit)
	int                                                StageSumCount;                                            // 0x003C(0x0004) (AlwaysInit)
	int                                                MailType;                                                 // 0x0040(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftRequireItem
// 0x0008
struct FCraftRequireItem
{
	int                                                ItemCid;                                                  // 0x0000(0x0004) (Transient)
	int                                                COUNT;                                                    // 0x0004(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftRequireToken
// 0x0008
struct FCraftRequireToken
{
	TEnumAsByte<ECEContentTokenType>                   TokenType;                                                // 0x0000(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Cost;                                                     // 0x0004(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftResultItem
// 0x0008
struct FCraftResultItem
{
	int                                                ItemCid;                                                  // 0x0000(0x0004) (Transient)
	int                                                COUNT;                                                    // 0x0004(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftOptionalItem
// 0x000C
struct FCraftOptionalItem
{
	int                                                ItemCid;                                                  // 0x0000(0x0004) (Transient)
	float                                              GreatSuccessRate;                                         // 0x0004(0x0004) (Transient)
	float                                              SuperSuccessRate;                                         // 0x0008(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftInfoData
// 0x00C0 (0x00F4 - 0x0034)
struct FCraftInfoData : public FContentInfoData
{
	TEnumAsByte<ECEV2CraftCategoryType>                CraftCategory;                                            // 0x0034(0x0001) (Transient, AlwaysInit)
	TEnumAsByte<ECEV2CraftBroadwayType>                BroadwayType;                                             // 0x0035(0x0001) (Transient, AlwaysInit)
	TEnumAsByte<ECEItemGradeType>                      Grade;                                                    // 0x0036(0x0001) (Transient, AlwaysInit)
	unsigned char                                      CraftUICategory;                                          // 0x0037(0x0001) (Transient)
	unsigned char                                      NeedAcquire;                                              // 0x0038(0x0001) (Transient)
	unsigned char                                      ShonOnRecipeBuyPage;                                      // 0x0039(0x0001) (Transient)
	unsigned char                                      ApplyBuild;                                               // 0x003A(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x1];                                       // 0x003B(0x0001) MISSED OFFSET
	TArray<struct FCraftRequireItem>                   RequireItemList;                                          // 0x003C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FCraftRequireToken>                  RequireTokenList;                                         // 0x004C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FCraftRequireToken>                  CostTokenList;                                            // 0x005C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<int>                                        RequireTierBarrierList;                                   // 0x006C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<int>                                        CraftSpotList;                                            // 0x007C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FCraftResultItem>                    SuccessResultItemList;                                    // 0x008C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FCraftResultItem>                    GreatSuccessResultItemList;                               // 0x009C(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FCraftResultItem>                    SuperSuccessResultItemList;                               // 0x00AC(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FCraftOptionalItem>                  OptionalItemList;                                         // 0x00BC(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	int                                                GreatSuccessSystemMessageCid;                             // 0x00CC(0x0004) (Transient)
	int                                                SuperSuccessSystemMessageCid;                             // 0x00D0(0x0004) (Transient)
	float                                              CastingTime;                                              // 0x00D4(0x0004) (Transient)
	int                                                PriceGold;                                                // 0x00D8(0x0004) (Transient)
	int                                                PriceDP;                                                  // 0x00DC(0x0004) (Transient)
	int                                                Exp;                                                      // 0x00E0(0x0004) (Transient)
	int                                                RequireActingPoint;                                       // 0x00E4(0x0004) (Transient)
	int                                                RequireLevel;                                             // 0x00E8(0x0004) (Transient)
	float                                              GreatSuccessRate;                                         // 0x00EC(0x0004) (Transient)
	float                                              SuperSuccessRate;                                         // 0x00F0(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CraftLevelInfoData
// 0x0048 (0x007C - 0x0034)
struct FCraftLevelInfoData : public FContentInfoData
{
	TEnumAsByte<ECEV2CraftCategoryType>                CraftCategory;                                            // 0x0034(0x0001) (Transient)
	unsigned char                                      RewardExist;                                              // 0x0035(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	TArray<int>                                        RequireQuestHieron;                                       // 0x0038(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<int>                                        RequireQuestUnion;                                        // 0x0048(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	struct FString                                     CraftTitle;                                               // 0x0058(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	int                                                Level;                                                    // 0x0068(0x0004) (Transient)
	int                                                IconIndex;                                                // 0x006C(0x0004) (Transient)
	int                                                NeedExp;                                                  // 0x0070(0x0004) (Transient)
	float                                              SuperSuccessIncRate;                                      // 0x0074(0x0004) (Transient)
	float                                              GreatSuccessIncRate;                                      // 0x0078(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowChaserInfoData
// 0x0020 (0x0054 - 0x0034)
struct FV2FellowChaserInfoData : public FContentInfoData
{
	int                                                Strength;                                                 // 0x0034(0x0004)
	int                                                Agility;                                                  // 0x0038(0x0004)
	int                                                Intelligence;                                             // 0x003C(0x0004)
	int                                                Wisdom;                                                   // 0x0040(0x0004)
	int                                                Cruel;                                                    // 0x0044(0x0004)
	int                                                Ability;                                                  // 0x0048(0x0004)
	int                                                Boldness;                                                 // 0x004C(0x0004)
	int                                                Concentration;                                            // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowConstInfoData
// 0x0024 (0x0058 - 0x0034)
struct FV2FellowConstInfoData : public FContentInfoData
{
	unsigned char                                      CompanionFellowTabVisible;                                // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                FellowUncommonMaxLevel;                                   // 0x0038(0x0004)
	int                                                FellowRareMaxLevel;                                       // 0x003C(0x0004)
	int                                                FellowEpicMaxLevel;                                       // 0x0040(0x0004)
	int                                                FellowLegendMaxLevel;                                     // 0x0044(0x0004)
	int                                                FatigueTick;                                              // 0x0048(0x0004)
	struct FMPFGradeUpChanceInfo                       MaxGradeChanceMileage;                                    // 0x004C(0x000C)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowInfoData
// 0x0054 (0x0088 - 0x0034)
struct FV2FellowInfoData : public FContentInfoData
{
	unsigned char                                      FosterAvailable;                                          // 0x0034(0x0001)
	unsigned char                                      FosterIngredientAvailable;                                // 0x0035(0x0001)
	unsigned char                                      ExtractionAvailable;                                      // 0x0036(0x0001)
	unsigned char                                      IsDefaultShow;                                            // 0x0037(0x0001)
	TEnumAsByte<ECEFellowRaceType>                     FellowRace;                                               // 0x0038(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0039(0x0003) MISSED OFFSET
	TArray<int>                                        FellowCidList;                                            // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FConquerorInfo>                      UsableConquerors;                                         // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                RareSkillPoolId;                                          // 0x005C(0x0004)
	int                                                EpicSkillPoolId;                                          // 0x0060(0x0004)
	int                                                LegendSkillPoolId;                                        // 0x0064(0x0004)
	int                                                FellowLookCid;                                            // 0x0068(0x0004)
	int                                                FellowLegendaryLookCid;                                   // 0x006C(0x0004)
	int                                                UsableRank;                                               // 0x0070(0x0004)
	int                                                UsableLimitRank;                                          // 0x0074(0x0004)
	int                                                GradeUpCount;                                             // 0x0078(0x0004)
	int                                                DurationDay;                                              // 0x007C(0x0004)
	int                                                DurationHour;                                             // 0x0080(0x0004)
	int                                                DurationMinute;                                           // 0x0084(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowKillerInfoData
// 0x0020 (0x0054 - 0x0034)
struct FV2FellowKillerInfoData : public FContentInfoData
{
	int                                                Strength;                                                 // 0x0034(0x0004)
	int                                                Agility;                                                  // 0x0038(0x0004)
	int                                                Intelligence;                                             // 0x003C(0x0004)
	int                                                Wisdom;                                                   // 0x0040(0x0004)
	int                                                Cruel;                                                    // 0x0044(0x0004)
	int                                                Ability;                                                  // 0x0048(0x0004)
	int                                                Boldness;                                                 // 0x004C(0x0004)
	int                                                Concentration;                                            // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowOutlawInfoData
// 0x0020 (0x0054 - 0x0034)
struct FV2FellowOutlawInfoData : public FContentInfoData
{
	int                                                Strength;                                                 // 0x0034(0x0004)
	int                                                Agility;                                                  // 0x0038(0x0004)
	int                                                Intelligence;                                             // 0x003C(0x0004)
	int                                                Wisdom;                                                   // 0x0040(0x0004)
	int                                                Cruel;                                                    // 0x0044(0x0004)
	int                                                Ability;                                                  // 0x0048(0x0004)
	int                                                Boldness;                                                 // 0x004C(0x0004)
	int                                                Concentration;                                            // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowPenitentInfoData
// 0x0020 (0x0054 - 0x0034)
struct FV2FellowPenitentInfoData : public FContentInfoData
{
	int                                                Strength;                                                 // 0x0034(0x0004)
	int                                                Agility;                                                  // 0x0038(0x0004)
	int                                                Intelligence;                                             // 0x003C(0x0004)
	int                                                Wisdom;                                                   // 0x0040(0x0004)
	int                                                Cruel;                                                    // 0x0044(0x0004)
	int                                                Ability;                                                  // 0x0048(0x0004)
	int                                                Boldness;                                                 // 0x004C(0x0004)
	int                                                Concentration;                                            // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowVocationPoolData
// 0x0008
struct FV2FellowVocationPoolData
{
	TEnumAsByte<ECEFellowVocationType>                 VocationType;                                             // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Weight;                                                   // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowRaceVocationInfoData
// 0x0010 (0x0044 - 0x0034)
struct FV2FellowRaceVocationInfoData : public FContentInfoData
{
	TArray<struct FV2FellowVocationPoolData>           VocationList;                                             // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowShamanInfoData
// 0x0020 (0x0054 - 0x0034)
struct FV2FellowShamanInfoData : public FContentInfoData
{
	int                                                Strength;                                                 // 0x0034(0x0004)
	int                                                Agility;                                                  // 0x0038(0x0004)
	int                                                Intelligence;                                             // 0x003C(0x0004)
	int                                                Wisdom;                                                   // 0x0040(0x0004)
	int                                                Cruel;                                                    // 0x0044(0x0004)
	int                                                Ability;                                                  // 0x0048(0x0004)
	int                                                Boldness;                                                 // 0x004C(0x0004)
	int                                                Concentration;                                            // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowSkillGroupInfoData
// 0x0000 (0x0034 - 0x0034)
struct FV2FellowSkillGroupInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowSkillEffectData
// 0x000C
struct FFellowSkillEffectData
{
	TEnumAsByte<EBLFellowSkillEffectType>              SkillEffectType;                                          // 0x0000(0x0001)
	TEnumAsByte<ECEMissionType>                        MissionType;                                              // 0x0001(0x0001)
	TEnumAsByte<ECEParamChangeType>                    ParamChangeType;                                          // 0x0002(0x0001)
	TEnumAsByte<ECEFellowRaceType>                     FellowRaceType;                                           // 0x0003(0x0001)
	float                                              Ratio;                                                    // 0x0004(0x0004)
	int                                                DropTableCid;                                             // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowChangeParamData
// 0x0008
struct FFellowChangeParamData
{
	TEnumAsByte<ECEV2FellowParamType>                  FellowParamType;                                          // 0x0000(0x0001)
	TEnumAsByte<ECEParamChangeType>                    FellowParamChangeType;                                    // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	float                                              Amount;                                                   // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowSkillInfoData
// 0x002C (0x0060 - 0x0034)
struct FV2FellowSkillInfoData : public FContentInfoData
{
	TEnumAsByte<ECESkillGradeType>                     SkillGrade;                                               // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<struct FFellowSkillEffectData>              SkillEffectList;                                          // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FFellowChangeParamData>              FellowChangeParamList;                                    // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IconIndex;                                                // 0x0058(0x0004)
	int                                                SkillGroupCid;                                            // 0x005C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowSmithInfoData
// 0x0020 (0x0054 - 0x0034)
struct FV2FellowSmithInfoData : public FContentInfoData
{
	int                                                Strength;                                                 // 0x0034(0x0004)
	int                                                Agility;                                                  // 0x0038(0x0004)
	int                                                Intelligence;                                             // 0x003C(0x0004)
	int                                                Wisdom;                                                   // 0x0040(0x0004)
	int                                                Cruel;                                                    // 0x0044(0x0004)
	int                                                Ability;                                                  // 0x0048(0x0004)
	int                                                Boldness;                                                 // 0x004C(0x0004)
	int                                                Concentration;                                            // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowTacticianInfoData
// 0x0020 (0x0054 - 0x0034)
struct FV2FellowTacticianInfoData : public FContentInfoData
{
	int                                                Strength;                                                 // 0x0034(0x0004)
	int                                                Agility;                                                  // 0x0038(0x0004)
	int                                                Intelligence;                                             // 0x003C(0x0004)
	int                                                Wisdom;                                                   // 0x0040(0x0004)
	int                                                Cruel;                                                    // 0x0044(0x0004)
	int                                                Ability;                                                  // 0x0048(0x0004)
	int                                                Boldness;                                                 // 0x004C(0x0004)
	int                                                Concentration;                                            // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowWandererInfoData
// 0x0020 (0x0054 - 0x0034)
struct FV2FellowWandererInfoData : public FContentInfoData
{
	int                                                Strength;                                                 // 0x0034(0x0004)
	int                                                Agility;                                                  // 0x0038(0x0004)
	int                                                Intelligence;                                             // 0x003C(0x0004)
	int                                                Wisdom;                                                   // 0x0040(0x0004)
	int                                                Cruel;                                                    // 0x0044(0x0004)
	int                                                Ability;                                                  // 0x0048(0x0004)
	int                                                Boldness;                                                 // 0x004C(0x0004)
	int                                                Concentration;                                            // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2FellowWarriorInfoData
// 0x0020 (0x0054 - 0x0034)
struct FV2FellowWarriorInfoData : public FContentInfoData
{
	int                                                Strength;                                                 // 0x0034(0x0004)
	int                                                Agility;                                                  // 0x0038(0x0004)
	int                                                Intelligence;                                             // 0x003C(0x0004)
	int                                                Wisdom;                                                   // 0x0040(0x0004)
	int                                                Cruel;                                                    // 0x0044(0x0004)
	int                                                Ability;                                                  // 0x0048(0x0004)
	int                                                Boldness;                                                 // 0x004C(0x0004)
	int                                                Concentration;                                            // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2GatherLevelInfoData
// 0x0010 (0x0044 - 0x0034)
struct FV2GatherLevelInfoData : public FContentInfoData
{
	TEnumAsByte<ECEGatherCategoryType>                 GatherCategory;                                           // 0x0034(0x0001) (Transient)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                Level;                                                    // 0x0038(0x0004) (Transient)
	int                                                IconIndex;                                                // 0x003C(0x0004) (Transient)
	int                                                NeedExp;                                                  // 0x0040(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.HelpInfoData
// 0x0014 (0x0048 - 0x0034)
struct FHelpInfoData : public FContentInfoData
{
	unsigned char                                      ApplyBuild;                                               // 0x0034(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	struct FString                                     URL;                                                      // 0x0038(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2MissionConstInfoData
// 0x0028 (0x005C - 0x0034)
struct FV2MissionConstInfoData : public FContentInfoData
{
	int                                                ResetTime;                                                // 0x0034(0x0004)
	int                                                MissionAbleLevel;                                         // 0x0038(0x0004)
	int                                                MaxContractCount;                                         // 0x003C(0x0004)
	int                                                GreatSuccessExpRatio;                                     // 0x0040(0x0004)
	int                                                ActiveCodeName;                                           // 0x0044(0x0004)
	float                                              LeaderRatio;                                              // 0x0048(0x0004)
	float                                              MemberARatio;                                             // 0x004C(0x0004)
	float                                              MemberBRatio;                                             // 0x0050(0x0004)
	float                                              TimeRatioWhenTwo;                                         // 0x0054(0x0004)
	float                                              TimeRatioWhenThree;                                       // 0x0058(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2MissionDifficultyTabInfoData
// 0x0000 (0x0034 - 0x0034)
struct FV2MissionDifficultyTabInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2MissionInfoData
// 0x005C (0x0090 - 0x0034)
struct FV2MissionInfoData : public FContentInfoData
{
	TEnumAsByte<ECEV2MissionType>                      MissionType;                                              // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                MissionLevel;                                             // 0x0038(0x0004)
	float                                              SuccessChance;                                            // 0x003C(0x0004)
	float                                              GreatSuccessChance;                                       // 0x0040(0x0004)
	int                                                BaseTimeInMinute;                                         // 0x0044(0x0004)
	int                                                RewardExp;                                                // 0x0048(0x0004)
	float                                              ConsumeFatigue;                                           // 0x004C(0x0004)
	float                                              StrengthRate;                                             // 0x0050(0x0004)
	float                                              AgilitySuccewssRate;                                      // 0x0054(0x0004)
	float                                              IntelligenceRate;                                         // 0x0058(0x0004)
	float                                              WisdomRate;                                               // 0x005C(0x0004)
	float                                              CruelRate;                                                // 0x0060(0x0004)
	float                                              AbilityRate;                                              // 0x0064(0x0004)
	float                                              BoldnessRate;                                             // 0x0068(0x0004)
	float                                              ConcentrationRate;                                        // 0x006C(0x0004)
	TArray<struct FRewardItem>                         RewardItemList;                                           // 0x0070(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FRewardItem>                         GreatSuccessRewardItemList;                               // 0x0080(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2MissionNameInfoData
// 0x0014 (0x0048 - 0x0034)
struct FV2MissionNameInfoData : public FContentInfoData
{
	TEnumAsByte<ECEV2MissionType>                      MissionType;                                              // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<ECERealmType>>                  RealmList;                                                // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2MountConstInfoData
// 0x0020 (0x0054 - 0x0034)
struct FV2MountConstInfoData : public FContentInfoData
{
	int                                                MountUncommonMaxLevel;                                    // 0x0034(0x0004)
	int                                                MountRareMaxLevel;                                        // 0x0038(0x0004)
	int                                                MountEpicMaxLevel;                                        // 0x003C(0x0004)
	int                                                MountLegendMaxLevel;                                      // 0x0040(0x0004)
	int                                                MountFatigueTick;                                         // 0x0044(0x0004)
	struct FMPFGradeUpChanceInfo                       MaxGradeChanceMileage;                                    // 0x0048(0x000C)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2PetConstInfoData
// 0x0048 (0x007C - 0x0034)
struct FV2PetConstInfoData : public FContentInfoData
{
	int                                                PetUncommonMaxLevel;                                      // 0x0034(0x0004)
	int                                                PetRareMaxLevel;                                          // 0x0038(0x0004)
	int                                                PetEpicMaxLevel;                                          // 0x003C(0x0004)
	int                                                PetLegendMaxLevel;                                        // 0x0040(0x0004)
	float                                              PetDefaultPositionDegree;                                 // 0x0044(0x0004)
	float                                              PetDefaultPositionDistance;                               // 0x0048(0x0004)
	float                                              PetDefaultDirection;                                      // 0x004C(0x0004)
	float                                              PetDefaultAreaRadius;                                     // 0x0050(0x0004)
	float                                              MoveStartDistance;                                        // 0x0054(0x0004)
	float                                              CloseDistance;                                            // 0x0058(0x0004)
	float                                              CloseSpeed;                                               // 0x005C(0x0004)
	float                                              FarawayDistance;                                          // 0x0060(0x0004)
	float                                              FarawaySpeed;                                             // 0x0064(0x0004)
	float                                              MissingDistance;                                          // 0x0068(0x0004)
	int                                                PetFatigueTick;                                           // 0x006C(0x0004)
	struct FMPFGradeUpChanceInfo                       MaxGradeChanceMileage;                                    // 0x0070(0x000C)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2PetInfoData
// 0x0040 (0x0074 - 0x0034)
struct FV2PetInfoData : public FContentInfoData
{
	unsigned char                                      FosterAvailable;                                          // 0x0034(0x0001)
	unsigned char                                      FosterIngredientAvailable;                                // 0x0035(0x0001)
	unsigned char                                      ExtractionAvailable;                                      // 0x0036(0x0001)
	unsigned char                                      IsDefaultShow;                                            // 0x0037(0x0001)
	TArray<int>                                        PetCidList;                                               // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                PetLookCid;                                               // 0x0048(0x0004)
	int                                                PetLegendaryLookCid;                                      // 0x004C(0x0004)
	int                                                RareSkillPoolId;                                          // 0x0050(0x0004)
	int                                                EpicSkillPoolId;                                          // 0x0054(0x0004)
	int                                                LegendSkillPoolId;                                        // 0x0058(0x0004)
	int                                                UsableRank;                                               // 0x005C(0x0004)
	int                                                UsableLimitRank;                                          // 0x0060(0x0004)
	int                                                GradeUpCount;                                             // 0x0064(0x0004)
	int                                                DurationDay;                                              // 0x0068(0x0004)
	int                                                DurationHour;                                             // 0x006C(0x0004)
	int                                                DurationMinute;                                           // 0x0070(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2PetSkillGroupInfoData
// 0x0000 (0x0034 - 0x0034)
struct FV2PetSkillGroupInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PetChangeParamData
// 0x0008
struct FPetChangeParamData
{
	TEnumAsByte<ECEV2PetParamType>                     PetParamType;                                             // 0x0000(0x0001)
	TEnumAsByte<ECEParamChangeType>                    PetParamChangeType;                                       // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	float                                              Amount;                                                   // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.V2PetSkillInfoData
// 0x0030 (0x0064 - 0x0034)
struct FV2PetSkillInfoData : public FContentInfoData
{
	TEnumAsByte<ECESkillGradeType>                     SkillGrade;                                               // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<struct FPetChangeParamData>                 PetChangeParamList;                                       // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        AbnormalCidList;                                          // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SkillGroupCid;                                            // 0x0058(0x0004)
	int                                                PeriodicConsume;                                          // 0x005C(0x0004)
	int                                                IconIndex;                                                // 0x0060(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.VolumeChannelInfoData
// 0x0014 (0x0048 - 0x0034)
struct FVolumeChannelInfoData : public FContentInfoData
{
	TEnumAsByte<ECEPVPType>                            mPvpType;                                                 // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<int>                                        mContainingLocations;                                     // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.WaypointStringInfoData
// 0x0002 (0x0036 - 0x0034)
struct FWaypointStringInfoData : public FContentInfoData
{
	unsigned char                                      ApplyBuild;                                               // 0x0034(0x0001)
	TEnumAsByte<ECETransportType>                      transport_type;                                           // 0x0035(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.DivisionMapInfo
// 0x0020
struct FDivisionMapInfo
{
	struct FString                                     Division;                                                 // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MapPath;                                                  // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.WorldMapInfoData
// 0x0024 (0x0058 - 0x0034)
struct FWorldMapInfoData : public FContentInfoData
{
	TEnumAsByte<ECEWorldMapType>                       WorldMapType;                                             // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	struct FString                                     MapName;                                                  // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FDivisionMapInfo>                    DivisionToMap;                                            // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.PCInfo.ClientPCNormalAttackAnimInfo
// 0x0010
struct FClientPCNormalAttackAnimInfo
{
	unsigned char                                      ClassType;                                                // 0x0000(0x0001)
	unsigned char                                      EquipType;                                                // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                SequenceNumber;                                           // 0x0004(0x0004)
	float                                              HittingTime;                                              // 0x0008(0x0004)
	int                                                ApplyMoment;                                              // 0x000C(0x0004)
};

// ScriptStruct BLGame.PCInfo.ClientPCCreateInfo
// 0x0040
struct FClientPCCreateInfo
{
	TArray<struct FClientEquipItemInfo>                EquipItems;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        InvenItems;                                               // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        SkillList;                                                // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FDefaultPCSkillTree>                 DefaultSkillTreeList;                                     // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.PCInfo.ClientPCGrowthInfo
// 0x0018
struct FClientPCGrowthInfo
{
	int                                                Level;                                                    // 0x0000(0x0004)
	int                                                ExpToLevel;                                               // 0x0004(0x0004)
	int                                                OpenKeySkillDeckSlot;                                     // 0x0008(0x0004)
	int                                                OpenActiveSkillDeckSlot;                                  // 0x000C(0x0004)
	int                                                OpenPassiveSkillDeckSlot;                                 // 0x0010(0x0004)
	int                                                OpenQTESkillDeckSlot;                                     // 0x0014(0x0004)
};

// ScriptStruct BLGame.ContentInfoExtraDataToCook.PCInfoExtraDataCookedStructure
// 0x00A0
struct FPCInfoExtraDataCookedStructure
{
	TArray<int>                                        PCNormalAttackAnimInfoMapKeyArray;                        // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FClientPCNormalAttackAnimInfo>       PCNormalAttackAnimInfoMapValueArray;                      // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FPCInfoKey>                          PCCreateInfoMapKeyArray;                                  // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FClientPCCreateInfo>                 PCCreateInfoMapValueArray;                                // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        PCVoluntaryActionInfoMapKeyArray;                         // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FClientPCVoluntaryActionInfo>        PCVoluntaryActionInfoMapValueArray;                       // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        PCGrowthInfoMapKeyArray;                                  // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FClientPCGrowthInfo>                 PCGrowthInfoMapValueArray;                                // 0x0070(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECERaceType>>                   CreateRaceInfoMapKeyArray;                                // 0x0080(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FCreateRaceInfo>                     CreateRaceInfoMapValueArray;                              // 0x0090(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.SkillSwapInfo
// 0x0008
struct FSkillSwapInfo
{
	int                                                ActiveSkillCid;                                           // 0x0000(0x0004)
	int                                                SwapSkillCid;                                             // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLDef.SkillSwapInfoSet
// 0x0010
struct FSkillSwapInfoSet
{
	TArray<struct FSkillSwapInfo>                      SkillSwapInfoList;                                        // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.ClassSkillInfo
// 0x0014
struct FClassSkillInfo
{
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<int>                                        SkillList;                                                // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ContentInfoExtraDataToCook.SkillInfoExtraDataCookedStructure
// 0x0080
struct FSkillInfoExtraDataCookedStructure
{
	TArray<unsigned char>                              ClassArray;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        SkillIDArray;                                             // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        SwapSkillTableKeyArray;                                   // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        SwapSkillTableValueArray;                                 // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        ConvertSkillTableKeyArray;                                // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FSkillSwapInfoSet>                   ConvertSkillTableValueArray;                              // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<unsigned char>                              ClassSkillInfoTableKeyArray;                              // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FClassSkillInfo>                     ClassSkillInfoTableValueArray;                            // 0x0070(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ContentInfoExtraDataToCook.QuestInfoExtraDataCookedStructure
// 0x0040
struct FQuestInfoExtraDataCookedStructure
{
	TArray<int>                                        StoryInfoMapKeyArray;                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestStoryInfoData>                 StoryInfoMapValueArray;                                   // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        RaceStoryInfoMapKeyArray;                                 // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestRaceStoryInfoData>             RaceStoryInfoMapValueArray;                               // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.AssetInfo
// 0x002C
struct FAssetInfo
{
	class UClass*                                      mClass;                                                   // 0x0000(0x0008)
	int                                                mKey;                                                     // 0x0008(0x0004) (Edit)
	struct FString                                     mPath;                                                    // 0x000C(0x0010) (Edit, NeedCtorLink)
	struct FString                                     mSeekFreePackage;                                         // 0x001C(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.BodyInfo.MountRidingInfo
// 0x0028
struct FMountRidingInfo
{
	TEnumAsByte<EMountVehicleType>                     RidingType;                                               // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<class UAnimSet*>                            RidingAnimSets;                                           // 0x0004(0x0010) (Edit, NeedCtorLink)
	TEnumAsByte<EMountRidePosition>                    RidingPosition;                                           // 0x0014(0x0001) (Edit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	struct FName                                       SaddleSocketName;                                         // 0x0018(0x0008) (Edit)
	struct FName                                       ReleaseSeqName;                                           // 0x0020(0x0008) (Edit, EditConst)
};

// ScriptStruct BLGame.BLPickingAsset.BLPickingBox
// 0x0007 (0x0020 - 0x0019)
struct FBLPickingBox : public FBox
{
	unsigned char                                      UnknownData00[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	struct FColor                                      Colour;                                                   // 0x001C(0x0004) (Transient)
};

// ScriptStruct BLGame.BLPickingAsset.BLPickingGeom
// 0x005C
struct FBLPickingGeom
{
	struct FName                                       BoneName;                                                 // 0x0000(0x0008)
	struct FBoxSphereBounds                            Bounds;                                                   // 0x0008(0x001C)
	TArray<struct FVector>                             Vertices;                                                 // 0x0024(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<int>                                        Indices;                                                  // 0x0034(0x0010) (Transient, AlwaysInit, NeedCtorLink)
	TArray<struct FBLPickingBox>                       SplitBox;                                                 // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	struct FColor                                      Colour;                                                   // 0x0054(0x0004) (Transient)
	unsigned long                                      bPicked : 1;                                              // 0x0058(0x0004) (Transient)
};

// ScriptStruct BLGame.CachedNPCSpawnDataAsset.NPCSpawnData
// 0x0014
struct FNPCSpawnData
{
	int                                                WorldID;                                                  // 0x0000(0x0004) (Edit)
	TArray<int>                                        NPCIDs;                                                   // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.CustomizingParamData
// 0x001C
struct FCustomizingParamData
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0000(0x0001)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	float                                              Min;                                                      // 0x0004(0x0004) (Edit)
	float                                              Max;                                                      // 0x0008(0x0004) (Edit)
	float                                              Default;                                                  // 0x000C(0x0004) (Edit)
	int                                                RawMin;                                                   // 0x0010(0x0004)
	int                                                RawMax;                                                   // 0x0014(0x0004)
	int                                                RawDefault;                                               // 0x0018(0x0004)
};

// ScriptStruct BLGame.ABLDef.DialogTalkInfo
// 0x0010
struct FDialogTalkInfo
{
	class UAkEvent*                                    TalkSound;                                                // 0x0000(0x0008) (Edit)
	struct FName                                       TalkAnimSeq;                                              // 0x0008(0x0008) (Edit)
};

// ScriptStruct BLGame.PawnAsset.BLEquipItem
// 0x000C
struct FBLEquipItem
{
	TEnumAsByte<EEquipmentDisplaySlotType>             PartID;                                                   // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UBLEquipmentItemInfo*                        Item;                                                     // 0x0004(0x0008) (Edit)
};

// ScriptStruct BLGame.NPCAsset.NPCConditionInteraction
// 0x0040
struct FNPCConditionInteraction
{
	struct FString                                     ConditionInteractionName;                                 // 0x0000(0x0010) (Edit, NeedCtorLink)
	int                                                ConditionMonologID;                                       // 0x0010(0x0004) (Edit)
	struct FName                                       ConditionAnimSeqName;                                     // 0x0014(0x0008) (Edit)
	int                                                Priority;                                                 // 0x001C(0x0004) (Edit)
	TArray<TEnumAsByte<ECERaceType>>                   RaceCondition;                                            // 0x0020(0x0010) (Edit, NeedCtorLink)
	TArray<TEnumAsByte<ECEClassType>>                  ClassCondition;                                           // 0x0030(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.PCAsset.MorphTargetOverrideInfo
// 0x0014
struct FMorphTargetOverrideInfo
{
	struct FString                                     MorphTargetOverrideName;                                  // 0x0000(0x0010) (Edit, NeedCtorLink)
	float                                              MorphTargetOverrideValue;                                 // 0x0010(0x0004) (Edit)
};

// ScriptStruct BLGame.PCAsset.AppearanceOverrideInfo
// 0x002C
struct FAppearanceOverrideInfo
{
	TEnumAsByte<ECEAppearanceType>                     AppearanceType;                                           // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	class UMaterialInterface*                          MaterialOverrideFace;                                     // 0x0004(0x0008) (Edit)
	class UMaterialInterface*                          MaterialOverrideEye;                                      // 0x000C(0x0008) (Edit)
	class UMaterialInterface*                          MaterialOverrideBody;                                     // 0x0014(0x0008) (Edit)
	TArray<struct FMorphTargetOverrideInfo>            MorphTargetOverrideList;                                  // 0x001C(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.PCAsset.NewSkillType
// 0x0014
struct FNewSkillType
{
	int                                                SkillID;                                                  // 0x0000(0x0004) (Edit)
	class UClass*                                      SpecialMoveType;                                          // 0x0004(0x0008) (Edit)
	class UBSM_BasicMoveParameter*                     SkillParameter;                                           // 0x000C(0x0008) (Edit, NoClear, EditInline)
};

// ScriptStruct BLGame.PCAsset.NormalAttackBroadway
// 0x0014
struct FNormalAttackBroadway
{
	TEnumAsByte<ECENormalAttackEquipType>              EquipType;                                                // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<class UBroadwayInfo*>                       Broadways;                                                // 0x0004(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.PropAsset.SoundPlayTriger
// 0x0008
struct FSoundPlayTriger
{
	class UAkEvent*                                    SoundEvent;                                               // 0x0000(0x0008) (Edit)
};

// ScriptStruct BLGame.PropAsset.BLPropPossibilityTrigger
// 0x00A4
struct FBLPropPossibilityTrigger
{
	TEnumAsByte<EBLPropPossibilityState>               State;                                                    // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<struct FParticleSystemSpawnTriger>          SpawnParticles;                                           // 0x0004(0x0010) (Edit, NeedCtorLink)
	TArray<TEnumAsByte<EBLPropPossibilityState>>       DespawnTargetState;                                       // 0x0014(0x0010) (Edit, NeedCtorLink)
	struct FStaticMeshChangeTrigger                    ChangeStaticMesh;                                         // 0x0024(0x0028) (Edit)
	struct FSkeletalMeshChangeTrigger                  ChangeSkeletalMesh;                                       // 0x004C(0x003C) (Edit)
	struct FSpawnDecalTrigger                          SpawnDecal;                                               // 0x0088(0x0014) (Edit)
	struct FSoundPlayTriger                            PlaySound;                                                // 0x009C(0x0008) (Edit)
};

// ScriptStruct BLGame.PropAsset.BLPropInteractionTrigger
// 0x00A4
struct FBLPropInteractionTrigger
{
	TEnumAsByte<EBLPropInteractionState>               State;                                                    // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<struct FParticleSystemSpawnTriger>          SpawnParticles;                                           // 0x0004(0x0010) (Edit, NeedCtorLink)
	TArray<TEnumAsByte<EBLPropInteractionState>>       DespawnTargetState;                                       // 0x0014(0x0010) (Edit, NeedCtorLink)
	struct FStaticMeshChangeTrigger                    ChangeStaticMesh;                                         // 0x0024(0x0028) (Edit)
	struct FSkeletalMeshChangeTrigger                  ChangeSkeletalMesh;                                       // 0x004C(0x003C) (Edit)
	struct FSpawnDecalTrigger                          SpawnDecal;                                               // 0x0088(0x0014) (Edit)
	struct FSoundPlayTriger                            PlaySound;                                                // 0x009C(0x0008) (Edit)
};

// ScriptStruct BLGame.PropAsset.PropEffectData_ChangeStaticMesh
// 0x0024
struct FPropEffectData_ChangeStaticMesh
{
	class UStaticMesh*                                 StaticMesh;                                               // 0x0000(0x0008) (Edit)
	struct FPropAdjustData                             AdjustData;                                               // 0x0008(0x001C) (Edit)
};

// ScriptStruct BLGame.PropAsset.PropEffectData_ChangeSkeletalMesh
// 0x0024
struct FPropEffectData_ChangeSkeletalMesh
{
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0000(0x0008) (Edit)
	struct FPropAdjustData                             AdjustData;                                               // 0x0008(0x001C) (Edit)
};

// ScriptStruct BLGame.PropAsset.PropEffectData_PlayAnimation
// 0x0014
struct FPropEffectData_PlayAnimation
{
	class UAnimSet*                                    AnimSet;                                                  // 0x0000(0x0008) (Edit)
	struct FName                                       SeqName;                                                  // 0x0008(0x0008) (Edit)
	unsigned long                                      bLooping : 1;                                             // 0x0010(0x0004) (Edit)
};

// ScriptStruct BLGame.PropAsset.PropEffectData_PlaySound
// 0x0008
struct FPropEffectData_PlaySound
{
	class UAkEvent*                                    SoundEvent;                                               // 0x0000(0x0008) (Edit)
};

// ScriptStruct BLGame.PropAsset.PropEffectData_SpawnDecal
// 0x0010
struct FPropEffectData_SpawnDecal
{
	float                                              Width;                                                    // 0x0000(0x0004) (Edit)
	float                                              Height;                                                   // 0x0004(0x0004) (Edit)
	class UMaterialInstanceTimeVarying*                MITV;                                                     // 0x0008(0x0008) (Edit)
};

// ScriptStruct BLGame.PropAsset.PropEffectDataSet_InState
// 0x0088
struct FPropEffectDataSet_InState
{
	TEnumAsByte<EPropEffectTriggerType_InState>        TriggerType;                                              // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FPropEffectData_ChangeStaticMesh            ChangeStaticMeshData;                                     // 0x0004(0x0024) (Edit)
	struct FPropEffectData_ChangeSkeletalMesh          ChangeSkeletalMeshData;                                   // 0x0028(0x0024) (Edit)
	struct FPropEffectData_PlayAnimation               PlayAnimationData;                                        // 0x004C(0x0014) (Edit)
	TArray<struct FPropEffectData_SpawnParticle>       SpawnParticleData;                                        // 0x0060(0x0010) (Edit, NeedCtorLink)
	struct FPropEffectData_PlaySound                   PlaySoundData;                                            // 0x0070(0x0008) (Edit)
	struct FPropEffectData_SpawnDecal                  SpawnDecalData;                                           // 0x0078(0x0010) (Edit)
};

// ScriptStruct BLGame.PropAsset.PropEffectDataSet_OnStart
// 0x0030
struct FPropEffectDataSet_OnStart
{
	TEnumAsByte<EPropEffectTriggerType_OnStart>        TriggerType;                                              // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FPropEffectData_PlayAnimation               PlayAnimationData;                                        // 0x0004(0x0014) (Edit)
	TArray<struct FPropEffectData_SpawnParticle>       SpawnParticleData;                                        // 0x0018(0x0010) (Edit, NeedCtorLink)
	struct FPropEffectData_PlaySound                   PlaySoundData;                                            // 0x0028(0x0008) (Edit)
};

// ScriptStruct BLGame.TrapAsset.TrapSoundPlayTriger
// 0x0008
struct FTrapSoundPlayTriger
{
	class UAkEvent*                                    SoundEvent;                                               // 0x0000(0x0008) (Edit)
};

// ScriptStruct BLGame.TrapAsset.BLPropEffectTrigger
// 0x00A4
struct FBLPropEffectTrigger
{
	TEnumAsByte<EBLTrapEffectPhase>                    Phase;                                                    // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<struct FTrapParticleTrigger>                SpawnParticles;                                           // 0x0004(0x0010) (Edit, NeedCtorLink)
	TArray<TEnumAsByte<EBLTrapEffectPhase>>            DespawnParticleTargetPhase;                               // 0x0014(0x0010) (Edit, NeedCtorLink)
	struct FTrapStaticMeshChangeTrigger                ChangeStaticMesh;                                         // 0x0024(0x0028) (Edit)
	struct FTrapSkeletalMeshChangeTrigger              ChangeSkeletalMesh;                                       // 0x004C(0x003C) (Edit)
	struct FTrapSpawnDecalTrigger                      SpawnDecal;                                               // 0x0088(0x0014) (Edit)
	struct FTrapSoundPlayTriger                        PlaySound;                                                // 0x009C(0x0008) (Edit)
};

// ScriptStruct BLGame.ABLDef.QuestTerritoryData
// 0x00C8
struct FQuestTerritoryData
{
	int                                                TerritoryCid;                                             // 0x0000(0x0004)
	struct FString                                     TerritoryName;                                            // 0x0004(0x0010) (NeedCtorLink)
	struct FBoxSphereBounds                            Bounds;                                                   // 0x0014(0x001C)
	struct FMatrix                                     LocalToWorld;                                             // 0x0030(0x0040)
	struct FVector                                     Scale;                                                    // 0x0070(0x000C)
	struct FKAggregateGeom                             BrushAggGeom;                                             // 0x007C(0x004C) (NeedCtorLink)
};

// ScriptStruct BLGame.SkillAsset.SkillDecal_Circular
// 0x0038
struct FSkillDecal_Circular
{
	float                                              Arc_Angle;                                                // 0x0000(0x0004) (Edit)
	struct FLinearColor                                Fill_Color;                                               // 0x0004(0x0010) (Edit)
	struct FLinearColor                                Line_Color;                                               // 0x0014(0x0010) (Edit)
	float                                              Line_Thickness;                                           // 0x0024(0x0004) (Edit)
	float                                              Radius_Max;                                               // 0x0028(0x0004) (Edit)
	float                                              Radius_Min;                                               // 0x002C(0x0004) (Edit)
	float                                              Offset;                                                   // 0x0030(0x0004) (Edit)
	float                                              Rotation;                                                 // 0x0034(0x0004) (Edit)
};

// ScriptStruct BLGame.SkillAsset.SkillDecal_Rectangle
// 0x0034
struct FSkillDecal_Rectangle
{
	struct FLinearColor                                Fill_Color;                                               // 0x0000(0x0010) (Edit)
	struct FLinearColor                                Line_Color;                                               // 0x0010(0x0010) (Edit)
	float                                              Line_Thickness;                                           // 0x0020(0x0004) (Edit)
	float                                              Length_X;                                                 // 0x0024(0x0004) (Edit)
	float                                              Length_Y;                                                 // 0x0028(0x0004) (Edit)
	float                                              Offset;                                                   // 0x002C(0x0004) (Edit)
	float                                              Rotation;                                                 // 0x0030(0x0004) (Edit)
};

// ScriptStruct BLGame.SocialActionAsset.SocialActionClassifiedBroadway
// 0x0018
struct FSocialActionClassifiedBroadway
{
	class UBodyInfo*                                   BodyInfo;                                                 // 0x0000(0x0008) (Edit)
	struct FName                                       BodyInfoName;                                             // 0x0008(0x0008)
	class UBroadwayInfo*                               Broadway;                                                 // 0x0010(0x0008) (Edit)
};

// ScriptStruct BLGame.SystemMessageAsset.SystemMessageSoundSet
// 0x0018
struct FSystemMessageSoundSet
{
	class UBodyInfo*                                   BodyInfo;                                                 // 0x0000(0x0008) (Edit)
	struct FName                                       BodyInfoName;                                             // 0x0008(0x0008)
	class UAkEvent*                                    Sound;                                                    // 0x0010(0x0008) (Edit)
};

// ScriptStruct BLGame.VoiceAsset.VoiceItem
// 0x0010
struct FVoiceItem
{
	struct FName                                       KeyName;                                                  // 0x0000(0x0008) (Edit)
	class UAkEvent*                                    Resource;                                                 // 0x0008(0x0008) (Edit)
};

// ScriptStruct BLGame.VoluntaryActionAsset.VoluntaryClassifiedBroadway
// 0x001C
struct FVoluntaryClassifiedBroadway
{
	class UBodyInfo*                                   BodyInfo;                                                 // 0x0000(0x0008) (Edit)
	struct FName                                       BodyInfoName;                                             // 0x0008(0x0008)
	TEnumAsByte<ECEItemEquipCategory>                  MainItem;                                                 // 0x0010(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	class UBroadwayInfo*                               Broadway;                                                 // 0x0014(0x0008) (Edit)
};

// ScriptStruct BLGame.CreditPlaylistAsset.BLCreditPlaylistItem
// 0x0024
struct FBLCreditPlaylistItem
{
	struct FString                                     MusicTitle;                                               // 0x0000(0x0010) (Edit, NeedCtorLink)
	int                                                MusicTimer;                                               // 0x0010(0x0004) (Edit)
	class UAkEvent*                                    MusicAkEvent;                                             // 0x0014(0x0008) (Edit)
	class UTexture2D*                                  ThumbnailTexture;                                         // 0x001C(0x0008) (Edit)
};

// ScriptStruct BLGame.ABLDef.UIInfoKey
// 0x0008
struct FUIInfoKey
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0000(0x0001)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0001(0x0001)
	TEnumAsByte<ECEAppearanceType>                     AppearanceType;                                           // 0x0002(0x0001)
	TEnumAsByte<ECECustomizeType>                      CMT;                                                      // 0x0003(0x0001)
	int                                                Index;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLDef.CustomizingPresetData
// 0x0014
struct FCustomizingPresetData
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0000(0x0001) (Edit)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0001(0x0001) (Edit)
	TEnumAsByte<ECEAppearanceType>                     AppearanceType;                                           // 0x0002(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	TArray<struct FCustomizeUISettingInfo>             UISettingInfoList;                                        // 0x0004(0x0010) (Edit, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLTypes.HairPartUnit
// 0x000A
struct FHairPartUnit
{
	class USkeletalMesh*                               SkeletalMesh;                                             // 0x0000(0x0008) (Edit)
	TEnumAsByte<EEquipmentItemType>                    MatchItemType;                                            // 0x0008(0x0001)
	TEnumAsByte<EEquipmentHelmetType>                  MatchHelmetType;                                          // 0x0009(0x0001) (Edit)
};

// ScriptStruct BLGame.LoadingMessageAsset.BLLoadingMessage
// 0x001C
struct FBLLoadingMessage
{
	int                                                LevelLowerLimit;                                          // 0x0000(0x0004) (Edit)
	int                                                LevelUpperLimit;                                          // 0x0004(0x0004) (Edit)
	TEnumAsByte<ELoadingMessageRaceType>               RaceType;                                                 // 0x0008(0x0001) (Edit)
	TEnumAsByte<ELoadingMessageClassType>              ClassType;                                                // 0x0009(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x000A(0x0002) MISSED OFFSET
	TArray<struct FString>                             GameCodeNames;                                            // 0x000C(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.LoadingMessageAsset.BLDungeonLoadingMessage
// 0x0038
struct FBLDungeonLoadingMessage
{
	struct FString                                     InstantDungeonCodeName;                                   // 0x0000(0x0010) (Edit, NeedCtorLink)
	class UTexture*                                    DungeonTexture;                                           // 0x0010(0x0008) (Edit)
	TArray<struct FString>                             GameCodeNames;                                            // 0x0018(0x0010) (Edit, NeedCtorLink)
	struct FString                                     DungeonTexturePath;                                       // 0x0028(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.BLPlayerPostProcessController.MaterialEffectPlayInfo
// 0x0020
struct FMaterialEffectPlayInfo
{
	class UMaterialInstance*                           MI;                                                       // 0x0000(0x0008) (Transient)
	struct FName                                       EffectName;                                               // 0x0008(0x0008) (Transient)
	struct FName                                       SetterName;                                               // 0x0010(0x0008) (Transient)
	float                                              Duration;                                                 // 0x0018(0x0004) (Transient)
	float                                              PlayTime;                                                 // 0x001C(0x0004) (Transient)
};

// ScriptStruct BLGame.BLNetHandlerBase.DoorCacheData
// 0x002C
struct FDoorCacheData
{
	int                                                Sid;                                                      // 0x0000(0x0004)
	int                                                Cid;                                                      // 0x0004(0x0004)
	TEnumAsByte<ECEDoorInteractType>                   DoorType;                                                 // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	struct FVector                                     Location;                                                 // 0x000C(0x000C)
	struct FString                                     DoorName;                                                 // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                DoorState;                                                // 0x0028(0x0004)
};

// ScriptStruct BLGame.BLPartyEffectManager.PartyEffectSettingInfo
// 0x0008
struct FPartyEffectSettingInfo
{
	int                                                CurAppliedPartyEffectCid;                                 // 0x0000(0x0004)
	int                                                SelectedPartyEffectCid;                                   // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLPartyEffectManager.AppliedPartyEffectInfo
// 0x0014
struct FAppliedPartyEffectInfo
{
	unsigned long                                      IsApplyButtonState : 1;                                   // 0x0000(0x0004)
	unsigned long                                      IsActiveState : 1;                                        // 0x0000(0x0004)
	TArray<struct FPartyEffectSettingInfo>             CategorySettingInfo;                                      // 0x0004(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.DungeonData
// 0x001C
struct FDungeonData
{
	TEnumAsByte<EDungeonType>                          DungeonType;                                              // 0x0000(0x0001)
	TEnumAsByte<ECEResetTimeType>                      ResetType;                                                // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                DungeonCid;                                               // 0x0004(0x0004)
	int                                                DungeonRequiredLevel;                                     // 0x0008(0x0004)
	int                                                CurrentUsedCount;                                         // 0x000C(0x0004)
	int                                                MaxAvailableCount;                                        // 0x0010(0x0004)
	int                                                AdditionalUsedCount;                                      // 0x0014(0x0004)
	int                                                AdditionalMaxCount;                                       // 0x0018(0x0004)
};

// ScriptStruct BLGame.OrderManager.OrderDailyComplateData
// 0x0020
struct FOrderDailyComplateData
{
	int                                                COUNT;                                                    // 0x0000(0x0004)
	int                                                MaxCount;                                                 // 0x0004(0x0004)
	TEnumAsByte<EOrderStateType>                       OrderState;                                               // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	int                                                RewardCID;                                                // 0x000C(0x0004)
	TArray<struct FRewardItemData>                     RewardData;                                               // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.OrderManager.OrderWeeklyData
// 0x0020
struct FOrderWeeklyData
{
	int                                                COUNT;                                                    // 0x0000(0x0004)
	int                                                MaxCount;                                                 // 0x0004(0x0004)
	TEnumAsByte<EOrderStateType>                       OrderState;                                               // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	int                                                RewardCID;                                                // 0x000C(0x0004)
	TArray<struct FRewardItemData>                     RewardData;                                               // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.MonsterBookElement
// 0x0034
struct FMonsterBookElement
{
	struct FVector                                     Location;                                                 // 0x0000(0x000C)
	struct FRotator                                    Rotation;                                                 // 0x000C(0x000C)
	struct FString                                     FloorGroupName;                                           // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Floor;                                                    // 0x0028(0x0004)
	int                                                MonsterBookID;                                            // 0x002C(0x0004)
	int                                                WorldMapCId;                                              // 0x0030(0x0004)
};

// ScriptStruct BLGame.ABLDef.MonsterBookArea
// 0x000C (0x0040 - 0x0034)
struct FMonsterBookArea : public FMonsterBookElement
{
	float                                              Angle;                                                    // 0x0034(0x0004)
	float                                              Radius;                                                   // 0x0038(0x0004)
	float                                              Ratio;                                                    // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLDef.AreaElementInfo
// 0x00C4
struct FAreaElementInfo
{
	int                                                AreaCID;                                                  // 0x0000(0x0004)
	TEnumAsByte<EQuestAreaType>                        AreaType;                                                 // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	int                                                QuestType;                                                // 0x0008(0x0004)
	int                                                QuestObjectiveIndex;                                      // 0x000C(0x0004)
	struct FString                                     QuestTitle;                                               // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     QuestSummary;                                             // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              MinimumDiameter;                                          // 0x0030(0x0004)
	int                                                AlertOrder;                                               // 0x0034(0x0004)
	struct FQuestArea                                  QuestArea;                                                // 0x0038(0x004C) (NeedCtorLink)
	struct FMonsterBookArea                            MonsterBookArea;                                          // 0x0084(0x0040) (NeedCtorLink)
};

// ScriptStruct BLGame.QuestJournalManager.StoryExtension
// 0x0020
struct FStoryExtension
{
	struct FString                                     CharacterName;                                            // 0x0000(0x0010) (NeedCtorLink)
	TArray<int>                                        StoryExtensionIDs;                                        // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.QuestJournalManager.EpisodeExtension
// 0x0020
struct FEpisodeExtension
{
	struct FString                                     CharacterName;                                            // 0x0000(0x0010) (NeedCtorLink)
	TArray<int>                                        LocationExtensionIDs;                                     // 0x0010(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.QuestJournalManager.LocationEpisodeQuestInfo
// 0x002C
struct FLocationEpisodeQuestInfo
{
	int                                                LocationID;                                               // 0x0000(0x0004)
	struct FString                                     LocationName;                                             // 0x0004(0x0010) (NeedCtorLink)
	unsigned long                                      extension : 1;                                            // 0x0014(0x0004)
	int                                                Primary;                                                  // 0x0018(0x0004)
	TArray<int>                                        QuestIDs;                                                 // 0x001C(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.QuestManager.QuestSortData
// 0x0008
struct FQuestSortData
{
	int                                                Score;                                                    // 0x0000(0x0004)
	int                                                QuestCid;                                                 // 0x0004(0x0004)
};

// ScriptStruct BLGame.QuestMonsterBook.QuestBookstageProgress
// 0x0008
struct FQuestBookstageProgress
{
	int                                                TotalCount;                                               // 0x0000(0x0004)
	int                                                COUNT;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.QuestMonsterBook.QuestBookstage
// 0x0014
struct FQuestBookstage
{
	TArray<struct FQuestBookstageProgress>             Progress;                                                 // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      RewardAvailable : 1;                                      // 0x0010(0x0004)
	unsigned long                                      RewardComplete : 1;                                       // 0x0010(0x0004)
};

// ScriptStruct BLGame.QuestMonsterBook.QuestMonsterBookData
// 0x0034
struct FQuestMonsterBookData
{
	int                                                monsterBookCId;                                           // 0x0000(0x0004)
	int                                                SymbolMonsterCid;                                         // 0x0004(0x0004)
	int                                                CurrentHuntingStageIndex;                                 // 0x0008(0x0004)
	TArray<struct FQuestBookstage>                     Stages;                                                   // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FMonsterBookArea>                    MonsterAreaInfo;                                          // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      bRepeatable : 1;                                          // 0x002C(0x0004)
	unsigned long                                      bIsAvailableRepeat : 1;                                   // 0x002C(0x0004)
	unsigned long                                      bRepeatStage : 1;                                         // 0x002C(0x0004)
	int                                                ConsumeActingPoint;                                       // 0x0030(0x0004)
};

// ScriptStruct BLGame.QuestMonsterBook.QuestMonsterBookLocation
// 0x001C
struct FQuestMonsterBookLocation
{
	int                                                LocationID;                                               // 0x0000(0x0004)
	unsigned long                                      ExtendBook : 1;                                           // 0x0004(0x0004)
	int                                                SortPriority;                                             // 0x0008(0x0004)
	TArray<struct FQuestMonsterBookData>               Books;                                                    // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.QuestMonsterBook.QuestMonsterBookTamingSkill
// 0x000C
struct FQuestMonsterBookTamingSkill
{
	int                                                IconIndex;                                                // 0x0000(0x0004)
	int                                                SkillCid;                                                 // 0x0004(0x0004)
	int                                                TamingType;                                               // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLWorldMapNPCManager.NPCFuncInfo
// 0x0060
struct FNPCFuncInfo
{
	int                                                NPC_ServerID;                                             // 0x0000(0x0004)
	int                                                NPC_Cid;                                                  // 0x0004(0x0004)
	int                                                WorldMapCId;                                              // 0x0008(0x0004)
	struct FString                                     NpcName;                                                  // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<ECENPCCategory>                        NPCCategory;                                              // 0x001C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
	struct FString                                     NPCFuncName;                                              // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     FieldCodeName;                                            // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	struct FVector                                     Location;                                                 // 0x0040(0x000C)
	TArray<struct FVector>                             LocationList;                                             // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                AdditionalInfo;                                           // 0x005C(0x0004)
};

// ScriptStruct BLGame.BLChannel.ChannelInfo
// 0x0014
struct FChannelInfo
{
	int                                                channelId;                                                // 0x0000(0x0004)
	int                                                PlayerCount;                                              // 0x0004(0x0004)
	int                                                PartyMemberCount;                                         // 0x0008(0x0004)
	int                                                JamLevel;                                                 // 0x000C(0x0004)
	unsigned long                                      IsPvPChannel : 1;                                         // 0x0010(0x0004)
};

// ScriptStruct BLGame.BLWorldMapPropManager.PropFuncInfo
// 0x0024
struct FPropFuncInfo
{
	int                                                Prop_Cid;                                                 // 0x0000(0x0004)
	TEnumAsByte<ECEPropInteractType>                   PropInteractType;                                         // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	struct FString                                     PropName;                                                 // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	struct FVector                                     Location;                                                 // 0x0018(0x000C)
};

// ScriptStruct BLGame.WorldMapManager.WorldMapLocationInfo
// 0x0014
struct FWorldMapLocationInfo
{
	struct FString                                     LocationName;                                             // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Cid;                                                      // 0x0010(0x0004)
};

// ScriptStruct BLGame.WorldMapManager.WorldMapScaleFactor
// 0x000D
struct FWorldMapScaleFactor
{
	float                                              WorldFactor;                                              // 0x0000(0x0004)
	float                                              FixedIconScale;                                           // 0x0004(0x0004)
	float                                              IconFactor;                                               // 0x0008(0x0004)
	TEnumAsByte<ECELocationLevelType>                  LocationFactor;                                           // 0x000C(0x0001)
};

// ScriptStruct BLGame.WorldMapManager.ZoneTextFactor
// 0x0010
struct FZoneTextFactor
{
	int                                                ZoomGrade;                                                // 0x0000(0x0004)
	int                                                Font;                                                     // 0x0004(0x0004)
	unsigned char                                      FontAlpha;                                                // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	int                                                COGuildMarkSizePercent;                                   // 0x000C(0x0004)
};

// ScriptStruct BLGame.WorldMapManager.EnvironmentCacheDataForWorldMapType
// 0x0020
struct FEnvironmentCacheDataForWorldMapType
{
	TArray<class UObject*>                             DisabledHeightFogs;                                       // 0x0000(0x0010) (Transient, NeedCtorLink)
	TArray<class UObject*>                             DisabledExpHeightFogs;                                    // 0x0010(0x0010) (Transient, NeedCtorLink)
};

// ScriptStruct BLGame.WorldMapManager.PendingCameraZoom
// 0x0004
struct FPendingCameraZoom
{
	unsigned long                                      bCursor : 1;                                              // 0x0000(0x0004)
	unsigned long                                      bZoomIn : 1;                                              // 0x0000(0x0004)
};

// ScriptStruct BLGame.ActionMappingManager.CoolDownInfo
// 0x000C
struct FCoolDownInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	float                                              RemainTime;                                               // 0x0004(0x0004)
	float                                              MaxTime;                                                  // 0x0008(0x0004)
};

// ScriptStruct BLGame.ActionMappingManager.StackInfo
// 0x0008
struct FStackInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                StackCount;                                               // 0x0004(0x0004)
};

// ScriptStruct BLGame.MainActionBar.ActionBarSkillInfo
// 0x00E4
struct FActionBarSkillInfo
{
	int                                                SkillCid;                                                 // 0x0000(0x0004)
	TEnumAsByte<ECERiotControlStateType>               InvokableTargetRCStateType;                               // 0x0004(0x0001)
	TEnumAsByte<ECERiotControlStateType>               InvokableCasterRCStateType;                               // 0x0005(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0006(0x0002) MISSED OFFSET
	TArray<struct FInvokableElementInfo>               InvokableElements;                                        // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FInvokableKillHitInfo>               InvokableKillHitInfos;                                    // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FInvokableHitInfo>                   InvokableHitInfos;                                        // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FInvokableTakeHitInfo>               InvokableTakeHitInfos;                                    // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        InvokableTargetAbnormalStatusGroups;                      // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FSkillCostInfo>                      CostsForFiring;                                           // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FSkillCostInfo>                      CostsForLaunch;                                           // 0x0068(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECEEquipSlotType>>              InvokableItemEquipSlotTypes;                              // 0x0078(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        RestrictableAbnormalStatuses;                             // 0x0088(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              FiringTime;                                               // 0x0098(0x0004)
	unsigned long                                      bUsableInCombat : 1;                                      // 0x009C(0x0004)
	float                                              CoolDownRemainTime;                                       // 0x00A0(0x0004)
	float                                              CoolDownMaxTime;                                          // 0x00A4(0x0004)
	unsigned long                                      bApplyGCD : 1;                                            // 0x00A8(0x0004)
	TEnumAsByte<EActionBarCoolDownType>                CoolDownType;                                             // 0x00AC(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x00AD(0x0003) MISSED OFFSET
	float                                              StackChargeTime;                                          // 0x00B0(0x0004)
	float                                              StackChargeMaxTime;                                       // 0x00B4(0x0004)
	int                                                StackCount;                                               // 0x00B8(0x0004)
	TEnumAsByte<ECEAttackRangeCategory>                DistanceType;                                             // 0x00BC(0x0001)
	TEnumAsByte<ECEDamageType>                         DamageType;                                               // 0x00BD(0x0001)
	unsigned char                                      UnknownData02[0x2];                                       // 0x00BE(0x0002) MISSED OFFSET
	float                                              InvokableKillHitRemainTime;                               // 0x00C0(0x0004)
	float                                              InvokableHitRemainTime;                                   // 0x00C4(0x0004)
	float                                              InvokableTakeHitRemainTime;                               // 0x00C8(0x0004)
	unsigned long                                      bChannelingSkill : 1;                                     // 0x00CC(0x0004)
	unsigned long                                      bItemSkill : 1;                                           // 0x00CC(0x0004)
	unsigned long                                      bChargeSkill : 1;                                         // 0x00CC(0x0004)
	unsigned long                                      bAutoFirableSkill : 1;                                    // 0x00CC(0x0004)
	TEnumAsByte<EQTESkillSlotType>                     QTESkillType;                                             // 0x00D0(0x0001)
	unsigned char                                      UnknownData03[0x3];                                       // 0x00D1(0x0003) MISSED OFFSET
	unsigned long                                      bSwitchingSkill : 1;                                      // 0x00D4(0x0004)
	TEnumAsByte<EActionBarSwitchingStateType>          SwitchingStateType;                                       // 0x00D8(0x0001)
	unsigned char                                      UnknownData04[0x3];                                       // 0x00D9(0x0003) MISSED OFFSET
	unsigned long                                      bFastLaunchSkill : 1;                                     // 0x00DC(0x0004)
	unsigned long                                      bStackSkill : 1;                                          // 0x00DC(0x0004)
	unsigned long                                      bUsableBackSkill : 1;                                     // 0x00DC(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x00DC(0x0004)
	unsigned long                                      bCheckTargetRC : 1;                                       // 0x00DC(0x0004)
	unsigned long                                      bCheckCasterRC : 1;                                       // 0x00DC(0x0004)
	unsigned long                                      bCheckResource : 1;                                       // 0x00DC(0x0004)
	unsigned long                                      bCheckKillHitInfo : 1;                                    // 0x00DC(0x0004)
	unsigned long                                      bCheckHitInfo : 1;                                        // 0x00DC(0x0004)
	unsigned long                                      bCheckTakeHitInfo : 1;                                    // 0x00DC(0x0004)
	unsigned long                                      bCheckCombatStatus : 1;                                   // 0x00DC(0x0004)
	unsigned long                                      bCheckEquipItems : 1;                                     // 0x00DC(0x0004)
	unsigned long                                      bCheckItemCount : 1;                                      // 0x00DC(0x0004)
	unsigned long                                      bCheckMovable : 1;                                        // 0x00DC(0x0004)
	unsigned long                                      bCheckTargetAbnormalStatus : 1;                           // 0x00DC(0x0004)
	unsigned long                                      bCheckPlayerAbnormalStatus : 1;                           // 0x00DC(0x0004)
	unsigned long                                      bNeedUpdateCoolDown : 1;                                  // 0x00DC(0x0004)
	unsigned long                                      bNeedUpdateStackCount : 1;                                // 0x00DC(0x0004)
	unsigned long                                      bNeedUpdateActive : 1;                                    // 0x00DC(0x0004)
	int                                                ConsumeActingPoint;                                       // 0x00E0(0x0004)
};

// ScriptStruct BLGame.MainActionBar.ActionBarPetInfo
// 0x000C
struct FActionBarPetInfo
{
	struct FQWord                                      PetUId;                                                   // 0x0000(0x0008)
	unsigned long                                      bNeedUpdateCoolDown : 1;                                  // 0x0008(0x0004)
	unsigned long                                      bNeedUpdateActive : 1;                                    // 0x0008(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x0008(0x0004)
	unsigned long                                      bPendingSetSlot : 1;                                      // 0x0008(0x0004)
};

// ScriptStruct BLGame.MainActionBar.ActionBarMountInfo
// 0x000C
struct FActionBarMountInfo
{
	struct FQWord                                      MountUid;                                                 // 0x0000(0x0008)
	unsigned long                                      bNeedUpdateActive : 1;                                    // 0x0008(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x0008(0x0004)
	unsigned long                                      bPendingSetSlot : 1;                                      // 0x0008(0x0004)
};

// ScriptStruct BLGame.MainActionBar.ActionBarItemInfo
// 0x0014
struct FActionBarItemInfo
{
	int                                                ItemCid;                                                  // 0x0000(0x0004)
	int                                                UseSkillCid;                                              // 0x0004(0x0004)
	float                                              CoolDownRemainTime;                                       // 0x0008(0x0004)
	float                                              CoolDownMaxTime;                                          // 0x000C(0x0004)
	unsigned long                                      bCheckItemCount : 1;                                      // 0x0010(0x0004)
	unsigned long                                      bNeedUpdateCoolDown : 1;                                  // 0x0010(0x0004)
	unsigned long                                      bNeedUpdateActive : 1;                                    // 0x0010(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x0010(0x0004)
};

// ScriptStruct BLGame.MainActionBar.LinkedSkillInfo
// 0x0028
struct FLinkedSkillInfo
{
	int                                                SkillCid;                                                 // 0x0000(0x0004)
	TArray<int>                                        PrecedeSkillList;                                         // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                PrecedeSkillCid;                                          // 0x0014(0x0004)
	int                                                FollowSkillCid;                                           // 0x0018(0x0004)
	int                                                RootSkillCid;                                             // 0x001C(0x0004)
	float                                              FiredTime;                                                // 0x0020(0x0004)
	float                                              SlotChangeTimer;                                          // 0x0024(0x0004)
};

// ScriptStruct BLGame.MainActionBar.VoluntaryInfo
// 0x0020
struct FVoluntaryInfo
{
	int                                                VoluntaryCid;                                             // 0x0000(0x0004)
	int                                                InitialConsumeEnergy;                                     // 0x0004(0x0004)
	int                                                PeriodicConsumeEnergy;                                    // 0x0008(0x0004)
	TArray<TEnumAsByte<ECEEquipSlotType>>              InvokableItemEquipSlotTypes;                              // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      bHoldType : 1;                                            // 0x001C(0x0004)
	unsigned long                                      bCheckEnergy : 1;                                         // 0x001C(0x0004)
	unsigned long                                      bCheckEquipItems : 1;                                     // 0x001C(0x0004)
	unsigned long                                      bActive : 1;                                              // 0x001C(0x0004)
	unsigned long                                      bNeedUpdateActive : 1;                                    // 0x001C(0x0004)
};

// ScriptStruct BLGame.MainActionBar.ActionBarStanceSlotInfo
// 0x0018
struct FActionBarStanceSlotInfo
{
	TEnumAsByte<EActionBarSlotType>                    SlotType;                                                 // 0x0000(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                StanceCid;                                                // 0x0004(0x0004)
	float                                              CoolDownRemainTime;                                       // 0x0008(0x0004)
	float                                              CoolDownMaxTime;                                          // 0x000C(0x0004)
	float                                              ChainStateTime;                                           // 0x0010(0x0004)
	unsigned long                                      bNeedUpdateCoolDown : 1;                                  // 0x0014(0x0004)
};

// ScriptStruct BLGame.MainActionBar.QTEAutoPathInfo
// 0x0018
struct FQTEAutoPathInfo
{
	int                                                IconIndex;                                                // 0x0000(0x0004)
	unsigned long                                      bShow : 1;                                                // 0x0004(0x0004)
	unsigned long                                      bNeedUpdateShow : 1;                                      // 0x0004(0x0004)
	struct FString                                     Desc;                                                     // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.MainActionBar.QTESkillInfo
// 0x000D
struct FQTESkillInfo
{
	int                                                SkillCid;                                                 // 0x0000(0x0004)
	int                                                AvailableSkillIndex;                                      // 0x0004(0x0004)
	unsigned long                                      bShow : 1;                                                // 0x0008(0x0004)
	unsigned long                                      bNeedUpdateShow : 1;                                      // 0x0008(0x0004)
	TEnumAsByte<EQTESkillSlotType>                     SlotType;                                                 // 0x000C(0x0001)
};

// ScriptStruct BLGame.MainActionBar.QTEInteractionInfo
// 0x0020
struct FQTEInteractionInfo
{
	int                                                TargetID;                                                 // 0x0000(0x0004)
	TEnumAsByte<EFriendlyTargetType>                   TargetType;                                               // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	int                                                IconIndex;                                                // 0x0008(0x0004)
	struct FString                                     Desc;                                                     // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      bChanged : 1;                                             // 0x001C(0x0004)
	unsigned long                                      bShow : 1;                                                // 0x001C(0x0004)
	unsigned long                                      bNeedUpdateShow : 1;                                      // 0x001C(0x0004)
};

// ScriptStruct BLGame.MainActionBar.ActionBarSkillSlotInfo
// 0x0015
struct FActionBarSkillSlotInfo
{
	TEnumAsByte<EActionBarSlotType>                    SlotType;                                                 // 0x0000(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SlotIndex;                                                // 0x0004(0x0004)
	int                                                CurrentCid;                                               // 0x0008(0x0004)
	int                                                RootCid;                                                  // 0x000C(0x0004)
	int                                                CombatCid;                                                // 0x0010(0x0004)
	TEnumAsByte<EActionBarAutoFireStateType>           AutoFireStateType;                                        // 0x0014(0x0001)
};

// ScriptStruct BLGame.MainActionBar.ActionBarVoluntarySlotInfo
// 0x000C
struct FActionBarVoluntarySlotInfo
{
	TEnumAsByte<EActionBarSlotType>                    SlotType;                                                 // 0x0000(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SlotIndex;                                                // 0x0004(0x0004)
	int                                                VoluntaryCid;                                             // 0x0008(0x0004)
};

// ScriptStruct BLGame.MainActionBar.ActionBarMultiSlotInfo
// 0x0020
struct FActionBarMultiSlotInfo
{
	TEnumAsByte<EActionBarSlotType>                    SlotType;                                                 // 0x0000(0x0001) (Const)
	TEnumAsByte<EActionBarMultiSlotType>               SubType;                                                  // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                SlotIndex;                                                // 0x0004(0x0004)
	int                                                ItemCid;                                                  // 0x0008(0x0004)
	int                                                UseItemSkillCid;                                          // 0x000C(0x0004)
	int                                                SkillCid;                                                 // 0x0010(0x0004)
	int                                                ItemCount;                                                // 0x0014(0x0004)
	struct FQWord                                      Uid;                                                      // 0x0018(0x0008)
};

// ScriptStruct BLGame.MainActionBar.ActionBarMountSkillSlotInfo
// 0x001C
struct FActionBarMountSkillSlotInfo
{
	TEnumAsByte<EActionBarSlotType>                    SlotType;                                                 // 0x0000(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SkillCid;                                                 // 0x0004(0x0004)
	int                                                SlotIndex;                                                // 0x0008(0x0004)
	int                                                IconIndex;                                                // 0x000C(0x0004)
	float                                              CoolDownRemainTime;                                       // 0x0010(0x0004)
	float                                              CoolDownMaxTime;                                          // 0x0014(0x0004)
	unsigned long                                      bNeedUpdateCoolDown : 1;                                  // 0x0018(0x0004)
};

// ScriptStruct BLGame.MainActionBar.ActionBarFavoriteSlotInfo
// 0x0028
struct FActionBarFavoriteSlotInfo
{
	TEnumAsByte<EActionBarSlotType>                    SlotType;                                                 // 0x0000(0x0001) (Const)
	TEnumAsByte<ECB_CompanionType>                     CB_CompanionType;                                         // 0x0001(0x0001) (Const)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                SlotIndex;                                                // 0x0004(0x0004)
	int                                                MPFCId;                                                   // 0x0008(0x0004)
	struct FQWord                                      MPFUid;                                                   // 0x000C(0x0008)
	int                                                IconIndex;                                                // 0x0014(0x0004)
	int                                                MissionState;                                             // 0x0018(0x0004)
	unsigned long                                      bGradeLock : 1;                                           // 0x001C(0x0004)
	unsigned long                                      bExpLock : 1;                                             // 0x001C(0x0004)
	int                                                Grade;                                                    // 0x0020(0x0004)
	unsigned long                                      bIsAble : 1;                                              // 0x0024(0x0004)
};

// ScriptStruct BLGame.AlertManager.AlertElement
// 0x0014 (0x0028 - 0x0014)
struct FAlertElement : public FAlrimiData
{
	TEnumAsByte<EAlertElementType>                     Type;                                                     // 0x0014(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	int                                                Order;                                                    // 0x0018(0x0004)
	unsigned long                                      AvailableItem : 1;                                        // 0x001C(0x0004)
	int                                                ListIndex;                                                // 0x0020(0x0004)
	unsigned long                                      IsFold : 1;                                               // 0x0024(0x0004)
};

// ScriptStruct BLGame.AlertManager.AlertEffect
// 0x0009
struct FAlertEffect
{
	TEnumAsByte<EAlertElementType>                     Type;                                                     // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Id;                                                       // 0x0004(0x0004)
	TEnumAsByte<EAlertNotifierType>                    EffectType;                                               // 0x0008(0x0001)
};

// ScriptStruct BLGame.BLLauncherSettingManager.LauncherResolution
// 0x0008
struct FLauncherResolution
{
	int                                                X;                                                        // 0x0000(0x0004)
	int                                                Y;                                                        // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.GraphicBase
// 0x0008
struct FGraphicBase
{
	int                                                DisplayRatio;                                             // 0x0000(0x0004)
	int                                                ResolutionIndex;                                          // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.GraphicBaseSetting
// 0x0018
struct FGraphicBaseSetting
{
	TEnumAsByte<EDisplayMode>                          DisplayMode;                                              // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                DisplayGamma;                                             // 0x0004(0x0004)
	TArray<struct FGraphicBase>                        SettingList;                                              // 0x0008(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLUserSettingManager.GraphicDetailSetting
// 0x0048
struct FGraphicDetailSetting
{
	int                                                GraphicOption;                                            // 0x0000(0x0004)
	unsigned long                                      bGraphicDetail : 1;                                       // 0x0004(0x0004)
	int                                                TextureResolution;                                        // 0x0008(0x0004)
	int                                                CharacterDistance;                                        // 0x000C(0x0004)
	int                                                CharacterDetail;                                          // 0x0010(0x0004)
	int                                                WorldDistance;                                            // 0x0014(0x0004)
	int                                                ObjectDetail;                                             // 0x0018(0x0004)
	int                                                LandscapeDetail;                                          // 0x001C(0x0004)
	int                                                EffectDetail;                                             // 0x0020(0x0004)
	int                                                EffectDistance;                                           // 0x0024(0x0004)
	int                                                ShadowDetail;                                             // 0x0028(0x0004)
	int                                                MaxMeshLoading_PC;                                        // 0x002C(0x0004)
	int                                                MaxMeshRendering_PC;                                      // 0x0030(0x0004)
	int                                                MaxProxyRendering_PC;                                     // 0x0034(0x0004)
	int                                                MaxMeshLoading_NPC;                                       // 0x0038(0x0004)
	int                                                MaxMeshRendering_NPC;                                     // 0x003C(0x0004)
	int                                                MaxProxyRendering_NPC;                                    // 0x0040(0x0004)
	int                                                GraphicEtc;                                               // 0x0044(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.SoundSetting
// 0x0028
struct FSoundSetting
{
	int                                                MasterVolume;                                             // 0x0000(0x0004)
	unsigned long                                      bMasterMute : 1;                                          // 0x0004(0x0004)
	int                                                BackgroundVolume;                                         // 0x0008(0x0004)
	unsigned long                                      bBackgroundMute : 1;                                      // 0x000C(0x0004)
	int                                                AmbientVolume;                                            // 0x0010(0x0004)
	int                                                EffectVolume;                                             // 0x0014(0x0004)
	int                                                NPCVoiceVolume;                                           // 0x0018(0x0004)
	int                                                SystemVoiceVolume;                                        // 0x001C(0x0004)
	unsigned long                                      bSystemVoiceMute : 1;                                     // 0x0020(0x0004)
	int                                                InterfaceVolume;                                          // 0x0024(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.UserSystemSettingData
// 0x0088
struct FUserSystemSettingData
{
	struct FGraphicBaseSetting                         GraphicBase;                                              // 0x0000(0x0018) (Transient, NeedCtorLink)
	struct FGraphicDetailSetting                       GraphicDetail;                                            // 0x0018(0x0048) (Transient)
	struct FSoundSetting                               Sound;                                                    // 0x0060(0x0028) (Transient)
};

// ScriptStruct BLGame.BLUserSettingManager.GameNameSetting
// 0x0004
struct FGameNameSetting
{
	unsigned long                                      bShowPlayerName : 1;                                      // 0x0000(0x0004)
	unsigned long                                      bShowPlayerRankName : 1;                                  // 0x0000(0x0004)
	unsigned long                                      bShowMemberName : 1;                                      // 0x0000(0x0004)
	unsigned long                                      bShowOtherName : 1;                                       // 0x0000(0x0004)
	unsigned long                                      bShowOtherRankName : 1;                                   // 0x0000(0x0004)
	unsigned long                                      bShowRaidMemberName : 1;                                  // 0x0000(0x0004)
	unsigned long                                      bShowNPCName : 1;                                         // 0x0000(0x0004)
	unsigned long                                      bShowMonsterName : 1;                                     // 0x0000(0x0004)
	unsigned long                                      bShowGuildName : 1;                                       // 0x0000(0x0004)
	unsigned long                                      bShowGuildMark : 1;                                       // 0x0000(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.GameStatusSetting
// 0x0004
struct FGameStatusSetting
{
	unsigned long                                      bShowHPValue : 1;                                         // 0x0000(0x0004)
	unsigned long                                      bShowSPValue : 1;                                         // 0x0000(0x0004)
	unsigned long                                      bShowPlayerHP : 1;                                        // 0x0000(0x0004)
	unsigned long                                      bShowMemberHP : 1;                                        // 0x0000(0x0004)
	unsigned long                                      bShowSelectedTargetHP : 1;                                // 0x0000(0x0004)
	unsigned long                                      bShowHostileTargetHP : 1;                                 // 0x0000(0x0004)
	unsigned long                                      bShowRaidMemberHP : 1;                                    // 0x0000(0x0004)
	unsigned long                                      bShowStoryOnHeadTagIcon : 1;                              // 0x0000(0x0004)
	unsigned long                                      bShowEpisodeOnHeadTagIcon : 1;                            // 0x0000(0x0004)
	unsigned long                                      bShowMonsterBookOnHeadTagIcon : 1;                        // 0x0000(0x0004)
	unsigned long                                      bShowRoyalOnHeadTagIcon : 1;                              // 0x0000(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.GameBattleSetting
// 0x0004
struct FGameBattleSetting
{
	unsigned long                                      bShowPlayerAttacking : 1;                                 // 0x0000(0x0004)
	unsigned long                                      bShowPlayerDamaging : 1;                                  // 0x0000(0x0004)
	unsigned long                                      bShowPlayerDoHeal : 1;                                    // 0x0000(0x0004)
	unsigned long                                      bShowPlayerReceiveHeal : 1;                               // 0x0000(0x0004)
	unsigned long                                      bShowMemberAttacking : 1;                                 // 0x0000(0x0004)
	unsigned long                                      bShowMemberDamaging : 1;                                  // 0x0000(0x0004)
	unsigned long                                      bShowMemberReceiveHeal : 1;                               // 0x0000(0x0004)
	unsigned long                                      bShowRaidMemberAttacking : 1;                             // 0x0000(0x0004)
	unsigned long                                      bShowRaidMemberDamaging : 1;                              // 0x0000(0x0004)
	unsigned long                                      bShowRaidMemberReceiveHeal : 1;                           // 0x0000(0x0004)
	unsigned long                                      bShowAbnormalStatusSelfStack : 1;                         // 0x0000(0x0004)
	unsigned long                                      bShowAllBattleOutline : 1;                                // 0x0000(0x0004)
	unsigned long                                      bShowFieldBattleOutline : 1;                              // 0x0000(0x0004)
	unsigned long                                      bShowFieldBattleOutlinePlayer : 1;                        // 0x0000(0x0004)
	unsigned long                                      bShowFieldBattleOutlineTraget : 1;                        // 0x0000(0x0004)
	unsigned long                                      bShowDungeonBattleOutline : 1;                            // 0x0000(0x0004)
	unsigned long                                      bShowDungeonBattleOutlinePlayer : 1;                      // 0x0000(0x0004)
	unsigned long                                      bShowDungeonBattleOutlineTrager : 1;                      // 0x0000(0x0004)
	unsigned long                                      bShowWarfareBattleOutline : 1;                            // 0x0000(0x0004)
	unsigned long                                      bShowWarfareBattleOutlinePlayer : 1;                      // 0x0000(0x0004)
	unsigned long                                      bShowWarfareBattleOutlineTarget : 1;                      // 0x0000(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.GameCameraSetting
// 0x000C
struct FGameCameraSetting
{
	int                                                CameraRotationSpeed;                                      // 0x0000(0x0004)
	int                                                CustomMaxCameraStep;                                      // 0x0004(0x0004)
	unsigned long                                      bCameraShake : 1;                                         // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.GameControlSetting
// 0x0010
struct FGameControlSetting
{
	int                                                HandleMode;                                               // 0x0000(0x0004)
	unsigned long                                      bTargetTracking : 1;                                      // 0x0004(0x0004)
	unsigned long                                      bMouseRightClickAttack : 1;                               // 0x0004(0x0004)
	unsigned long                                      bMouseLeftClickAttack : 1;                                // 0x0004(0x0004)
	unsigned long                                      bMouseLeftRightMove : 1;                                  // 0x0004(0x0004)
	unsigned long                                      bMouseLeftMove : 1;                                       // 0x0004(0x0004)
	unsigned long                                      bFixedCamera : 1;                                         // 0x0004(0x0004)
	int                                                MouseSensitivity;                                         // 0x0008(0x0004)
	int                                                AimBuffer;                                                // 0x000C(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.GameCommunitySetting
// 0x0004
struct FGameCommunitySetting
{
	unsigned long                                      bShowPlayerSpeechBubble : 1;                              // 0x0000(0x0004)
	unsigned long                                      bShowMemberSpeechBubble : 1;                              // 0x0000(0x0004)
	unsigned long                                      bShowOtherSpeechBubble : 1;                               // 0x0000(0x0004)
	unsigned long                                      bShowNPCSpeechBubble : 1;                                 // 0x0000(0x0004)
	unsigned long                                      bShowSpeechBubbleList : 1;                                // 0x0000(0x0004)
	unsigned long                                      bShowRaidMemberSpeechBubble : 1;                          // 0x0000(0x0004)
	unsigned long                                      bNotifyFriendLogin : 1;                                   // 0x0000(0x0004)
	unsigned long                                      bNotifyGuildMemberLogin : 1;                              // 0x0000(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.GameInterfaceSetting
// 0x0010
struct FGameInterfaceSetting
{
	int                                                SizeStep;                                                 // 0x0000(0x0004)
	int                                                BG_opacity;                                               // 0x0004(0x0004)
	int                                                FG_opacity;                                               // 0x0008(0x0004)
	unsigned long                                      bTitleBarMove : 1;                                        // 0x000C(0x0004)
	unsigned long                                      bLocationFix : 1;                                         // 0x000C(0x0004)
	unsigned long                                      bShowMinimapExtension : 1;                                // 0x000C(0x0004)
	unsigned long                                      bRaidFrameMove : 1;                                       // 0x000C(0x0004)
	unsigned long                                      bFilterOut : 1;                                           // 0x000C(0x0004)
	unsigned long                                      bAutoRegistMonsterAlert : 1;                              // 0x000C(0x0004)
	unsigned long                                      bDontShowBeginnersGuide : 1;                              // 0x000C(0x0004)
	unsigned long                                      bMonsterBookHeadIcon : 1;                                 // 0x000C(0x0004)
	unsigned long                                      bGuideQuestExtraAlert : 1;                                // 0x000C(0x0004)
};

// ScriptStruct BLGame.BLUserSettingManager.UserInterfaceSettingData
// 0x003C
struct FUserInterfaceSettingData
{
	struct FGameNameSetting                            GameName;                                                 // 0x0000(0x0004) (Transient)
	struct FGameStatusSetting                          GameStatus;                                               // 0x0004(0x0004) (Transient)
	struct FGameBattleSetting                          GameBattle;                                               // 0x0008(0x0004) (Transient)
	struct FGameCameraSetting                          GameCamera;                                               // 0x000C(0x000C) (Transient)
	struct FGameControlSetting                         GameControl;                                              // 0x0018(0x0010) (Transient)
	struct FGameCommunitySetting                       GameCommunity;                                            // 0x0028(0x0004) (Transient)
	struct FGameInterfaceSetting                       GameInterface;                                            // 0x002C(0x0010) (Transient)
};

// ScriptStruct BLGame.BLUIPlayer.DisplayResolution
// 0x0008
struct FDisplayResolution
{
	int                                                Width;                                                    // 0x0000(0x0004)
	int                                                Height;                                                   // 0x0004(0x0004)
};

// ScriptStruct BLGame.DeathController.DeadbodyInfo
// 0x0018
struct FDeadbodyInfo
{
	TEnumAsByte<ECEWorldMapType>                       WorldType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                WorldCid;                                                 // 0x0004(0x0004)
	int                                                WorldMapCId;                                              // 0x0008(0x0004)
	struct FVector                                     Location;                                                 // 0x000C(0x000C)
};

// ScriptStruct BLGame.BLConquest.BLConquestTimerInfo
// 0x000C
struct FBLConquestTimerInfo
{
	float                                              StateRemainTime;                                          // 0x0000(0x0004)
	float                                              StateDuration;                                            // 0x0004(0x0004)
	float                                              TotalPlayedTime;                                          // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLConquest.BLConquestListButtonInfo
// 0x0008
struct FBLConquestListButtonInfo
{
	TEnumAsByte<EBLConquestButtonType>                 ButtonType;                                               // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	unsigned long                                      bDisable : 1;                                             // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLConquest.BLConquestListViewInfo
// 0x0048
struct FBLConquestListViewInfo
{
	struct FString                                     ImagePath;                                                // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     WarExplain;                                               // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                CurrentCount;                                             // 0x0020(0x0004)
	int                                                MaxCount;                                                 // 0x0024(0x0004)
	int                                                WaitCount;                                                // 0x0028(0x0004)
	TEnumAsByte<EConquestModeType>                     WarUIType;                                                // 0x002C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x002D(0x0003) MISSED OFFSET
	float                                              PenaltyTime;                                              // 0x0030(0x0004)
	float                                              RejoinTime;                                               // 0x0034(0x0004)
	struct FString                                     WarName;                                                  // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLConquest.BLConquestListDataInfo
// 0x0034
struct FBLConquestListDataInfo
{
	unsigned long                                      IsDisable : 1;                                            // 0x0000(0x0004)
	unsigned long                                      bWarEnter : 1;                                            // 0x0000(0x0004)
	struct FString                                     WarName;                                                  // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     EnableToTimeString;                                       // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     LimitCount;                                               // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLConquest.BLConquestListCommonInfo
// 0x0090
struct FBLConquestListCommonInfo
{
	TEnumAsByte<ECEBattleFieldWarType>                 BattleFieldWarType;                                       // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                TabIndex;                                                 // 0x0004(0x0004)
	int                                                ListIndex;                                                // 0x0008(0x0004)
	struct FBLConquestListButtonInfo                   ButtonData;                                               // 0x000C(0x0008)
	struct FBLConquestListViewInfo                     ViewData;                                                 // 0x0014(0x0048) (NeedCtorLink)
	struct FBLConquestListDataInfo                     ListData;                                                 // 0x005C(0x0034) (NeedCtorLink)
};

// ScriptStruct BLGame.BLChallengeTower.BLChallengeTowerTotalResultData
// 0x0018
struct FBLChallengeTowerTotalResultData
{
	int                                                CompleteRound;                                            // 0x0000(0x0004)
	int                                                ElapsedTimeToSeconds;                                     // 0x0004(0x0004)
	TArray<struct FChallengeTowerRoundResultInfoData>  RoundResultDataList;                                      // 0x0008(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.BLTimerSystemMessageInfo
// 0x001C
struct FBLTimerSystemMessageInfo
{
	int                                                SystemMessageCid;                                         // 0x0000(0x0004)
	struct FString                                     SystemMessageCodeName;                                    // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                PrintTime;                                                // 0x0014(0x0004)
	unsigned long                                      bNeedPrint : 1;                                           // 0x0018(0x0004)
};

// ScriptStruct BLGame.BLOccupationWar.BLOccuPationWarRevivalPropInfo
// 0x001C
struct FBLOccuPationWarRevivalPropInfo
{
	int                                                RevivalPropCID;                                           // 0x0000(0x0004)
	int                                                RevivalPropSID;                                           // 0x0004(0x0004)
	float                                              RevivalRadius;                                            // 0x0008(0x0004)
	float                                              RevivalHeight;                                            // 0x000C(0x0004)
	struct FVector                                     Location;                                                 // 0x0010(0x000C)
};

// ScriptStruct BLGame.BLConquest.BLConquestScoreInfo
// 0x0020
struct FBLConquestScoreInfo
{
	unsigned long                                      IsLocalPawn : 1;                                          // 0x0000(0x0004)
	int                                                RankCount;                                                // 0x0004(0x0004)
	struct FString                                     Name;                                                     // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<ECEClassType>                          Class;                                                    // 0x0018(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	int                                                KillScore;                                                // 0x001C(0x0004)
};

// ScriptStruct BLGame.BLOccupationWar.BLOccupationWarScoreInfo
// 0x0010 (0x0030 - 0x0020)
struct FBLOccupationWarScoreInfo : public FBLConquestScoreInfo
{
	int                                                AssistCount;                                              // 0x0020(0x0004)
	int                                                AttDefScore;                                              // 0x0024(0x0004)
	int                                                RewardScore;                                              // 0x0028(0x0004)
	unsigned long                                      bVictory : 1;                                             // 0x002C(0x0004)
};

// ScriptStruct BLGame.BLOccupationWar.BLOccupationWarScoreBoardInfo
// 0x000C
struct FBLOccupationWarScoreBoardInfo
{
	TEnumAsByte<ECERealmType>                          Realm;                                                    // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                RealmScore;                                               // 0x0004(0x0004)
	int                                                RealmFlagScore;                                           // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLSpecialWar.SpecialWarStateInfo
// 0x0006
struct FSpecialWarStateInfo
{
	int                                                WarCid;                                                   // 0x0000(0x0004)
	TEnumAsByte<ESpecialWarStateType>                  WarStateType;                                             // 0x0004(0x0001)
	TEnumAsByte<ESpecialWarJoinType>                   WarJoinType;                                              // 0x0005(0x0001)
};

// ScriptStruct BLGame.BLSpecialWar.SpecialWarCommonInfo
// 0x0028
struct FSpecialWarCommonInfo
{
	int                                                WarCid;                                                   // 0x0000(0x0004)
	int                                                UserCount;                                                // 0x0004(0x0004)
	int                                                UserMaxCount;                                             // 0x0008(0x0004)
	int                                                WaitingCount;                                             // 0x000C(0x0004)
	int                                                Score_Hieron;                                             // 0x0010(0x0004)
	int                                                Score_Union;                                              // 0x0014(0x0004)
	int                                                Score_Max;                                                // 0x0018(0x0004)
	TEnumAsByte<ECERealmType>                          VictoryRealm;                                             // 0x001C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x001D(0x0003) MISSED OFFSET
	float                                              RemainTime;                                               // 0x0020(0x0004)
	unsigned long                                      bPaidActingPoint : 1;                                     // 0x0024(0x0004)
};

// ScriptStruct BLGame.BLSpecialWar.SpecialWarJoinReserveInfo
// 0x0010
struct FSpecialWarJoinReserveInfo
{
	int                                                WarCid;                                                   // 0x0000(0x0004)
	float                                              RemainSeconds;                                            // 0x0004(0x0004)
	TEnumAsByte<ESpecialWarJoinType>                   WarJoinType;                                              // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	unsigned long                                      bFirstJoin : 1;                                           // 0x000C(0x0004)
	unsigned long                                      bSuccessCondition : 1;                                    // 0x000C(0x0004)
	unsigned long                                      bPending : 1;                                             // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLDef.WarRankingSortInfo
// 0x0005
struct FWarRankingSortInfo
{
	int                                                DownUpType;                                               // 0x0000(0x0004)
	TEnumAsByte<EWarRankingSortType>                   SortType;                                                 // 0x0004(0x0001)
};

// ScriptStruct BLGame.RealmOwnershipBattle.ROBattleDateTime
// 0x0020
struct FROBattleDateTime
{
	int                                                Year;                                                     // 0x0000(0x0004)
	int                                                Month;                                                    // 0x0004(0x0004)
	int                                                Day;                                                      // 0x0008(0x0004)
	int                                                Hour;                                                     // 0x000C(0x0004)
	int                                                Minute;                                                   // 0x0010(0x0004)
	int                                                Seconds;                                                  // 0x0014(0x0004)
	struct FQWord                                      TimeSeconds;                                              // 0x0018(0x0008)
};

// ScriptStruct BLGame.RealmOwnershipBattle.ROBattleRegisterCommonInfo
// 0x00AC
struct FROBattleRegisterCommonInfo
{
	TEnumAsByte<ECERealmType>                          RealmType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     RealmOwnerGuildName;                                      // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FROBattleDateTime                           ReserveStartTime;                                         // 0x0014(0x0020)
	struct FROBattleDateTime                           ReserveEndTime;                                           // 0x0034(0x0020)
	struct FROBattleDateTime                           BattleStartTime;                                          // 0x0054(0x0020)
	struct FROBattleDateTime                           BattleEndTime;                                            // 0x0074(0x0020)
	float                                              ReserveStartRemainSeconds;                                // 0x0094(0x0004)
	float                                              ReserveEndRemainSeconds;                                  // 0x0098(0x0004)
	float                                              BattleStartRemainSeconds;                                 // 0x009C(0x0004)
	float                                              BattleEndRemainSeconds;                                   // 0x00A0(0x0004)
	float                                              ModifyRemainSeconds;                                      // 0x00A4(0x0004)
	unsigned long                                      bReserved : 1;                                            // 0x00A8(0x0004)
	unsigned long                                      bCanReserve : 1;                                          // 0x00A8(0x0004)
	unsigned long                                      bHaveReserveAuth : 1;                                     // 0x00A8(0x0004)
};

// ScriptStruct BLGame.RealmOwnershipBattle.ROBattleRegisterBtnInfo
// 0x0006
struct FROBattleRegisterBtnInfo
{
	unsigned long                                      bAttackBtnEnable : 1;                                     // 0x0000(0x0004)
	unsigned long                                      bDefenseBtnEnable : 1;                                    // 0x0000(0x0004)
	TEnumAsByte<EROBattleRegisterBtnState>             AttackBtnState;                                           // 0x0004(0x0001)
	TEnumAsByte<EROBattleRegisterBtnState>             DefenseBtnState;                                          // 0x0005(0x0001)
};

// ScriptStruct BLGame.RealmOwnershipBattle.ROBattleRegisterRequestInfo
// 0x0005
struct FROBattleRegisterRequestInfo
{
	unsigned long                                      bRequestedCancel : 1;                                     // 0x0000(0x0004)
	unsigned long                                      bRequestedJoinReserve : 1;                                // 0x0000(0x0004)
	TEnumAsByte<EROBattleSide>                         RequestedJoinReserveSide;                                 // 0x0004(0x0001)
};

// ScriptStruct BLGame.RealmOwnershipBattle.ROBattleResultCommonInfo
// 0x0034
struct FROBattleResultCommonInfo
{
	int                                                Score_Attack;                                             // 0x0000(0x0004)
	int                                                Score_Defense;                                            // 0x0004(0x0004)
	TEnumAsByte<EROBattleSide>                         VictorySide;                                              // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	struct FString                                     VictoryGuildName;                                         // 0x000C(0x0010) (NeedCtorLink)
	struct FString                                     VictoryCitadelName;                                       // 0x001C(0x0010) (NeedCtorLink)
	struct FQWord                                      RewardCoin;                                               // 0x002C(0x0008)
};

// ScriptStruct BLGame.RealmOwnershipBattle.ROBattleRemainTimeInfo
// 0x0010
struct FROBattleRemainTimeInfo
{
	float                                              PrepareRemainTime;                                        // 0x0000(0x0004)
	float                                              ProcessRemainTime;                                        // 0x0004(0x0004)
	float                                              ExitRemainTime;                                           // 0x0008(0x0004)
	float                                              MaxProcessTime;                                           // 0x000C(0x0004)
};

// ScriptStruct BLGame.EquipmentCustom.NormalCustomInfo
// 0x0084
struct FNormalCustomInfo
{
	TArray<TEnumAsByte<ECEParamType>>                  CandidateTypes;                                           // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             CandidateTypeNames;                                       // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        CandidateMinValues;                                       // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        CandidateMaxValues;                                       // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        CandidateCurrentValues;                                   // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FStatData>                           CurrentDatas;                                             // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FStatData>                           NewDatas;                                                 // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ConsumeLumena;                                            // 0x0070(0x0004)
	int                                                ConsumeGold;                                              // 0x0074(0x0004)
	int                                                ConsumeBP;                                                // 0x0078(0x0004)
	int                                                ConsumeDP;                                                // 0x007C(0x0004)
	int                                                ConsumeCP;                                                // 0x0080(0x0004)
};

// ScriptStruct BLGame.EquipmentCustom.SpecialCustomInfo
// 0x0028
struct FSpecialCustomInfo
{
	TArray<int>                                        CandidateOptions;                                         // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FString>                             CandidateOptionNames;                                     // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                CurrentOption;                                            // 0x0020(0x0004)
	int                                                ConsumeLumena;                                            // 0x0024(0x0004)
};

// ScriptStruct BLGame.EquipmentCustom.PotentialOpenInfo
// 0x0040
struct FPotentialOpenInfo
{
	int                                                MaxPotentialLevel;                                        // 0x0000(0x0004)
	int                                                CurrentPotentialLevel;                                    // 0x0004(0x0004)
	int                                                MaterialCid;                                              // 0x0008(0x0004)
	int                                                MaterialConsumeCount;                                     // 0x000C(0x0004)
	TArray<struct FStatData>                           CurrentStats;                                             // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FStatData>                           PotentialLevelStats;                                      // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FStatData>                           NextPotentialLevelStats;                                  // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.EquipmentCustom.PotentialDisjointInfo
// 0x0010
struct FPotentialDisjointInfo
{
	struct FQWord                                      ExpectRewardCinis;                                        // 0x0000(0x0008)
	struct FQWord                                      ExpectRewardGold;                                         // 0x0008(0x0008)
};

// ScriptStruct BLGame.BLAutoPathManager.AutoPathNode
// 0x0020
struct FAutoPathNode
{
	int                                                MyIndex;                                                  // 0x0000(0x0004)
	struct FVector                                     Location;                                                 // 0x0004(0x000C)
	TArray<int>                                        LinkedAutoPathIndex;                                      // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLAutoPathManager.AutoPathDestInfo
// 0x0034
struct FAutoPathDestInfo
{
	unsigned long                                      bActive : 1;                                              // 0x0000(0x0004)
	TArray<struct FPointer>                            CompletedPathList;                                        // 0x0004(0x0010) (Native, AlwaysInit)
	struct FAutoPathNode                               DestinationNode;                                          // 0x0014(0x0020) (Native)
};

// ScriptStruct BLGame.BLAutoPathRouteViewer.AutoPathViewNode
// 0x0030
struct FAutoPathViewNode
{
	struct FPointer                                    AutoPathNode;                                             // 0x0000(0x0008) (Native)
	struct FVector                                     CompletedLocation;                                        // 0x0008(0x000C)
	struct FVector                                     Dir;                                                      // 0x0014(0x000C)
	TArray<class ABLAutoPathMeshActor*>                ActiveMeshes;                                             // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.AnimaManager.AnimaTargetUISlotData
// 0x0014
struct FAnimaTargetUISlotData
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                Sid;                                                      // 0x0004(0x0004)
	int                                                Grade;                                                    // 0x0008(0x0004)
	int                                                Amount;                                                   // 0x000C(0x0004)
	int                                                IconIndex;                                                // 0x0010(0x0004)
};

// ScriptStruct BLGame.AnimaManager.AnimaMPFResultData
// 0x0028
struct FAnimaMPFResultData
{
	struct FQWord                                      Uid;                                                      // 0x0000(0x0008)
	int                                                Cid;                                                      // 0x0008(0x0004)
	int                                                Grade;                                                    // 0x000C(0x0004)
	int                                                IconIndex;                                                // 0x0010(0x0004)
	int                                                MPFType;                                                  // 0x0014(0x0004)
	int                                                LookInfoCid;                                              // 0x0018(0x0004)
	int                                                GradeUpCount;                                             // 0x001C(0x0004)
	int                                                AdditionalGradeUpCount;                                   // 0x0020(0x0004)
	int                                                Level;                                                    // 0x0024(0x0004)
};

// ScriptStruct BLGame.AnimaManager.AnimaItemResultData
// 0x0014
struct FAnimaItemResultData
{
	int                                                Sid;                                                      // 0x0000(0x0004)
	int                                                Cid;                                                      // 0x0004(0x0004)
	int                                                Grade;                                                    // 0x0008(0x0004)
	int                                                IconIndex;                                                // 0x000C(0x0004)
	int                                                COUNT;                                                    // 0x0010(0x0004)
};

// ScriptStruct BLGame.CollectionBook.CollectionListUIData
// 0x006C
struct FCollectionListUIData
{
	int                                                TabIndex;                                                 // 0x0000(0x0004)
	struct FQWord                                      Uid;                                                      // 0x0004(0x0008)
	int                                                Cid;                                                      // 0x000C(0x0004)
	int                                                IconIndex;                                                // 0x0010(0x0004)
	int                                                Grade;                                                    // 0x0014(0x0004)
	unsigned long                                      bIngredientLock : 1;                                      // 0x0018(0x0004)
	unsigned long                                      bIsSummonning : 1;                                        // 0x0018(0x0004)
	unsigned long                                      bGradeLock : 1;                                           // 0x0018(0x0004)
	unsigned long                                      bExpLock : 1;                                             // 0x0018(0x0004)
	unsigned long                                      IsNew : 1;                                                // 0x0018(0x0004)
	unsigned long                                      isActive : 1;                                             // 0x0018(0x0004)
	unsigned long                                      IsGlobalCoolDown : 1;                                     // 0x0018(0x0004)
	int                                                CB_CompanionType;                                         // 0x001C(0x0004)
	int                                                FatiguePercent;                                           // 0x0020(0x0004)
	int                                                Fatigue;                                                  // 0x0024(0x0004)
	struct FString                                     Name;                                                     // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Level;                                                    // 0x0038(0x0004)
	struct FString                                     Race;                                                     // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<ECollectionBookFellowMissionState>     MissionState;                                             // 0x004C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x004D(0x0003) MISSED OFFSET
	struct FQWord                                      ExpireTime;                                               // 0x0050(0x0008)
	float                                              TotalTime;                                                // 0x0058(0x0004)
	float                                              RemainingTime;                                            // 0x005C(0x0004)
	int                                                Exp;                                                      // 0x0060(0x0004)
	int                                                RaceType;                                                 // 0x0064(0x0004)
	int                                                MissionCId;                                               // 0x0068(0x0004)
};

// ScriptStruct BLGame.ABLDef.FavoriteSlotData
// 0x0029
struct FFavoriteSlotData
{
	int                                                SlotIndex;                                                // 0x0000(0x0004)
	struct FQWord                                      Uid;                                                      // 0x0004(0x0008)
	int                                                Cid;                                                      // 0x000C(0x0004)
	int                                                IconIndex;                                                // 0x0010(0x0004)
	int                                                Grade;                                                    // 0x0014(0x0004)
	int                                                Level;                                                    // 0x0018(0x0004)
	int                                                CB_CompanionType;                                         // 0x001C(0x0004)
	int                                                MissionCId;                                               // 0x0020(0x0004)
	unsigned long                                      bGradeLock : 1;                                           // 0x0024(0x0004)
	unsigned long                                      bExpLock : 1;                                             // 0x0024(0x0004)
	unsigned long                                      bIsSummonning : 1;                                        // 0x0024(0x0004)
	TEnumAsByte<ECollectionBookFellowMissionState>     MissionState;                                             // 0x0028(0x0001)
};

// ScriptStruct BLGame.CollectionBook.CollectionDetailData
// 0x0124
struct FCollectionDetailData
{
	struct FString                                     StrUid;                                                   // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CurrentGrade;                                             // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     FosterTargetAlert;                                        // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     FosterIngredientAlert;                                    // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     ExtractAvailable;                                         // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     CollectionName;                                           // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Grade;                                                    // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     FellowRace;                                               // 0x0070(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     FellowVocation;                                           // 0x0080(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MPFTypeName;                                              // 0x0090(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     LocationName;                                             // 0x00A0(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Level;                                                    // 0x00B0(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     MaxLevel;                                                 // 0x00C0(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned long                                      IsLock : 1;                                               // 0x00D0(0x0004)
	int                                                ExpCurrent;                                               // 0x00D4(0x0004)
	int                                                ExpMin;                                                   // 0x00D8(0x0004)
	int                                                ExpMax;                                                   // 0x00DC(0x0004)
	int                                                FatigueCurrent;                                           // 0x00E0(0x0004)
	int                                                FatigueMin;                                               // 0x00E4(0x0004)
	int                                                FatigueMax;                                               // 0x00E8(0x0004)
	struct FString                                     States;                                                   // 0x00EC(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     States2;                                                  // 0x00FC(0x0010) (AlwaysInit, NeedCtorLink)
	class UGFxObject*                                  Skills;                                                   // 0x010C(0x0008)
	int                                                Period;                                                   // 0x0114(0x0004)
	int                                                Cid;                                                      // 0x0118(0x0004)
	int                                                LookInfoCid;                                              // 0x011C(0x0004)
	int                                                CB_CompanionType;                                         // 0x0120(0x0004)
};

// ScriptStruct BLGame.ABLDef.CM_FellowData
// 0x007C
struct FCM_FellowData
{
	int                                                FellowCId;                                                // 0x0000(0x0004)
	struct FQWord                                      FellowUniqueID;                                           // 0x0004(0x0008)
	TEnumAsByte<ECECompanionGradeType>                 Grade;                                                    // 0x000C(0x0001)
	TEnumAsByte<ECEFellowVocationType>                 Vocation;                                                 // 0x000D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x000E(0x0002) MISSED OFFSET
	int                                                Level;                                                    // 0x0010(0x0004)
	int                                                Exp;                                                      // 0x0014(0x0004)
	float                                              Fatigue;                                                  // 0x0018(0x0004)
	int                                                Strength;                                                 // 0x001C(0x0004)
	int                                                Agility;                                                  // 0x0020(0x0004)
	int                                                Intelligence;                                             // 0x0024(0x0004)
	int                                                Wisdom;                                                   // 0x0028(0x0004)
	int                                                Cruel;                                                    // 0x002C(0x0004)
	int                                                Ability;                                                  // 0x0030(0x0004)
	int                                                Boldness;                                                 // 0x0034(0x0004)
	int                                                Concentration;                                            // 0x0038(0x0004)
	float                                              MaxFatigue;                                               // 0x003C(0x0004)
	float                                              RestoreFatiguePerTime;                                    // 0x0040(0x0004)
	int                                                GetExpPerConsumFatigue;                                   // 0x0044(0x0004)
	int                                                RemainGradeUpChance;                                      // 0x0048(0x0004)
	int                                                ResetGradeUpChanceItemUseCnt;                             // 0x004C(0x0004)
	int                                                LookInfo_CID;                                             // 0x0050(0x0004)
	int                                                RareSkill_CID;                                            // 0x0054(0x0004)
	int                                                EpicSkill_CID;                                            // 0x0058(0x0004)
	int                                                LegendarySkill_CID;                                       // 0x005C(0x0004)
	struct FQWord                                      ExpireTime;                                               // 0x0060(0x0008)
	unsigned long                                      IsPermanent : 1;                                          // 0x0068(0x0004)
	struct FQWord                                      LastUpdateTime;                                           // 0x006C(0x0008)
	unsigned long                                      IsLock : 1;                                               // 0x0074(0x0004)
	float                                              GradeUpMileage;                                           // 0x0078(0x0004)
};

// ScriptStruct BLGame.ABLDef.CM_PetData
// 0x0060
struct FCM_PetData
{
	int                                                PetCId;                                                   // 0x0000(0x0004)
	struct FQWord                                      PetUId;                                                   // 0x0004(0x0008)
	int                                                Level;                                                    // 0x000C(0x0004)
	int                                                Exp;                                                      // 0x0010(0x0004)
	TEnumAsByte<ECECompanionGradeType>                 Grade;                                                    // 0x0014(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	int                                                CoolTimeInMilliseconds;                                   // 0x0018(0x0004)
	int                                                MaxCoolTimeInMilliseconds;                                // 0x001C(0x0004)
	int                                                RareSkill_CID;                                            // 0x0020(0x0004)
	int                                                EpicSkill_CID;                                            // 0x0024(0x0004)
	int                                                LegendarySkill_CID;                                       // 0x0028(0x0004)
	float                                              Fatigue;                                                  // 0x002C(0x0004)
	float                                              MaxFatigue;                                               // 0x0030(0x0004)
	float                                              ConsumeFatiguePetTime;                                    // 0x0034(0x0004)
	float                                              RestoreFatiguePerTime;                                    // 0x0038(0x0004)
	struct FQWord                                      ExpireTime;                                               // 0x003C(0x0008)
	unsigned long                                      IsPermanent : 1;                                          // 0x0044(0x0004)
	unsigned long                                      IsLock : 1;                                               // 0x0044(0x0004)
	int                                                RemainGradeUpChance;                                      // 0x0048(0x0004)
	int                                                ResetGradeUpChanceItemUseCnt;                             // 0x004C(0x0004)
	float                                              GradeUpMileage;                                           // 0x0050(0x0004)
	float                                              AutoLootingDelay;                                         // 0x0054(0x0004)
	float                                              AutoLootingDistance;                                      // 0x0058(0x0004)
	unsigned long                                      IsAutoLooting : 1;                                        // 0x005C(0x0004)
};

// ScriptStruct BLGame.ABLDef.CM_MountData
// 0x0060
struct FCM_MountData
{
	struct FQWord                                      MountUniqueID;                                            // 0x0000(0x0008)
	int                                                MountCId;                                                 // 0x0008(0x0004)
	TEnumAsByte<ECECompanionGradeType>                 Grade;                                                    // 0x000C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	int                                                Level;                                                    // 0x0010(0x0004)
	int                                                Exp;                                                      // 0x0014(0x0004)
	float                                              Fatigue;                                                  // 0x0018(0x0004)
	float                                              MaxFatigue;                                               // 0x001C(0x0004)
	float                                              ConsumeFatiguePetTime;                                    // 0x0020(0x0004)
	float                                              DespawnRestoreFatiguePerTime;                             // 0x0024(0x0004)
	float                                              StopRestoreFatiguePerTime;                                // 0x0028(0x0004)
	int                                                LookInfo_CID;                                             // 0x002C(0x0004)
	int                                                RareSkill_CID;                                            // 0x0030(0x0004)
	int                                                EpicSkill_CID;                                            // 0x0034(0x0004)
	int                                                LegendarySkill_CID;                                       // 0x0038(0x0004)
	struct FQWord                                      ExpireTime;                                               // 0x003C(0x0008)
	unsigned long                                      IsPermanent : 1;                                          // 0x0044(0x0004)
	unsigned long                                      IsLock : 1;                                               // 0x0044(0x0004)
	int                                                RemainGradeUpChance;                                      // 0x0048(0x0004)
	int                                                ResetGradeUpChanceItemUseCnt;                             // 0x004C(0x0004)
	float                                              GradeUpMileage;                                           // 0x0050(0x0004)
	float                                              RideTime;                                                 // 0x0054(0x0004)
	float                                              SpeedRunForward;                                          // 0x0058(0x0004)
	float                                              SpeedFlyingForward;                                       // 0x005C(0x0004)
};

// ScriptStruct BLGame.CollectionBook.CollectionBookTabListData
// 0x0070
struct FCollectionBookTabListData
{
	TArray<struct FCollectionListUIData>               TabList;                                                  // 0x0000(0x0010) (NeedCtorLink)
	unsigned long                                      bNeedUpdateList : 1;                                      // 0x0010(0x0004)
	unsigned long                                      bNeedInitializing : 1;                                    // 0x0010(0x0004)
	struct FSet_Mirror                                 NewElemUid;                                               // 0x0014(0x0048) (Const, Native)
	TArray<int>                                        NeedUpdateElemArray;                                      // 0x005C(0x0010) (NeedCtorLink)
	int                                                NumNewElems;                                              // 0x006C(0x0004)
};

// ScriptStruct BLGame.ABLDef.CollectionBookFavoriteDataList
// 0x0010
struct FCollectionBookFavoriteDataList
{
	TArray<struct FFavoriteSlotData>                   DataList;                                                 // 0x0000(0x0010) (NeedCtorLink)
};

// ScriptStruct BLGame.CollectionBookSubUIBase.CB_MPFData
// 0x0009
struct FCB_MPFData
{
	struct FQWord                                      Uid;                                                      // 0x0000(0x0008)
	TEnumAsByte<ECB_CompanionType>                     CB_CompanionType;                                         // 0x0008(0x0001)
};

// ScriptStruct BLGame.CollectionBookSubUIBase.CB_ItemMaterialData
// 0x0004
struct FCB_ItemMaterialData
{
	int                                                Sid;                                                      // 0x0000(0x0004)
};

// ScriptStruct BLGame.ABLDef.CM_FatigueData
// 0x0010
struct FCM_FatigueData
{
	struct FQWord                                      CM_UId;                                                   // 0x0000(0x0008)
	int                                                Exp;                                                      // 0x0008(0x0004)
	int                                                Fatigue;                                                  // 0x000C(0x0004)
};

// ScriptStruct BLGame.CompanionManager.FosterGradeUPConstInfo
// 0x0030
struct FFosterGradeUPConstInfo
{
	int                                                GradePointCommon;                                         // 0x0000(0x0004) (Const)
	int                                                GradePointUncommon;                                       // 0x0004(0x0004) (Const)
	int                                                GradePointRare;                                           // 0x0008(0x0004) (Const)
	int                                                GradePointEpic;                                           // 0x000C(0x0004) (Const)
	int                                                GradePointLegendary;                                      // 0x0010(0x0004) (Const)
	float                                              GradeMod;                                                 // 0x0014(0x0004) (Const)
	float                                              GradeDefaultChanceCommon;                                 // 0x0018(0x0004) (Const)
	float                                              GradeDefaultChanceUncommon;                               // 0x001C(0x0004) (Const)
	float                                              GradeDefaultChanceRare;                                   // 0x0020(0x0004) (Const)
	float                                              GradeDefaultChanceEpic;                                   // 0x0024(0x0004) (Const)
	float                                              GradeDefaultChanceLegendary;                              // 0x0028(0x0004) (Const)
	float                                              GradeUpSuccesCumulant;                                    // 0x002C(0x0004) (Const)
};

// ScriptStruct BLGame.BLItemDurabilityHUD.EquipItemDurabilityHudUIWeaponInfo
// 0x0010
struct FEquipItemDurabilityHudUIWeaponInfo
{
	TEnumAsByte<EEquipItemDurabilityHUDWeaponType>     WeaponType;                                               // 0x0000(0x0001) (AlwaysInit)
	TEnumAsByte<EEquipItemDurabilityHUDGradeType>      DurabilityGrade;                                          // 0x0001(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                Sid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                CurDurability;                                            // 0x0008(0x0004) (AlwaysInit)
	int                                                CurMaxDurability;                                         // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.BLItemDurabilityHUD.EquipItemDurabilityHudUIArmorInfo
// 0x0010
struct FEquipItemDurabilityHudUIArmorInfo
{
	TEnumAsByte<EEquipItemDurabilityHUDArmorType>      ArmorType;                                                // 0x0000(0x0001) (AlwaysInit)
	TEnumAsByte<EEquipItemDurabilityHUDGradeType>      DurabilityGrade;                                          // 0x0001(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	int                                                Sid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                CurDurability;                                            // 0x0008(0x0004) (AlwaysInit)
	int                                                CurMaxDurability;                                         // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.BLItemEquipUpgrade.EquipUpgradeSubMaterialInfo
// 0x000C
struct FEquipUpgradeSubMaterialInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	TEnumAsByte<EEquipUpgradeSubMaterialType>          Type;                                                     // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	unsigned long                                      IsCheck : 1;                                              // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLItemRepair.RepairEquipInfo
// 0x0008
struct FRepairEquipInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                Sid;                                                      // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLItemRepair.RepairToolInfo
// 0x0008
struct FRepairToolInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                MaxAmount;                                                // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLItemSucceed.SucceedSubMaterialInfo
// 0x000C
struct FSucceedSubMaterialInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	TEnumAsByte<ESucceedSubMaterialType>               Type;                                                     // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	unsigned long                                      IsCheck : 1;                                              // 0x0008(0x0004)
};

// ScriptStruct BLGame.LobbyManager.LobbyProperties
// 0x0050
struct FLobbyProperties
{
	unsigned long                                      bEnableCustomizingEnvironment : 1;                        // 0x0000(0x0004)
	int                                                SelectedCharacterIndex;                                   // 0x0004(0x0004)
	struct FPCInfoKey                                  CurrentPCInfoKeyLobbyCC;                                  // 0x0008(0x0004)
	TEnumAsByte<ECERealmType>                          CurrentRealmTypeLobbyCC;                                  // 0x000C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	struct FCustomizeData                              DefaultCustomizeData;                                     // 0x0010(0x0010) (NeedCtorLink)
	struct FCustomizeData                              CachedCustomizeData;                                      // 0x0020(0x0010) (NeedCtorLink)
	TArray<class UBodyInfo*>                           CacheBodyInfos;                                           // 0x0030(0x0010) (NeedCtorLink)
	TArray<struct FPCInfoKey>                          LoadLobbyCinematicPCInfoKeyList;                          // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.BLMissionData
// 0x0034
struct FBLMissionData
{
	int                                                MissionCId;                                               // 0x0000(0x0004)
	int                                                MissionNameCId;                                           // 0x0004(0x0004)
	int                                                MissionLevelTab;                                          // 0x0008(0x0004)
	TEnumAsByte<EBLMissionSlot>                        MissionSlot;                                              // 0x000C(0x0001)
	TEnumAsByte<EBLMissionState>                       MissionState;                                             // 0x000D(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x000E(0x0002) MISSED OFFSET
	float                                              SuccessRatio;                                             // 0x0010(0x0004)
	int                                                TotalMinuteToComplete;                                    // 0x0014(0x0004)
	int                                                ConstTotalMinuteToComplete;                               // 0x0018(0x0004)
	struct FQWord                                      LeaderUid;                                                // 0x001C(0x0008)
	struct FQWord                                      MemberAUid;                                               // 0x0024(0x0008)
	struct FQWord                                      MemberBUid;                                               // 0x002C(0x0008)
};

// ScriptStruct BLGame.BLMissionManager.BLMissionTabData
// 0x0018
struct FBLMissionTabData
{
	int                                                MissionLevelTab;                                          // 0x0000(0x0004)
	TEnumAsByte<EBLMissionTabState>                    TabState;                                                 // 0x0004(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0005(0x0003) MISSED OFFSET
	TArray<struct FBLMissionData>                      MissionList;                                              // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLTimerComponent.BLTimerData
// 0x0048
struct FBLTimerData
{
	TEnumAsByte<EBLTimerModeType>                      TimerMode;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              Duration;                                                 // 0x0004(0x0004)
	float                                              Rate;                                                     // 0x0008(0x0004)
	struct FScriptDelegate                             UpdateCountUpDelegate;                                    // 0x000C(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData01[0x4];                                       // 0x000C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             UpdateCountDownDelegate;                                  // 0x001C(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData02[0x4];                                       // 0x001C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	struct FScriptDelegate                             EndDelegate;                                              // 0x002C(0x000C) (NeedCtorLink)
	unsigned char                                      UnknownData03[0x4];                                       // 0x002C(0x0004) FIX WRONG TYPE SIZE OF PREVIOUS PROPERTY
	float                                              ElapsedTime;                                              // 0x003C(0x0004)
	float                                              RemainTime;                                               // 0x0040(0x0004)
	float                                              RateCount;                                                // 0x0044(0x0004)
};

// ScriptStruct BLGame.ABLDef.BLSkillInfo
// 0x003C
struct FBLSkillInfo
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	int                                                SkillCid;                                                 // 0x0004(0x0004)
	int                                                ActiveIconIndex;                                          // 0x0008(0x0004)
	int                                                DeactiveIconIndex;                                        // 0x000C(0x0004)
	int                                                RequireLevel;                                             // 0x0010(0x0004)
	int                                                RequireSPLevel;                                           // 0x0014(0x0004)
	TEnumAsByte<EBLSkillInfoType>                      SkillInfoType;                                            // 0x0018(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0019(0x0003) MISSED OFFSET
	TArray<struct FBLSkillGemInfo>                     GemNode_2;                                                // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FBLSkillGemInfo>                     GemNode_3;                                                // 0x002C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.BLStanceSkillInfo
// 0x0007 (0x0043 - 0x003C)
struct FBLStanceSkillInfo : public FBLSkillInfo
{
	int                                                StanceCid;                                                // 0x003C(0x0004)
	TEnumAsByte<ECEStanceSkillType>                    SkillType;                                                // 0x0040(0x0001)
	TEnumAsByte<ECEQTEKeyType>                         QTEKeyType;                                               // 0x0041(0x0001)
	TEnumAsByte<ECEStanceQTEType>                      StanceQTEType;                                            // 0x0042(0x0001)
};

// ScriptStruct BLGame.ABLDef.BLNonStanceSkillInfo
// 0x0010 (0x004C - 0x003C)
struct FBLNonStanceSkillInfo : public FBLSkillInfo
{
	TArray<struct FBLSkillGemInfo>                     GemNode_4;                                                // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.BLStanceSkillNode
// 0x005C
struct FBLStanceSkillNode
{
	struct FBLStanceSkillInfo                          StanceSkillInfo;                                          // 0x0000(0x0044) (NeedCtorLink)
	struct FPointer                                    ParentsSkillNode;                                         // 0x0044(0x0008) (Native)
	TArray<struct FPointer>                            ChildSkillNodes;                                          // 0x004C(0x0010) (Native, AlwaysInit)
};

// ScriptStruct BLGame.ABLDef.BLNonStanceSkillNode
// 0x004C
struct FBLNonStanceSkillNode
{
	struct FBLNonStanceSkillInfo                       NonStanceSkillInfo;                                       // 0x0000(0x004C) (NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.SkillDeckTacticSlotInfo
// 0x000C
struct FSkillDeckTacticSlotInfo
{
	int                                                AffectedCid;                                              // 0x0000(0x0004)
	int                                                OriginalCid;                                              // 0x0004(0x0004)
	unsigned long                                      bLock : 1;                                                // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLDef.MonsterBookAreaInfo
// 0x0013 (0x001C - 0x0009)
struct FMonsterBookAreaInfo : public FAreaInfoBase
{
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	TArray<struct FMonsterBookArea>                    MonsterBookAreas;                                         // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.AvailableQuestInfo
// 0x0010 (0x005C - 0x004C)
struct FAvailableQuestInfo : public FQuestNPCMarker
{
	struct FString                                     QuestName;                                                // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.ClientQuestObjectiveInfo
// 0x003C
struct FClientQuestObjectiveInfo
{
	TEnumAsByte<ECEQuestObjectiveType>                 QuestObjectiveType;                                       // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                InteractPropCid;                                          // 0x0004(0x0004)
	TArray<int>                                        InteractProp_SubPropCidList;                              // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        InteractProp_ItemCidList;                                 // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                UseItemCid;                                               // 0x0028(0x0004)
	TArray<struct FUseItemTargetInfo>                  UseItem_TargetInfoList;                                   // 0x002C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.TutorialOrderGuideData
// 0x0034
struct FTutorialOrderGuideData
{
	int                                                GuideId;                                                  // 0x0000(0x0004) (AlwaysInit)
	struct FString                                     Guide_Codename;                                           // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     GuideDescription;                                         // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     GuideImage;                                               // 0x0024(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.BLFellowStatusData
// 0x0020
struct FBLFellowStatusData
{
	int                                                Strength;                                                 // 0x0000(0x0004)
	int                                                Intelligence;                                             // 0x0004(0x0004)
	int                                                Agility;                                                  // 0x0008(0x0004)
	int                                                Wisdom;                                                   // 0x000C(0x0004)
	int                                                Boldness;                                                 // 0x0010(0x0004)
	int                                                Ability;                                                  // 0x0014(0x0004)
	int                                                Concentration;                                            // 0x0018(0x0004)
	int                                                Cruel;                                                    // 0x001C(0x0004)
};

// ScriptStruct BLGame.ABLDef.CustomAnimInfo
// 0x0020
struct FCustomAnimInfo
{
	struct FName                                       AnimName;                                                 // 0x0000(0x0008)
	float                                              Rate;                                                     // 0x0008(0x0004)
	float                                              BlendInTime;                                              // 0x000C(0x0004)
	float                                              BlendOutTime;                                             // 0x0010(0x0004)
	unsigned long                                      bLooping : 1;                                             // 0x0014(0x0004)
	unsigned long                                      bOverride : 1;                                            // 0x0014(0x0004)
	float                                              StartTime;                                                // 0x0018(0x0004)
	unsigned long                                      bIgnoreOriginalNoNotifies : 1;                            // 0x001C(0x0004)
	unsigned long                                      bNewNoNotifie : 1;                                        // 0x001C(0x0004)
};

// ScriptStruct BLGame.ABLDef.PartyMemberSpaceData
// 0x0010
struct FPartyMemberSpaceData
{
	int                                                MemberId;                                                 // 0x0000(0x0004)
	int                                                channelId;                                                // 0x0004(0x0004)
	int                                                WorldType;                                                // 0x0008(0x0004)
	unsigned long                                      bOtherChannel : 1;                                        // 0x000C(0x0004)
	unsigned long                                      bOtherSpace : 1;                                          // 0x000C(0x0004)
	unsigned long                                      bInDungeon : 1;                                           // 0x000C(0x0004)
};

// ScriptStruct BLGame.ABLDef.ROBattleProgressScoreInfo
// 0x0058
struct FROBattleProgressScoreInfo
{
	struct FString                                     PlayerName;                                               // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     PlayerGuildName;                                          // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                PlayerKill;                                               // 0x0020(0x0004)
	int                                                PlayerScore;                                              // 0x0024(0x0004)
	struct FString                                     AttackGuildName;                                          // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                AttackKill;                                               // 0x0038(0x0004)
	int                                                AttackScore;                                              // 0x003C(0x0004)
	struct FString                                     DefenseGuildName;                                         // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                DefenseKill;                                              // 0x0050(0x0004)
	int                                                DefenseScore;                                             // 0x0054(0x0004)
};

// ScriptStruct BLGame.ABLDef.RouteInfoCaseFixDummyStruct
// 0x0004
struct FRouteInfoCaseFixDummyStruct
{
	int                                                RouteInfo;                                                // 0x0000(0x0004)
};

// ScriptStruct BLGame.ABLDef.HitReactionInfo
// 0x0010
struct FHitReactionInfo
{
	TEnumAsByte<EHitReactionType>                      ReactionType;                                             // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              StiffTime;                                                // 0x0004(0x0004) (Edit)
	float                                              OpponentStiffTime;                                        // 0x0008(0x0004) (Edit)
	struct FColor                                      StringColor;                                              // 0x000C(0x0004) (Transient)
};

// ScriptStruct BLGame.ABLDef.SkillKey
// 0x0008
struct FSkillKey
{
	int                                                Cid;                                                      // 0x0000(0x0004) (Edit)
	int                                                Level;                                                    // 0x0004(0x0004) (Edit)
};

// ScriptStruct BLGame.ABLDef.CustomizingRelativeUIParamData
// 0x0014
struct FCustomizingRelativeUIParamData
{
	TEnumAsByte<ECECustomizeType>                      CustomizeType;                                            // 0x0000(0x0001) (Edit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	TArray<struct FCustomizingParamData>               ParamDataList;                                            // 0x0004(0x0010) (Edit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLDef.DungeonGroupData
// 0x002C
struct FDungeonGroupData
{
	TEnumAsByte<EDungeonType>                          SelectedDungeonType;                                      // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	unsigned long                                      IsRaid : 1;                                               // 0x0004(0x0004)
	int                                                DungeonGroupCid;                                          // 0x0008(0x0004)
	struct FString                                     DungeonGroupName;                                         // 0x000C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FDungeonData>                        DungeonDataList;                                          // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLUIDef.UIInventorySlotComopnentData
// 0x000C
struct FUIInventorySlotComopnentData
{
	int                                                ComponentIndex;                                           // 0x0000(0x0004)
	int                                                SlotCount;                                                // 0x0004(0x0004)
	int                                                CoverType;                                                // 0x0008(0x0004)
};

// ScriptStruct BLGame.ABLUIDef.UISkillDeckTacticSlotInfo
// 0x002C
struct FUISkillDeckTacticSlotInfo
{
	int                                                SlotIndex;                                                // 0x0000(0x0004)
	int                                                Cid;                                                      // 0x0004(0x0004)
	int                                                OriginalCid;                                              // 0x0008(0x0004)
	int                                                Grade;                                                    // 0x000C(0x0004)
	int                                                GroupID;                                                  // 0x0010(0x0004)
	int                                                IconIndex;                                                // 0x0014(0x0004)
	unsigned long                                      bLock : 1;                                                // 0x0018(0x0004)
	struct FString                                     SkillName;                                                // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.EquipmentConstantInfoData
// 0x003C (0x0070 - 0x0034)
struct FEquipmentConstantInfoData : public FContentInfoData
{
	TEnumAsByte<ECEItemGradeType>                      SucceedGradeCondition;                                    // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	float                                              MaxMileageRate;                                           // 0x0038(0x0004)
	int                                                SucceedResource;                                          // 0x003C(0x0004)
	struct FItemIdAndAmountInfo                        PerfectSucceedResource;                                   // 0x0040(0x0008)
	struct FItemIdAndAmountInfo                        KeepSucceedResource;                                      // 0x0048(0x0008)
	int                                                SucceedMinStrengthenLv;                                   // 0x0050(0x0004)
	float                                              GearScoreGapRateConst;                                    // 0x0054(0x0004)
	float                                              GearScoreGapExpConst;                                     // 0x0058(0x0004)
	float                                              IncGearScoreConst;                                        // 0x005C(0x0004)
	int                                                Evolution0_UnderLimit;                                    // 0x0060(0x0004)
	int                                                Evolution1_UnderLimit;                                    // 0x0064(0x0004)
	int                                                Evolution2_UnderLimit;                                    // 0x0068(0x0004)
	int                                                Evolution3_UnderLimit;                                    // 0x006C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuildConstantInfoData
// 0x0018 (0x004C - 0x0034)
struct FGuildConstantInfoData : public FContentInfoData
{
	int                                                GuildMarkBackgroundEditableLevel;                         // 0x0034(0x0004)
	int                                                GuildMarkSymbolEditableLevel;                             // 0x0038(0x0004)
	TArray<int>                                        WinCountOfWarRewardRank;                                  // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuildCreateInfoData
// 0x001C (0x0050 - 0x0034)
struct FGuildCreateInfoData : public FContentInfoData
{
	int                                                Create_level;                                             // 0x0034(0x0004)
	int                                                Leave_time;                                               // 0x0038(0x0004)
	int                                                Remove_time;                                              // 0x003C(0x0004)
	int                                                Disband_time;                                             // 0x0040(0x0004)
	int                                                Create_gold;                                              // 0x0044(0x0004)
	int                                                Member_count;                                             // 0x0048(0x0004)
	int                                                ActiveCode;                                               // 0x004C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuildWarInfoData
// 0x000C (0x0040 - 0x0034)
struct FGuildWarInfoData : public FContentInfoData
{
	int                                                LevelCondition;                                           // 0x0034(0x0004)
	int                                                WarCount;                                                 // 0x0038(0x0004)
	int                                                DeclareWarCount;                                          // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingCameraInfoData
// 0x0024 (0x0058 - 0x0034)
struct FCustomizingCameraInfoData : public FContentInfoData
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0034(0x0001)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0035(0x0001)
	TEnumAsByte<ECECustomizingUIModeType>              CustomizingUIMode;                                        // 0x0036(0x0001)
	TEnumAsByte<ECECustomizingZoomModeType>            ZoomMode;                                                 // 0x0037(0x0001)
	struct FString                                     TargetBone;                                               // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              CamDistance;                                              // 0x0048(0x0004)
	float                                              CamFOV;                                                   // 0x004C(0x0004)
	int                                                Min_Pitch;                                                // 0x0050(0x0004)
	int                                                Max_Pitch;                                                // 0x0054(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingMouseActionInfoData
// 0x0010 (0x0044 - 0x0034)
struct FCustomizingMouseActionInfoData : public FContentInfoData
{
	TEnumAsByte<ECECustomizingUIModeType>              CustomizingUIMode;                                        // 0x0034(0x0001)
	TEnumAsByte<ECECustomizingAreaType>                CustomizingAreaType;                                      // 0x0035(0x0001)
	TEnumAsByte<ECECustomizingViewType>                CustomizingViewType;                                      // 0x0036(0x0001)
	TEnumAsByte<ECECustomizeType>                      DragXAction;                                              // 0x0037(0x0001)
	TEnumAsByte<ECECustomizingDragSignType>            DragXSign;                                                // 0x0038(0x0001)
	TEnumAsByte<ECECustomizeType>                      DragYAction;                                              // 0x0039(0x0001)
	TEnumAsByte<ECECustomizingDragSignType>            DragYSign;                                                // 0x003A(0x0001)
	TEnumAsByte<ECECustomizeType>                      ClickAction;                                              // 0x003B(0x0001)
	float                                              ClickFactor;                                              // 0x003C(0x0004)
	int                                                CursorType;                                               // 0x0040(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingPickingAreaInfoData
// 0x0024 (0x0058 - 0x0034)
struct FCustomizingPickingAreaInfoData : public FContentInfoData
{
	TEnumAsByte<ECECustomizingUIModeType>              CustomizingUIMode;                                        // 0x0034(0x0001)
	TEnumAsByte<ECECustomizingAreaType>                CustomizingAreaType;                                      // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	TArray<struct FString>                             MaterialKeys;                                             // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<TEnumAsByte<ECECustomizingAreaType>>        HighlightingCombine;                                      // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingBodyFatInfoData
// 0x0001 (0x0035 - 0x0034)
struct FCustomizingBodyFatInfoData : public FContentInfoData
{
	TEnumAsByte<ECECustomizeType>                      CustomizeType;                                            // 0x0034(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CustomizingPreviewEquipmentInfoData
// 0x0014 (0x0048 - 0x0034)
struct FCustomizingPreviewEquipmentInfoData : public FContentInfoData
{
	TEnumAsByte<ECERaceType>                           RaceType;                                                 // 0x0034(0x0001)
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0035(0x0001)
	TEnumAsByte<ECEGenderType>                         GenderType;                                               // 0x0036(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0037(0x0001) MISSED OFFSET
	TArray<struct FClientEquipItemInfo>                EquipItems;                                               // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SetSkillInfoData
// 0x0018 (0x004C - 0x0034)
struct FSetSkillInfoData : public FContentInfoData
{
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                Level;                                                    // 0x0038(0x0004)
	TArray<int>                                        SkillList;                                                // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillSwapTableInfoData
// 0x000C (0x0040 - 0x0034)
struct FSkillSwapTableInfoData : public FContentInfoData
{
	int                                                ConvertorSkillCid;                                        // 0x0034(0x0004)
	int                                                ActiveSkillCid;                                           // 0x0038(0x0004)
	int                                                SwapSkillCid;                                             // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillAcquireInfo
// 0x0018
struct FSkillAcquireInfo
{
	TEnumAsByte<ECEClassType>                          PcClass;                                                  // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                PcLevel;                                                  // 0x0004(0x0004)
	TArray<int>                                        SkillList;                                                // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillCompareInfo
// 0x0008
struct FSkillCompareInfo
{
	TEnumAsByte<ECEClassType>                          PcClass;                                                  // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                PcLevel;                                                  // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.RoyalQuestRewardInfoData
// 0x0008 (0x003C - 0x0034)
struct FRoyalQuestRewardInfoData : public FContentInfoData
{
	int                                                CompleteCount;                                            // 0x0034(0x0004)
	int                                                SytemMailCid;                                             // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.QuestConstInfoData
// 0x0018 (0x004C - 0x0034)
struct FQuestConstInfoData : public FContentInfoData
{
	int                                                DailyRoyalCount;                                          // 0x0034(0x0004)
	int                                                RoyalQuestInitializeTime;                                 // 0x0038(0x0004)
	int                                                JournalActiveCode;                                        // 0x003C(0x0004)
	int                                                EpisodeActiveCode;                                        // 0x0040(0x0004)
	int                                                MonsterbookActiveCode;                                    // 0x0044(0x0004)
	int                                                RoyalActiveCode;                                          // 0x0048(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FellowConstInfoData
// 0x001C (0x0050 - 0x0034)
struct FFellowConstInfoData : public FContentInfoData
{
	int                                                MaxLevel;                                                 // 0x0034(0x0004)
	float                                              GradeModeCommon;                                          // 0x0038(0x0004)
	float                                              GradeModeUncommon;                                        // 0x003C(0x0004)
	float                                              GradeModeRare;                                            // 0x0040(0x0004)
	float                                              GradeModeEpic;                                            // 0x0044(0x0004)
	float                                              GradeModeLegendary;                                       // 0x0048(0x0004)
	float                                              ExpCalMod;                                                // 0x004C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MissionConstInfoData
// 0x0028 (0x005C - 0x0034)
struct FMissionConstInfoData : public FContentInfoData
{
	int                                                Mission_able_lv;                                          // 0x0034(0x0004)
	int                                                Mission_reset_time;                                       // 0x0038(0x0004)
	int                                                Mission_refresh_acting_point;                             // 0x003C(0x0004)
	int                                                Provide_mission_range;                                    // 0x0040(0x0004)
	float                                              Level_difference_correction;                              // 0x0044(0x0004)
	float                                              Fellow_ratio_2;                                           // 0x0048(0x0004)
	float                                              Fellow_ratio_3;                                           // 0x004C(0x0004)
	float                                              Fellow_ratio_4;                                           // 0x0050(0x0004)
	float                                              Time_decrease_ratio_3;                                    // 0x0054(0x0004)
	float                                              Time_decrease_ratio_4;                                    // 0x0058(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BLMountConstInfo
// 0x0040
struct FBLMountConstInfo
{
	int                                                MaxLevel;                                                 // 0x0000(0x0004)
	float                                              RideTime;                                                 // 0x0004(0x0004)
	float                                              GroundForwardSpeed;                                       // 0x0008(0x0004)
	float                                              GroundBackwardSpeed;                                      // 0x000C(0x0004)
	float                                              FlyingForwardSpeed;                                       // 0x0010(0x0004)
	float                                              FlyingBackwardSpeed;                                      // 0x0014(0x0004)
	int                                                MaxFatigue;                                               // 0x0018(0x0004)
	int                                                SpawnFatigue;                                             // 0x001C(0x0004)
	int                                                ConsumeFatigueTime;                                       // 0x0020(0x0004)
	int                                                ConsumeFatiguePerTime;                                    // 0x0024(0x0004)
	int                                                DespawnRestoreFatigueTime;                                // 0x0028(0x0004)
	int                                                DespawnRestoreFatiguePerTime;                             // 0x002C(0x0004)
	int                                                StopRestoreFatigueTime;                                   // 0x0030(0x0004)
	int                                                StopRestoreFatiguePerTime;                                // 0x0034(0x0004)
	float                                              JumpAbility;                                              // 0x0038(0x0004)
	float                                              ClimbAbility;                                             // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GatherInfoData
// 0x0008 (0x003C - 0x0034)
struct FGatherInfoData : public FContentInfoData
{
	int                                                GatheringCategoryType;                                    // 0x0034(0x0004)
	int                                                GatheringMaterialLevel;                                   // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GatherCategoryInfoData
// 0x0000 (0x0034 - 0x0034)
struct FGatherCategoryInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GatherConstantInfoData
// 0x0008 (0x003C - 0x0034)
struct FGatherConstantInfoData : public FContentInfoData
{
	int                                                GatherMaxLevel;                                           // 0x0034(0x0004)
	int                                                ActiveCode;                                               // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.InventoryConstantValueInfoData
// 0x0008 (0x003C - 0x0034)
struct FInventoryConstantValueInfoData : public FContentInfoData
{
	int                                                LineUpCoolTime;                                           // 0x0034(0x0004)
	int                                                FreeSlotCount;                                            // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.InventoryTabInfoData
// 0x0014 (0x0048 - 0x0034)
struct FInventoryTabInfoData : public FContentInfoData
{
	TEnumAsByte<ECEInventoryType>                      InventoryType;                                            // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<TEnumAsByte<ECEItemCategoryType>>           BindingItemCaetgory;                                      // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BlessershipInfoData
// 0x000C (0x0040 - 0x0034)
struct FBlessershipInfoData : public FContentInfoData
{
	int                                                Level;                                                    // 0x0034(0x0004)
	int                                                ActingPointMax;                                           // 0x0038(0x0004)
	int                                                ActingPointRegenPeriod;                                   // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.FixedChargeAdvInfoData
// 0x0008 (0x003C - 0x0034)
struct FFixedChargeAdvInfoData : public FContentInfoData
{
	int                                                ServiceLevel;                                             // 0x0034(0x0004)
	int                                                IconIndex;                                                // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.TamingConstInfoData
// 0x0008 (0x003C - 0x0034)
struct FTamingConstInfoData : public FContentInfoData
{
	int                                                TamingMaxLevel;                                           // 0x0034(0x0004)
	int                                                ActiveCode;                                               // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GuildJoinInfoData
// 0x000C (0x0040 - 0x0034)
struct FGuildJoinInfoData : public FContentInfoData
{
	int                                                Leave_time;                                               // 0x0034(0x0004)
	int                                                Remove_time;                                              // 0x0038(0x0004)
	int                                                Disband_time;                                             // 0x003C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.NPCMapInfoData
// 0x0040 (0x0074 - 0x0034)
struct FNPCMapInfoData : public FContentInfoData
{
	TEnumAsByte<ECENPCCategory>                        NPCCategory;                                              // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                NPC_Sid;                                                  // 0x0038(0x0004)
	struct FString                                     LevelName;                                                // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     LevelCodeName;                                            // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FVector>                             Location;                                                 // 0x005C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                WorldMapCId;                                              // 0x006C(0x0004)
	int                                                CategoryAdditionalInfo;                                   // 0x0070(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PropAdditionalInfoData
// 0x0010 (0x0044 - 0x0034)
struct FPropAdditionalInfoData : public FContentInfoData
{
	TArray<struct FBLPropRelativeQuestInfo>            PropRelativeQuestInfoList;                                // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.EquipSkillInfoData
// 0x0020 (0x0054 - 0x0034)
struct FEquipSkillInfoData : public FContentInfoData
{
	TArray<int>                                        StanceCidList;                                            // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        NonStanceSkillCidList;                                    // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GemConstantInfoData
// 0x0020 (0x0054 - 0x0034)
struct FGemConstantInfoData : public FContentInfoData
{
	int                                                DayResetTime;                                             // 0x0034(0x0004)
	int                                                NeedExchangeGemPieceCount;                                // 0x0038(0x0004)
	int                                                DayExchangeableMaxCount;                                  // 0x003C(0x0004)
	int                                                GemPieceMaxCount;                                         // 0x0040(0x0004)
	int                                                StanceGemMaxCount;                                        // 0x0044(0x0004)
	int                                                NonstanceGemMaxCount;                                     // 0x0048(0x0004)
	int                                                ParameterGemMaxCount;                                     // 0x004C(0x0004)
	int                                                GemConvertCost;                                           // 0x0050(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.GempieceExchangeInfoData
// 0x0010 (0x0044 - 0x0034)
struct FGempieceExchangeInfoData : public FContentInfoData
{
	TEnumAsByte<ECEGemType>                            GemType;                                                  // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                ItemCid;                                                  // 0x0038(0x0004)
	int                                                GemCount;                                                 // 0x003C(0x0004)
	int                                                ItemCount;                                                // 0x0040(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.NodeInfoData
// 0x0060 (0x0094 - 0x0034)
struct FNodeInfoData : public FContentInfoData
{
	unsigned char                                      IsSelection;                                              // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                EnableIconIndex;                                          // 0x0038(0x0004)
	int                                                DisableIconIndex;                                         // 0x003C(0x0004)
	TArray<int>                                        StanceGrowthCodeNameList;                                 // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        SkillGrowthCodeNameList;                                  // 0x0050(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        SkillChangeCodeNameList;                                  // 0x0060(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        ParamGrowthCodeNameList;                                  // 0x0070(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                PrecedeNodeForLearn;                                      // 0x0080(0x0004)
	int                                                MinLevelForLearn;                                         // 0x0084(0x0004)
	int                                                MinSPLevelForLearn;                                       // 0x0088(0x0004)
	int                                                GemCost;                                                  // 0x008C(0x0004)
	int                                                GemRemoveGoldCost;                                        // 0x0090(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.NodeSelectionInfoData
// 0x0010 (0x0044 - 0x0034)
struct FNodeSelectionInfoData : public FContentInfoData
{
	TArray<int>                                        OptionNodeCidList;                                        // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.NonStanceSkillInfoData
// 0x0010 (0x0044 - 0x0034)
struct FNonStanceSkillInfoData : public FContentInfoData
{
	int                                                SkillCodeName;                                            // 0x0034(0x0004)
	int                                                StartNode_01;                                             // 0x0038(0x0004)
	int                                                StartNode_02;                                             // 0x003C(0x0004)
	int                                                StartNode_03;                                             // 0x0040(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BLParameterChangeData
// 0x0008
struct FBLParameterChangeData
{
	TEnumAsByte<ECEParamType>                          ParamType;                                                // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                Value;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BLParameterDisplayChangeData
// 0x0008
struct FBLParameterDisplayChangeData
{
	int                                                DisplayInfoCid;                                           // 0x0000(0x0004)
	int                                                Value;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ParameterGrowthInfoData
// 0x0024 (0x0058 - 0x0034)
struct FParameterGrowthInfoData : public FContentInfoData
{
	TArray<struct FBLParameterChangeData>              BaseParamGrowthChangeList;                                // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FBLParameterDisplayChangeData>       ParamDisplayChangeList;                                   // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                AbnormalCid;                                              // 0x0054(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ParameterDisplayInfoData
// 0x0000 (0x0034 - 0x0034)
struct FParameterDisplayInfoData : public FContentInfoData
{

};

// ScriptStruct BLGame.ABLInfoCollectionTypes.ParameterConstInfoData
// 0x0008 (0x003C - 0x0034)
struct FParameterConstInfoData : public FContentInfoData
{
	int                                                MaxPage;                                                  // 0x0034(0x0004)
	int                                                MaxRow;                                                   // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillAcquireLevelInfoKey
// 0x0004
struct FSkillAcquireLevelInfoKey
{
	TEnumAsByte<ECEClassType>                          Class;                                                    // 0x0000(0x0001)
	unsigned char                                      Level;                                                    // 0x0001(0x0001)
	unsigned char                                      SPLevel;                                                  // 0x0002(0x0001)
	unsigned char                                      Dummy;                                                    // 0x0003(0x0001)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillAcquireLevelInfoData
// 0x0034 (0x0068 - 0x0034)
struct FSkillAcquireLevelInfoData : public FContentInfoData
{
	struct FSkillAcquireLevelInfoKey                   Key;                                                      // 0x0034(0x0004)
	TArray<int>                                        StanceCidList;                                            // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        StanceSkillCidList;                                       // 0x0048(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        NonStanceSkillCidList;                                    // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillChangeInfoData
// 0x0008 (0x003C - 0x0034)
struct FSkillChangeInfoData : public FContentInfoData
{
	int                                                BeforeSkillCid;                                           // 0x0034(0x0004)
	int                                                ChangeSkillCid;                                           // 0x0038(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.BLSkillParamModifyData
// 0x0008
struct FBLSkillParamModifyData
{
	TEnumAsByte<ECESkillParamModifyType>               ParamModifyType;                                          // 0x0000(0x0001)
	TEnumAsByte<ECEParamChangeType>                    ParamChangeType;                                          // 0x0001(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0002(0x0002) MISSED OFFSET
	float                                              Value;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.SkillGrowthInfoData
// 0x0024 (0x0058 - 0x0034)
struct FSkillGrowthInfoData : public FContentInfoData
{
	TArray<struct FBLSkillParamModifyData>             ParamModifyList;                                          // 0x0034(0x0010) (NeedCtorLink)
	TArray<int>                                        SkillCidList;                                             // 0x0044(0x0010) (NeedCtorLink)
	int                                                AttachAbnormalCid;                                        // 0x0054(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.StanceGrowthInfoData
// 0x0018 (0x004C - 0x0034)
struct FStanceGrowthInfoData : public FContentInfoData
{
	int                                                ConvertStancePassiveAbnormalCid;                          // 0x0034(0x0004)
	int                                                ConvertStanceChangeAbnormalCid;                           // 0x0038(0x0004)
	int                                                StanceCid;                                                // 0x003C(0x0004)
	float                                              AddSwapCoolTime;                                          // 0x0040(0x0004)
	float                                              AddChainStateTime;                                        // 0x0044(0x0004)
	int                                                AttachAbnormalCid;                                        // 0x0048(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.StanceInfoData
// 0x0038 (0x006C - 0x0034)
struct FStanceInfoData : public FContentInfoData
{
	TEnumAsByte<ECEClassType>                          UseClass;                                                 // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	TArray<int>                                        StanceSkillCidList;                                       // 0x0038(0x0010) (AlwaysInit, NeedCtorLink)
	float                                              SwapCooltime;                                             // 0x0048(0x0004)
	float                                              ChainStateTime;                                           // 0x004C(0x0004)
	int                                                StancePassiveAbnormal;                                    // 0x0050(0x0004)
	int                                                StanceChangeStart;                                        // 0x0054(0x0004)
	int                                                StanceChangeComplete;                                     // 0x0058(0x0004)
	int                                                EnableIconIndex;                                          // 0x005C(0x0004)
	int                                                DisableIconIndex;                                         // 0x0060(0x0004)
	int                                                StartNode_01;                                             // 0x0064(0x0004)
	int                                                StartNode_02;                                             // 0x0068(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.StanceSkillInfoData
// 0x0024 (0x0058 - 0x0034)
struct FStanceSkillInfoData : public FContentInfoData
{
	TEnumAsByte<ECEStanceSkillType>                    StanceSkillType;                                          // 0x0034(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0035(0x0003) MISSED OFFSET
	int                                                SkillCodeName;                                            // 0x0038(0x0004)
	float                                              QTETime;                                                  // 0x003C(0x0004)
	TArray<struct FBLStanceSkillQTEInfo>               NextQTE;                                                  // 0x0040(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                StartNode_01;                                             // 0x0050(0x0004)
	int                                                StartNode_02;                                             // 0x0054(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.QuestAdditionalInfoData
// 0x0040 (0x0074 - 0x0034)
struct FQuestAdditionalInfoData : public FContentInfoData
{
	TArray<struct FQuestNPCMarker>                     QuestGiverLocationInfoList;                               // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestNPCMarker>                     QuestRewarderLocationInfoList;                            // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FQuestArea>                          ObjectiveQuestAreaInfoList;                               // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FClientQuestObjectiveInfo>           ObjectiveInfoList;                                        // 0x0064(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.PropMapInfoData
// 0x003C (0x0070 - 0x0034)
struct FPropMapInfoData : public FContentInfoData
{
	TEnumAsByte<ECEPropCategory>                       PropCategory;                                             // 0x0034(0x0001)
	TEnumAsByte<ECEPropInteractType>                   PropInteractType;                                         // 0x0035(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0036(0x0002) MISSED OFFSET
	int                                                Prop_Sid;                                                 // 0x0038(0x0004)
	struct FString                                     LevelName;                                                // 0x003C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     LevelCodeName;                                            // 0x004C(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FVector>                             Location;                                                 // 0x005C(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                WorldMapCId;                                              // 0x006C(0x0004)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.MonsterBookMinimapInfoData
// 0x0010 (0x0044 - 0x0034)
struct FMonsterBookMinimapInfoData : public FContentInfoData
{
	TArray<struct FMonsterBookArea>                    MonsterBookAreaInfo;                                      // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLInfoCollectionTypes.CreditConstInfoData
// 0x0004 (0x0038 - 0x0034)
struct FCreditConstInfoData : public FContentInfoData
{
	int                                                ScrollingSpeed;                                           // 0x0034(0x0004)
};

// ScriptStruct BLGame.ABLSDLTypes.DBMailItemData
// 0x000C
struct FDBMailItemData
{
	int                                                ItemDBId;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemCid;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                ItemCount;                                                // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.DBMailData
// 0x0068
struct FDBMailData
{
	int                                                MailType;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                MailStateType;                                            // 0x0004(0x0004) (AlwaysInit)
	struct FString                                     SenderName;                                               // 0x0008(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                SystemMailCId;                                            // 0x0018(0x0004) (AlwaysInit)
	struct FString                                     Title;                                                    // 0x001C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FString                                     Content;                                                  // 0x002C(0x0010) (AlwaysInit, NeedCtorLink)
	struct FQWord                                      Gold;                                                     // 0x003C(0x0008) (AlwaysInit)
	int                                                WorldType;                                                // 0x0044(0x0004) (AlwaysInit)
	int                                                WorldWrapperCId;                                          // 0x0048(0x0004) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x004C(0x000C) (AlwaysInit)
	TArray<struct FDBMailItemData>                     MailItemData;                                             // 0x0058(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.NewMailDataForLog
// 0x0010
struct FNewMailDataForLog
{
	int                                                MailDBId;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                MailType;                                                 // 0x0004(0x0004) (AlwaysInit)
	int                                                SenderDBId;                                               // 0x0008(0x0004) (AlwaysInit)
	int                                                ReturnMail;                                               // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.DeleteMailDataForLog
// 0x0018
struct FDeleteMailDataForLog
{
	int                                                MailDBId;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                MailStateType;                                            // 0x0004(0x0004) (AlwaysInit)
	int                                                MailDeleteType;                                           // 0x0008(0x0004) (AlwaysInit)
	int                                                SenderDBId;                                               // 0x000C(0x0004) (AlwaysInit)
	struct FQWord                                      UnregDate;                                                // 0x0010(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.MailCountData
// 0x001C
struct FMailCountData
{
	int                                                NewMailCount;                                             // 0x0000(0x0004) (AlwaysInit)
	int                                                OverMailCount;                                            // 0x0004(0x0004) (AlwaysInit)
	int                                                NormalMailCount;                                          // 0x0008(0x0004) (AlwaysInit)
	int                                                GMMailCount;                                              // 0x000C(0x0004) (AlwaysInit)
	int                                                SystemMailCount;                                          // 0x0010(0x0004) (AlwaysInit)
	int                                                SentMailCount;                                            // 0x0014(0x0004) (AlwaysInit)
	int                                                KeepMailCount;                                            // 0x0018(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.RequestMailPageData
// 0x0010
struct FRequestMailPageData
{
	int                                                JumpPageCount;                                            // 0x0000(0x0004) (AlwaysInit)
	int                                                SortMailDBId;                                             // 0x0004(0x0004) (AlwaysInit)
	struct FQWord                                      SortSendTime;                                             // 0x0008(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.DBAuctionData
// 0x00B8
struct FDBAuctionData
{
	struct FQWord                                      LeftTime;                                                 // 0x0000(0x0008) (AlwaysInit)
	struct FQWord                                      AuctionPrice;                                             // 0x0008(0x0008) (AlwaysInit)
	int                                                ItemDBId;                                                 // 0x0010(0x0004) (AlwaysInit)
	int                                                ItemCid;                                                  // 0x0014(0x0004) (AlwaysInit)
	int                                                ItemCount;                                                // 0x0018(0x0004) (AlwaysInit)
	int                                                ItemRemainEffect;                                         // 0x001C(0x0004) (AlwaysInit)
	int                                                ItemAuctionCategoryFirst;                                 // 0x0020(0x0004) (AlwaysInit)
	int                                                ItemAuctionCategorySecond;                                // 0x0024(0x0004) (AlwaysInit)
	int                                                ItemAuctionCategoryThird;                                 // 0x0028(0x0004) (AlwaysInit)
	int                                                Item_Grade;                                               // 0x002C(0x0004) (AlwaysInit)
	unsigned char                                      Item_Min_Level;                                           // 0x0030(0x0001) (AlwaysInit)
	unsigned char                                      Item_Max_Level;                                           // 0x0031(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0032(0x0002) MISSED OFFSET
	struct FString                                     Item_Name;                                                // 0x0034(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Item_Usable_Class;                                        // 0x0044(0x0004) (AlwaysInit)
	int                                                Item_Usable_Race;                                         // 0x0048(0x0004) (AlwaysInit)
	unsigned char                                      Realm;                                                    // 0x004C(0x0001) (AlwaysInit)
	unsigned char                                      ItemCustomCount;                                          // 0x004D(0x0001) (AlwaysInit)
	unsigned char                                      ItemPotentialLevel;                                       // 0x004E(0x0001) (AlwaysInit)
	unsigned char                                      ItemUpgradeLevel;                                         // 0x004F(0x0001) (AlwaysInit)
	unsigned char                                      ItemEvolutionLevel;                                       // 0x0050(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0051(0x0003) MISSED OFFSET
	TArray<unsigned char>                              ItemStatDataList;                                         // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<unsigned char>                              ItemCustomizingDataList;                                  // 0x0064(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                ItemLegendOpt;                                            // 0x0074(0x0004) (AlwaysInit)
	int                                                ItemRuneItemCId1;                                         // 0x0078(0x0004) (AlwaysInit)
	int                                                ItemRuneItemCId2;                                         // 0x007C(0x0004) (AlwaysInit)
	int                                                ItemRuneItemCId3;                                         // 0x0080(0x0004) (AlwaysInit)
	int                                                ItemRuneItemCId4;                                         // 0x0084(0x0004) (AlwaysInit)
	int                                                ItemAdditionalEffectCid1;                                 // 0x0088(0x0004) (AlwaysInit)
	int                                                ItemAdditionalEffectCid2;                                 // 0x008C(0x0004) (AlwaysInit)
	int                                                ItemAdditionalEffectCid3;                                 // 0x0090(0x0004) (AlwaysInit)
	int                                                ItemAdditionalEffectCid4;                                 // 0x0094(0x0004) (AlwaysInit)
	unsigned char                                      ItemAdditionalEffectType1;                                // 0x0098(0x0001) (AlwaysInit)
	unsigned char                                      ItemAdditionalEffectType2;                                // 0x0099(0x0001) (AlwaysInit)
	unsigned char                                      ItemAdditionalEffectType3;                                // 0x009A(0x0001) (AlwaysInit)
	unsigned char                                      ItemAdditionalEffectType4;                                // 0x009B(0x0001) (AlwaysInit)
	float                                              ItemDurability;                                           // 0x009C(0x0004) (AlwaysInit)
	int                                                ItemMaxDurability;                                        // 0x00A0(0x0004) (AlwaysInit)
	int                                                ItemFixedMax_Durability;                                  // 0x00A4(0x0004) (AlwaysInit)
	struct FString                                     Item_MPF_ExtractionData;                                  // 0x00A8(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.DBAuctionSearchData
// 0x0040
struct FDBAuctionSearchData
{
	unsigned char                                      Realm;                                                    // 0x0000(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                IsDescSort;                                               // 0x0004(0x0004) (AlwaysInit)
	int                                                AuctionSortColumnType;                                    // 0x0008(0x0004) (AlwaysInit)
	unsigned char                                      ItemMinLevel;                                             // 0x000C(0x0001) (AlwaysInit)
	unsigned char                                      ItemMaxLevel;                                             // 0x000D(0x0001) (AlwaysInit)
	unsigned char                                      UsableLevel;                                              // 0x000E(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData01[0x1];                                       // 0x000F(0x0001) MISSED OFFSET
	int                                                UsableClass;                                              // 0x0010(0x0004) (AlwaysInit)
	int                                                UsableRace;                                               // 0x0014(0x0004) (AlwaysInit)
	struct FQWord                                      AuctionPrice;                                             // 0x0018(0x0008) (AlwaysInit)
	int                                                ItemGrade;                                                // 0x0020(0x0004) (AlwaysInit)
	int                                                ItemAuctionCategoryFirst;                                 // 0x0024(0x0004) (AlwaysInit)
	int                                                ItemAuctionCategorySecond;                                // 0x0028(0x0004) (AlwaysInit)
	int                                                ItemAuctionCategoryThird;                                 // 0x002C(0x0004) (AlwaysInit)
	struct FString                                     ItemName;                                                 // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ABLSDLTypes.DBGuildGradeData
// 0x0020
struct FDBGuildGradeData
{
	unsigned char                                      Type;                                                     // 0x0000(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	struct FString                                     Name;                                                     // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
	unsigned char                                      Priority;                                                 // 0x0014(0x0001) (AlwaysInit)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0015(0x0003) MISSED OFFSET
	struct FQWord                                      Authority;                                                // 0x0018(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.DBFriendData
// 0x0030
struct FDBFriendData
{
	int                                                Result;                                                   // 0x0000(0x0004) (AlwaysInit)
	int                                                FriendDbId;                                               // 0x0004(0x0004) (AlwaysInit)
	struct FQWord                                      LastLogoutDate;                                           // 0x0008(0x0008) (AlwaysInit)
	struct FString                                     Name;                                                     // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                Level;                                                    // 0x0020(0x0004) (AlwaysInit)
	int                                                ClassType;                                                // 0x0024(0x0004) (AlwaysInit)
	struct FQWord                                      RXP;                                                      // 0x0028(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.InventoryExpansionData
// 0x000C
struct FInventoryExpansionData
{
	int                                                ExpansionCid;                                             // 0x0000(0x0004) (AlwaysInit)
	struct FQWord                                      ExpireTime;                                               // 0x0004(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillDurationEffectActivationData
// 0x000C
struct FSkillDurationEffectActivationData
{
	int                                                SkillCid;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                Activated;                                                // 0x0004(0x0004) (AlwaysInit)
	int                                                OperatorSid;                                              // 0x0008(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillActiveData
// 0x0008
struct FSkillActiveData
{
	int                                                SkillCid;                                                 // 0x0000(0x0004) (AlwaysInit)
	int                                                isActive;                                                 // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ParamStateData
// 0x0008
struct FParamStateData
{
	int                                                Type;                                                     // 0x0000(0x0004) (AlwaysInit)
	int                                                Value;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SkillBranchMapping
// 0x0008
struct FSkillBranchMapping
{
	int                                                Parent_skill_id;                                          // 0x0000(0x0004) (AlwaysInit)
	int                                                Child_skill_id;                                           // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SpecialWarPlayerData
// 0x0028
struct FSpecialWarPlayerData
{
	int                                                DBid;                                                     // 0x0000(0x0004) (AlwaysInit)
	int                                                Sid;                                                      // 0x0004(0x0004) (AlwaysInit)
	int                                                Realm;                                                    // 0x0008(0x0004) (AlwaysInit)
	int                                                joinType;                                                 // 0x000C(0x0004) (AlwaysInit)
	int                                                checkConditionForJoin;                                    // 0x0010(0x0004) (AlwaysInit)
	int                                                lastConditionForJoin;                                     // 0x0014(0x0004) (AlwaysInit)
	struct FQWord                                      remainWarAwayAlertTick;                                   // 0x0018(0x0008) (AlwaysInit)
	struct FQWord                                      remainWarAwayKickTick;                                    // 0x0020(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.RecipeCodeMaterialInfo
// 0x0010
struct FRecipeCodeMaterialInfo
{
	int                                                firstMaterialType;                                        // 0x0000(0x0004) (AlwaysInit)
	int                                                secondMaterialType;                                       // 0x0004(0x0004) (AlwaysInit)
	int                                                thirdMaterialType;                                        // 0x0008(0x0004) (AlwaysInit)
	int                                                fourthMaterialType;                                       // 0x000C(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.FirstMaterialItemInfo
// 0x0014
struct FFirstMaterialItemInfo
{
	int                                                firstMaterialType;                                        // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemCid;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                ItemSid;                                                  // 0x0008(0x0004) (AlwaysInit)
	int                                                Grade;                                                    // 0x000C(0x0004) (AlwaysInit)
	int                                                rune_level;                                               // 0x0010(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.SecondMaterialItemInfo
// 0x0014
struct FSecondMaterialItemInfo
{
	int                                                secondMaterialType;                                       // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemCid;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                ItemSid;                                                  // 0x0008(0x0004) (AlwaysInit)
	int                                                Grade;                                                    // 0x000C(0x0004) (AlwaysInit)
	int                                                rune_level;                                               // 0x0010(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ThirdMaterialItemInfo
// 0x0014
struct FThirdMaterialItemInfo
{
	int                                                thirdMaterialType;                                        // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemCid;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                ItemSid;                                                  // 0x0008(0x0004) (AlwaysInit)
	int                                                Grade;                                                    // 0x000C(0x0004) (AlwaysInit)
	int                                                rune_level;                                               // 0x0010(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.FourthMaterialItemInfo
// 0x0014
struct FFourthMaterialItemInfo
{
	int                                                fourthMaterialType;                                       // 0x0000(0x0004) (AlwaysInit)
	int                                                ItemCid;                                                  // 0x0004(0x0004) (AlwaysInit)
	int                                                ItemSid;                                                  // 0x0008(0x0004) (AlwaysInit)
	int                                                Grade;                                                    // 0x000C(0x0004) (AlwaysInit)
	int                                                rune_level;                                               // 0x0010(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.RequireMaterialItemInfo
// 0x0008
struct FRequireMaterialItemInfo
{
	int                                                ItemCid;                                                  // 0x0000(0x0004) (AlwaysInit)
	int                                                COUNT;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.RequireMaterialItemInfoList
// 0x0020
struct FRequireMaterialItemInfoList
{
	struct FRequireMaterialItemInfo                    firstRequireMaterialItemInfo;                             // 0x0000(0x0008) (AlwaysInit)
	struct FRequireMaterialItemInfo                    secondRequireMaterialItemInfo;                            // 0x0008(0x0008) (AlwaysInit)
	struct FRequireMaterialItemInfo                    thirdRequireMaterialItemInfo;                             // 0x0010(0x0008) (AlwaysInit)
	struct FRequireMaterialItemInfo                    fourthRequireMaterialItemInfo;                            // 0x0018(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.OccupationWarPlayerData
// 0x002C
struct FOccupationWarPlayerData
{
	int                                                Sid;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                Realm;                                                    // 0x0004(0x0004) (AlwaysInit)
	struct FQWord                                      remainWarAwayAlertTick;                                   // 0x0008(0x0008) (AlwaysInit)
	struct FQWord                                      remainWarAwayKickTick;                                    // 0x0010(0x0008) (AlwaysInit)
	struct FVector                                     Location;                                                 // 0x0018(0x000C) (AlwaysInit)
	struct FQWord                                      WarInfoReqTick;                                           // 0x0024(0x0008) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.ResultExchangeGem
// 0x0008
struct FResultExchangeGem
{
	int                                                Type;                                                     // 0x0000(0x0004) (AlwaysInit)
	int                                                COUNT;                                                    // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.RestrictTradeData
// 0x0014
struct FRestrictTradeData
{
	int                                                All;                                                      // 0x0000(0x0004) (AlwaysInit)
	int                                                PersonalTrade;                                            // 0x0004(0x0004) (AlwaysInit)
	int                                                Mail;                                                     // 0x0008(0x0004) (AlwaysInit)
	int                                                Auction;                                                  // 0x000C(0x0004) (AlwaysInit)
	int                                                Warehouse;                                                // 0x0010(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.ABLSDLTypes.CAWorldServerBusyRateInfo
// 0x0008
struct FCAWorldServerBusyRateInfo
{
	int                                                Id;                                                       // 0x0000(0x0004) (AlwaysInit)
	int                                                busyRate;                                                 // 0x0004(0x0004) (AlwaysInit)
};

// ScriptStruct BLGame.BSM_Skill_Taming.TamingProgress
// 0x000C
struct FTamingProgress
{
	float                                              AcceptTime;                                               // 0x0000(0x0004) (Transient)
	float                                              CreatureMp;                                               // 0x0004(0x0004) (Transient)
	float                                              TamingMp;                                                 // 0x0008(0x0004) (Transient)
};

// ScriptStruct BLGame.ActionController.PCTextInfo
// 0x002C
struct FPCTextInfo
{
	class ABLNpc*                                      Npc;                                                      // 0x0000(0x0008) (Transient)
	unsigned long                                      bNPCRotation : 1;                                         // 0x0008(0x0004) (Transient)
	struct FName                                       NpcName;                                                  // 0x000C(0x0008) (Transient)
	struct FDialogTextInfo                             TextInfo;                                                 // 0x0014(0x0014) (Transient, NeedCtorLink)
	int                                                TextIndex;                                                // 0x0028(0x0004) (Transient)
};

// ScriptStruct BLGame.ActionMappingManager.AvailableSkillInfo
// 0x0028
struct FAvailableSkillInfo
{
	int                                                SkillCid;                                                 // 0x0000(0x0004)
	TEnumAsByte<ECESkillGradeType>                     SkillGrade;                                               // 0x0004(0x0001)
	TEnumAsByte<ECESkillCategoryType>                  SkillCategory;                                            // 0x0005(0x0001)
	unsigned char                                      UnknownData00[0x2];                                       // 0x0006(0x0002) MISSED OFFSET
	int                                                SkillGroupId;                                             // 0x0008(0x0004)
	int                                                UsableLevel;                                              // 0x000C(0x0004)
	unsigned long                                      bHideSkill : 1;                                           // 0x0010(0x0004)
	unsigned long                                      bUseQTE : 1;                                              // 0x0010(0x0004)
	unsigned long                                      bNeedInstall : 1;                                         // 0x0010(0x0004)
	struct FString                                     SkillName;                                                // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                IconIndex;                                                // 0x0024(0x0004)
};

// ScriptStruct BLGame.ActionMappingManager.SkillLinkedInfo
// 0x0040
struct FSkillLinkedInfo
{
	TArray<int>                                        PrecedeSkillList;                                         // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        FollowSkillList;                                          // 0x0010(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        ChainPrecedeSkillList;                                    // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        ChainFollowSkillList;                                     // 0x0030(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ActionMappingManager.SkillFastLaunchInfo
// 0x0010
struct FSkillFastLaunchInfo
{
	TArray<int>                                        FastLaunchSkillList;                                      // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ActionMappingManager.SkillDeckCandidateSkillInfo
// 0x0038
struct FSkillDeckCandidateSkillInfo
{
	int                                                SkillCid;                                                 // 0x0000(0x0004)
	int                                                UsableLevel;                                              // 0x0004(0x0004)
	unsigned long                                      bRecommend : 1;                                           // 0x0008(0x0004)
	unsigned long                                      bSetted : 1;                                              // 0x0008(0x0004)
	unsigned long                                      bNew : 1;                                                 // 0x0008(0x0004)
	TEnumAsByte<ECESkillGradeType>                     SkillGrade;                                               // 0x000C(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x000D(0x0003) MISSED OFFSET
	int                                                SkillGroupId;                                             // 0x0010(0x0004)
	int                                                IconIndex;                                                // 0x0014(0x0004)
	struct FString                                     SkillName;                                                // 0x0018(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<struct FSkillDeckCandidateSkillInfo>        SubSkillInfo;                                             // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.ActionMappingManager.SkillDeckSelectionInfo
// 0x0010
struct FSkillDeckSelectionInfo
{
	int                                                SelectTacticIndex;                                        // 0x0000(0x0004)
	int                                                UseTacticIndex;                                           // 0x0004(0x0004)
	TEnumAsByte<ESkillDeckCategoryType>                SelectCategoryType;                                       // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	unsigned long                                      bFirstSetCheckFlag : 1;                                   // 0x000C(0x0004)
};

// ScriptStruct BLGame.ActionMappingManager.NewSkillInfo
// 0x0004
struct FNewSkillInfo
{
	int                                                SkillCid;                                                 // 0x0000(0x0004)
};

// ScriptStruct BLGame.BLTypes.CustomizeTypeMappingInfo
// 0x0008
struct FCustomizeTypeMappingInfo
{
	TEnumAsByte<ECECustomizeType>                      CMT;                                                      // 0x0000(0x0001)
	TEnumAsByte<ECustomizeActionScriptUIEnum>          CM_AS_UI;                                                 // 0x0001(0x0001)
	TEnumAsByte<ECustomizeActionScriptUIType>          CM_AS_UI_T;                                               // 0x0002(0x0001)
	unsigned char                                      UnknownData00[0x1];                                       // 0x0003(0x0001) MISSED OFFSET
	int                                                Dummy;                                                    // 0x0004(0x0004)
};

// ScriptStruct BLGame.BLTypes.CrowdControlStateData
// 0x0014
struct FCrowdControlStateData
{
	int                                                ReferenceCount;                                           // 0x0000(0x0004) (Transient)
	TArray<float>                                      Params;                                                   // 0x0004(0x0010) (Transient, AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLAnimCopycatOfBaseMesh.AnimSequenceCacheInfo
// 0x000C
struct FAnimSequenceCacheInfo
{
	class UAnimSequence*                               AnimSeq;                                                  // 0x0000(0x0008)
	int                                                LinkupIndex;                                              // 0x0008(0x0004)
};

// ScriptStruct BLGame.CharacterizeSkeletalMeshComponent.CharacterizeInfoCacheResult
// 0x0004
struct FCharacterizeInfoCacheResult
{
	unsigned long                                      bNeedMeshRebuild : 1;                                     // 0x0000(0x0004)
	unsigned long                                      bNeedBoneDeform : 1;                                      // 0x0000(0x0004)
};

// ScriptStruct BLGame.BLBroadwayPlayer.SkillServerInfo
// 0x0024
struct FSkillServerInfo
{
	class UBroadwayGameInfo*                           Info;                                                     // 0x0000(0x0008)
	int                                                Cid;                                                      // 0x0008(0x0004)
	int                                                TargetID;                                                 // 0x000C(0x0004)
	int                                                Level;                                                    // 0x0010(0x0004)
	float                                              CastingTime;                                              // 0x0014(0x0004)
	float                                              HitTime;                                                  // 0x0018(0x0004)
	float                                              CoolTime;                                                 // 0x001C(0x0004)
	float                                              AdditionalHitTime;                                        // 0x0020(0x0004)
};

// ScriptStruct BLGame.BLColosseumWar.ColosseumWarScoreInfo
// 0x0010 (0x0030 - 0x0020)
struct FColosseumWarScoreInfo : public FBLConquestScoreInfo
{
	int                                                DealScore;                                                // 0x0020(0x0004)
	int                                                HealScore;                                                // 0x0024(0x0004)
	int                                                RewardScore;                                              // 0x0028(0x0004)
	unsigned long                                      bExitPlayer : 1;                                          // 0x002C(0x0004)
};

// ScriptStruct BLGame.BLDisplayItem.DisplayItemData
// 0x0094
struct FDisplayItemData
{
	int                                                Cid;                                                      // 0x0000(0x0004)
	float                                              CachedTime;                                               // 0x0004(0x0004)
	struct FItemData                                   Data;                                                     // 0x0008(0x008C) (NeedCtorLink)
};

// ScriptStruct BLGame.PawnDLEManager.DLEInstantUpdatePawnDistInfo
// 0x000C
struct FDLEInstantUpdatePawnDistInfo
{
	class ABLPawnBase*                                 InstantUpdatePawn;                                        // 0x0000(0x0008)
	float                                              Distance;                                                 // 0x0008(0x0004)
};

// ScriptStruct BLGame.BLEquipmentItemInfo.CookedEquipInfo
// 0x001C
struct FCookedEquipInfo
{
	struct FString                                     BodyInfoName;                                             // 0x0000(0x0010) (NeedCtorLink)
	TEnumAsByte<ECEClassType>                          ClassType;                                                // 0x0010(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	class UBLEquipmentItemEquipInfo*                   EquipInfo;                                                // 0x0014(0x0008)
};

// ScriptStruct BLGame.BLEquipmentItemInfo.EquipInfoEntityExistence
// 0x0004
struct FEquipInfoEntityExistence
{
	unsigned long                                      bHasEquipInfo : 1;                                        // 0x0000(0x0004)
	unsigned long                                      bHasInHandInfo : 1;                                       // 0x0000(0x0004)
	unsigned long                                      bHasDressInfo : 1;                                        // 0x0000(0x0004)
	unsigned long                                      bHasSkelMesh : 1;                                         // 0x0000(0x0004)
};

// ScriptStruct BLGame.GFxUI_CharInfo.ParameterMapping
// 0x002C
struct FParameterMapping
{
	int                                                PageNum;                                                  // 0x0000(0x0004)
	int                                                Index;                                                    // 0x0004(0x0004)
	TArray<TEnumAsByte<ECEParamType>>                  Types;                                                    // 0x0008(0x0010) (NeedCtorLink)
	struct FString                                     ParamName;                                                // 0x0018(0x0010) (NeedCtorLink)
	unsigned long                                      IsUpdate : 1;                                             // 0x0028(0x0004)
};

// ScriptStruct BLGame.BLEventHandler.BLEventHandlerInterface
// 0x0004
struct FBLEventHandlerInterface
{
	int                                                Dummy;                                                    // 0x0000(0x0004) (Const, Native)
};

// ScriptStruct BLGame.PawnOutLineComponent.OutLineActiveInfo
// 0x0002
struct FOutLineActiveInfo
{
	TEnumAsByte<EPawnOutLineType>                      OutLineType;                                              // 0x0000(0x0001)
	TEnumAsByte<EPawnOutLineColorType>                 OutLineColorType;                                         // 0x0001(0x0001)
};

// ScriptStruct BLGame.BSM_PhaseAction.PhaseSeqPlayInfo
// 0x0018
struct FPhaseSeqPlayInfo
{
	struct FName                                       Sequence;                                                 // 0x0000(0x0008)
	float                                              BlendIn;                                                  // 0x0008(0x0004)
	float                                              BlendOut;                                                 // 0x000C(0x0004)
	float                                              AnimRate;                                                 // 0x0010(0x0004)
	unsigned long                                      bLoop : 1;                                                // 0x0014(0x0004)
	unsigned long                                      bEnable : 1;                                              // 0x0014(0x0004)
	unsigned long                                      bUseRootMotion : 1;                                       // 0x0014(0x0004)
	unsigned long                                      bFullBodyAnim : 1;                                        // 0x0014(0x0004)
};

// ScriptStruct BLGame.BSM_PhaseAction.PhaseActionData
// 0x000C
struct FPhaseActionData
{
	int                                                PhaseType;                                                // 0x0000(0x0004)
	float                                              Duration;                                                 // 0x0004(0x0004)
	unsigned long                                      bManuallyChangePhase : 1;                                 // 0x0008(0x0004)
};

// ScriptStruct BLGame.PawnAsset.EquipSetIterator
// 0x0010
struct FEquipSetIterator
{
	struct FPointer                                    EquipSet;                                                 // 0x0000(0x0008) (Const, Native)
	TEnumAsByte<ECEEquipSlotType>                      SlotIndex;                                                // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	int                                                ItemCid;                                                  // 0x000C(0x0004)
};

// ScriptStruct BLGame.PawnAsset.EquipSetItemIterator
// 0x0014
struct FEquipSetItemIterator
{
	struct FPointer                                    EquipSet;                                                 // 0x0000(0x0008) (Const, Native)
	TEnumAsByte<ECEEquipSlotType>                      SlotIndex;                                                // 0x0008(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0009(0x0003) MISSED OFFSET
	class UItemAsset*                                  Item;                                                     // 0x000C(0x0008)
};

// ScriptStruct BLGame.BLPlayerInventory.InventorySlotComponent
// 0x0020
struct FInventorySlotComponent
{
	TEnumAsByte<EInventorySlotComponentType>           SlotCompType;                                             // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SlotCount;                                                // 0x0004(0x0004)
	unsigned long                                      bOpened : 1;                                              // 0x0008(0x0004)
	unsigned long                                      bNeedOpenSound : 1;                                       // 0x0008(0x0004)
	unsigned long                                      bNeedOpenEffect : 1;                                      // 0x0008(0x0004)
	int                                                ExpansionCid;                                             // 0x000C(0x0004)
	TEnumAsByte<EInventorySlotExpansionType>           ExpansionClientType;                                      // 0x0010(0x0001)
	unsigned char                                      UnknownData01[0x3];                                       // 0x0011(0x0003) MISSED OFFSET
	struct FQWord                                      ExpansionExpireTime;                                      // 0x0014(0x0008)
	float                                              ExpansionRemainSeconds;                                   // 0x001C(0x0004)
};

// ScriptStruct BLGame.BLPropStateHandler.PropStateTriggerTableItem
// 0x0002
struct FPropStateTriggerTableItem
{
	TEnumAsByte<EPropEffectTriggerType_InState>        InStateTriggerType;                                       // 0x0000(0x0001)
	TEnumAsByte<EPropEffectTriggerType_OnStart>        OnStartTriggerType;                                       // 0x0001(0x0001)
};

// ScriptStruct BLGame.BLSpecialWar.SpecialWarScoreInfo
// 0x0054 (0x0074 - 0x0020)
struct FSpecialWarScoreInfo : public FBLConquestScoreInfo
{
	struct FString                                     GuildName;                                                // 0x0020(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                GuildIconIndex;                                           // 0x0030(0x0004)
	int                                                KillScore;                                                // 0x0034(0x0004)
	int                                                AssistCount;                                              // 0x0038(0x0004)
	int                                                TotalScore;                                               // 0x003C(0x0004)
	unsigned long                                      bMyGuild : 1;                                             // 0x0040(0x0004)
	TArray<int>                                        MedalCidList;                                             // 0x0044(0x0010) (AlwaysInit, NeedCtorLink)
	TArray<int>                                        MedalIconIndexList;                                       // 0x0054(0x0010) (AlwaysInit, NeedCtorLink)
	int                                                GoldMedalCount;                                           // 0x0064(0x0004)
	int                                                SilverMedalCount;                                         // 0x0068(0x0004)
	int                                                BronzeMedalCount;                                         // 0x006C(0x0004)
	int                                                RewardCount;                                              // 0x0070(0x0004)
};

// ScriptStruct BLGame.BLUIManager.DamageFloater
// 0x0014
struct FDamageFloater
{
	TEnumAsByte<EBattleMessageFloaterType>             FloaterType;                                              // 0x0000(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	float                                              ElapsedTime;                                              // 0x0004(0x0004)
	float                                              MaxElapsedTime;                                           // 0x0008(0x0004)
	float                                              Scale;                                                    // 0x000C(0x0004)
	int                                                Damage;                                                   // 0x0010(0x0004)
};

// ScriptStruct BLGame.BLUIManager.BattleMessageFloater
// 0x0014
struct FBattleMessageFloater
{
	int                                                Sid;                                                      // 0x0000(0x0004)
	TArray<struct FDamageFloater>                      DamageFloaterList;                                        // 0x0004(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLUIPlayer.ASStream
// 0x0010
struct FASStream
{
	TArray<struct FASValue>                            args;                                                     // 0x0000(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BLWorldMapNPCManager.ConquestWarNPCInfo
// 0x0038
struct FConquestWarNPCInfo
{
	int                                                ServerID;                                                 // 0x0000(0x0004)
	int                                                Cid;                                                      // 0x0004(0x0004)
	struct FVector                                     Location;                                                 // 0x0008(0x000C)
	struct FString                                     NpcName;                                                  // 0x0014(0x0010) (AlwaysInit, NeedCtorLink)
	TEnumAsByte<ECENPCCategory>                        NPCCategory;                                              // 0x0024(0x0001)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0025(0x0003) MISSED OFFSET
	struct FString                                     NPCFuncName;                                              // 0x0028(0x0010) (AlwaysInit, NeedCtorLink)
};

// ScriptStruct BLGame.BoneDeformationTemplate.BoneDeformingRawInfo
// 0x0009
struct FBoneDeformingRawInfo
{
	int                                                BoneIndex;                                                // 0x0000(0x0004)
	float                                              Value;                                                    // 0x0004(0x0004)
	TEnumAsByte<EBoneDeformApplication>                ApplyFunction;                                            // 0x0008(0x0001)
};

// ScriptStruct BLGame.MainActionBar.ActionBarQTESkillSlotInfo
// 0x000C
struct FActionBarQTESkillSlotInfo
{
	TEnumAsByte<EActionBarSlotType>                    SlotType;                                                 // 0x0000(0x0001) (Const)
	unsigned char                                      UnknownData00[0x3];                                       // 0x0001(0x0003) MISSED OFFSET
	int                                                SkillCid;                                                 // 0x0004(0x0004)
	int                                                SlotIndex;                                                // 0x0008(0x0004)
};

// ScriptStruct BLGame.PCControlInfo.ActionNameToEnumData
// 0x0010
struct FActionNameToEnumData
{
	struct FName                                       ActionName;                                               // 0x0000(0x0008)
	int                                                AimEnum;                                                  // 0x0008(0x0004)
	int                                                ClassicEnum;                                              // 0x000C(0x0004)
};

// ScriptStruct BLGame.PCInfo.ClientPcReturnInfo
// 0x0008
struct FClientPcReturnInfo
{
	int                                                ToTime;                                                   // 0x0000(0x0004)
	int                                                RequireLumena;                                            // 0x0004(0x0004)
};

// ScriptStruct BLGame.V2MountInfo.BLV2MountConstInfo
// 0x0020
struct FBLV2MountConstInfo
{
	int                                                MountUncommonMaxLevel;                                    // 0x0000(0x0004)
	int                                                MountRareMaxLevel;                                        // 0x0004(0x0004)
	int                                                MountEpicMaxLevel;                                        // 0x0008(0x0004)
	int                                                MountLegendMaxLevel;                                      // 0x000C(0x0004)
	int                                                MountFatigueTick;                                         // 0x0010(0x0004)
	struct FMPFGradeUpChanceInfo                       MaxGradeChanceMileage;                                    // 0x0014(0x000C)
};

}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
